// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Goals$AgdaModeVscode = require("../../src/Goals.bs.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var State__Connection$AgdaModeVscode = require("../../src/State/State__Connection.bs.js");

describe.only("agda-mode.give", (function () {
        var fileContent = {
          contents: ""
        };
        beforeEach(async function () {
              fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("CaseSplit.agda"));
            });
        afterEach(async function () {
              return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset("CaseSplit.agda"), fileContent.contents);
            });
        it("should be responded with the correct responses", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("CaseSplit.agda");
                await Editor$AgdaModeVscode.$$Text.insert(ctx.state.document, new Vscode.Position(7, 16), "x");
                var responses = await State__Connection$AgdaModeVscode.sendRequestAndCollectResponses(ctx.state, {
                      TAG: "Case2",
                      _0: {
                        index: 0,
                        indexString: "0",
                        start: 89,
                        end: 96
                      },
                      [Symbol.for("name")]: "Case2"
                    });
                var filteredResponses = responses.filter(Test__Util$AgdaModeVscode.filteredResponse);
                return Curry._3(Assert.deepStrictEqual, filteredResponses, [
                            {
                              TAG: "InteractionPoints",
                              _0: [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8
                              ],
                              [Symbol.for("name")]: "InteractionPoints"
                            },
                            {
                              TAG: "MakeCase",
                              _0: "ExtendedLambda",
                              _1: [
                                "Z → ?",
                                "(S x) → ?"
                              ],
                              [Symbol.for("name")]: "MakeCase"
                            }
                          ], undefined);
              }));
        it("should handle MakeCase::ExtendedLambda", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("CaseSplit.agda");
                await Test__Util$AgdaModeVscode.AgdaMode.$$case(ctx, new Vscode.Position(7, 16), "x");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.size(ctx.state.goals2), 10, undefined);
                var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("CaseSplit.agda"));
                var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("CaseSplit.agda.out"));
                return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
              }));
      }));

/*  Not a pure module */
