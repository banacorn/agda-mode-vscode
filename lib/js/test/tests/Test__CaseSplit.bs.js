// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Goals$AgdaModeVscode = require("../../src/Goals.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");

describe("agda-mode.case", (function () {
        var fileContent = {
          contents: ""
        };
        beforeEach(async function () {
              fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("CaseSplit.agda"));
            });
        afterEach(async function () {
              return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset("CaseSplit.agda"), fileContent.contents);
            });
        it("should handle both MakeCase::ExtendedLambda and MakeCase::Function", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("CaseSplit.agda");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.size(ctx.state.goals), 6, undefined);
                await Test__Util$AgdaModeVscode.AgdaMode.$$case(ctx, new Vscode.Position(8, 11), "x");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.size(ctx.state.goals), 7, undefined);
                await Test__Util$AgdaModeVscode.AgdaMode.$$case(ctx, new Vscode.Position(13, 16), "x");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.size(ctx.state.goals), 8, undefined);
                await Test__Util$AgdaModeVscode.AgdaMode.$$case(ctx, new Vscode.Position(18, 11), "x");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.size(ctx.state.goals), 9, undefined);
                await Test__Util$AgdaModeVscode.AgdaMode.$$case(ctx, new Vscode.Position(23, 20), "x");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.size(ctx.state.goals), 10, undefined);
                await Test__Util$AgdaModeVscode.AgdaMode.$$case(ctx, new Vscode.Position(28, 9), "x");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.size(ctx.state.goals), 11, undefined);
                await Test__Util$AgdaModeVscode.AgdaMode.$$case(ctx, new Vscode.Position(32, 21), "x");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.size(ctx.state.goals), 12, undefined);
                await Test__Util$AgdaModeVscode.AgdaMode.$$case(ctx, new Vscode.Position(9, 13), "y");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.size(ctx.state.goals), 13, undefined);
                await Test__Util$AgdaModeVscode.AgdaMode.$$case(ctx, new Vscode.Position(15, 20), "x");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.size(ctx.state.goals), 14, undefined);
                var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("CaseSplit.agda"));
                var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("CaseSplit.agda.out"));
                return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
              }));
      }));

/*  Not a pure module */
