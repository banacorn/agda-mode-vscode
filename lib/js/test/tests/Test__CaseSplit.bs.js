// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Goal$AgdaModeVscode = require("../../src/Goal.bs.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var State__Goal$AgdaModeVscode = require("../../src/State/State__Goal.bs.js");

describe("State__Goal.caseSplitAux dry run", (function () {
        it("should calculate the information needed for case splitting correctly", (async function () {
                var editor = await Vscode.window.showTextDocument(Vscode.Uri.file(Test__Util$AgdaModeVscode.Path.asset("CaseSplit.agda")), undefined);
                var $$document = editor.document;
                var goals = await Goal$AgdaModeVscode.makeMany(editor, [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8
                    ]);
                var results = goals.map(function (goal) {
                      var match = State__Goal$AgdaModeVscode.caseSplitAux($$document, goal);
                      var rewriteRange = match[2];
                      var rewriteRange$1 = new Vscode.Range($$document.positionAt(rewriteRange[0]), $$document.positionAt(rewriteRange[1]));
                      return [
                              match[0],
                              match[1],
                              Editor$AgdaModeVscode.$$Text.get($$document, rewriteRange$1)
                            ];
                    });
                return Curry._3(Assert.deepEqual, results, [
                            [
                              false,
                              9,
                              "x → {!   !}"
                            ],
                            [
                              false,
                              23,
                              "y → {!   !}"
                            ],
                            [
                              false,
                              4,
                              "x → {!   !}"
                            ],
                            [
                              false,
                              4,
                              "y → {!   !}"
                            ],
                            [
                              true,
                              13,
                              "x → {!   !}"
                            ],
                            [
                              true,
                              13,
                              "y → {!   !}"
                            ],
                            [
                              true,
                              2,
                              "x → {!   !}"
                            ],
                            [
                              true,
                              2,
                              "y → {!   !}"
                            ],
                            [
                              false,
                              13,
                              "x → {!   !}"
                            ]
                          ], undefined);
              }));
      }));

describe("agda-mode:case", (function () {
        this.timeout(10000);
        var fileContent = {
          contents: ""
        };
        before(async function () {
              fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("CaseSplit.agda"));
            });
        after(async function () {
              return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset("CaseSplit.agda"), fileContent.contents);
            });
        it("should have more goals after splitting", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("CaseSplit.agda");
                await Test__Util$AgdaModeVscode.AgdaMode.$$case(ctx, [
                      new Vscode.Position(7, 16),
                      "x"
                    ]);
                return Curry._3(Assert.deepEqual, ctx.state.goals.length, 10, undefined);
              }));
      }));

/*  Not a pure module */
