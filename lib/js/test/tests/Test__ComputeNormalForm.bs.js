// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var State__Connection$AgdaModeVscode = require("../../src/State/State__Connection.bs.js");

function run(normalization) {
  describe("request to Agda", (function () {
          describe("global", (function () {
                  it("should be responded with the correct answer", (async function () {
                          var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("ComputeNormalForm.agda");
                          var responses = await State__Connection$AgdaModeVscode.sendRequestAndCollectResponses(ctx.state, {
                                TAG: "ComputeNormalFormGlobal",
                                _0: normalization,
                                _1: "Z + S Z",
                                [Symbol.for("name")]: "ComputeNormalFormGlobal"
                              });
                          var filteredResponses = responses.filter(Test__Util$AgdaModeVscode.filteredResponse);
                          return Curry._3(Assert.deepStrictEqual, filteredResponses, [{
                                        TAG: "DisplayInfo",
                                        _0: {
                                          TAG: "NormalForm",
                                          _0: "S Z",
                                          [Symbol.for("name")]: "NormalForm"
                                        },
                                        [Symbol.for("name")]: "DisplayInfo"
                                      }], undefined);
                        }));
                  it("should be responded with the correct answer", (async function () {
                          var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("ComputeNormalForm.agda");
                          var responses = await State__Connection$AgdaModeVscode.sendRequestAndCollectResponses(ctx.state, {
                                TAG: "ComputeNormalFormGlobal",
                                _0: normalization,
                                _1: "S Z + S Z",
                                [Symbol.for("name")]: "ComputeNormalFormGlobal"
                              });
                          var filteredResponses = responses.filter(Test__Util$AgdaModeVscode.filteredResponse);
                          return Curry._3(Assert.deepStrictEqual, filteredResponses, [{
                                        TAG: "DisplayInfo",
                                        _0: {
                                          TAG: "NormalForm",
                                          _0: "S (S Z)",
                                          [Symbol.for("name")]: "NormalForm"
                                        },
                                        [Symbol.for("name")]: "DisplayInfo"
                                      }], undefined);
                        }));
                }));
        }));
}

describe("agda-mode.compute-normal-form[DefaultCompute]", (function () {
        run("DefaultCompute");
      }));

describe("agda-mode.compute-normal-form[IgnoreAbstract]", (function () {
        run("IgnoreAbstract");
      }));

exports.run = run;
/*  Not a pure module */
