// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Connection__URI$AgdaModeVscode = require("../../src/Connection/Connection__URI.bs.js");
var State__SwitchVersion$AgdaModeVscode = require("../../src/State/State__SwitchVersion.bs.js");

describe("State__SwitchVersion", (function () {
        describe("VersionDisplay", (function () {
                describe("formatAgdaVersion", (function () {
                        it("should format Agda version correctly", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.VersionDisplay.formatAgdaVersion("2.6.4");
                                Curry._3(Assert.strictEqual, actual, "Agda v2.6.4", undefined);
                              }));
                        it("should handle version with patch numbers", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.VersionDisplay.formatAgdaVersion("2.6.4.1");
                                Curry._3(Assert.strictEqual, actual, "Agda v2.6.4.1", undefined);
                              }));
                        it("should handle development versions", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.VersionDisplay.formatAgdaVersion("2.7.0-dev");
                                Curry._3(Assert.strictEqual, actual, "Agda v2.7.0-dev", undefined);
                              }));
                      }));
                describe("formatALSVersion", (function () {
                        it("should format ALS version correctly", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.VersionDisplay.formatALSVersion("1.2.3", "2.6.4");
                                Curry._3(Assert.strictEqual, actual, "Agda v2.6.4 Language Server v1.2.3", undefined);
                              }));
                        it("should handle different version formats", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.VersionDisplay.formatALSVersion("0.3.16", "2.6.4.1");
                                Curry._3(Assert.strictEqual, actual, "Agda v2.6.4.1 Language Server v0.3.16", undefined);
                              }));
                      }));
                describe("formatSwitchingMessage", (function () {
                        it("should format switching message correctly", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.VersionDisplay.formatSwitchingMessage("Agda v2.6.4");
                                Curry._3(Assert.strictEqual, actual, "Switching to Agda v2.6.4", undefined);
                              }));
                        it("should work with ALS versions", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.VersionDisplay.formatSwitchingMessage("Agda v2.6.4 Language Server v1.2.3");
                                Curry._3(Assert.strictEqual, actual, "Switching to Agda v2.6.4 Language Server v1.2.3", undefined);
                              }));
                      }));
                describe("formatSwitchedMessage", (function () {
                        it("should format switched message correctly", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.VersionDisplay.formatSwitchedMessage("Agda v2.6.4");
                                Curry._3(Assert.strictEqual, actual, "Switched to Agda v2.6.4", undefined);
                              }));
                        it("should work with ALS versions", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.VersionDisplay.formatSwitchedMessage("Agda v2.6.4 Language Server v1.2.3");
                                Curry._3(Assert.strictEqual, actual, "Switched to Agda v2.6.4 Language Server v1.2.3", undefined);
                              }));
                      }));
              }));
        describe("SelectionParsing", (function () {
                describe("parseSelection", (function () {
                        it("should parse open folder action", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.SelectionParsing.parseSelection("$(folder-opened)  Open download folder", undefined);
                                Curry._3(Assert.deepStrictEqual, actual, "OpenFolder", undefined);
                              }));
                        it("should parse download ALS action", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.SelectionParsing.parseSelection("$(cloud-download)  Download the latest Agda Language Server", undefined);
                                Curry._3(Assert.deepStrictEqual, actual, "DownloadLatestALS", undefined);
                              }));
                        it("should parse switch to target with detail", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.SelectionParsing.parseSelection("Agda v2.6.4", "/usr/bin/agda");
                                Curry._3(Assert.deepStrictEqual, actual, {
                                      TAG: "SwitchToTarget",
                                      _0: "/usr/bin/agda"
                                    }, undefined);
                              }));
                        it("should parse switch to target without detail", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.SelectionParsing.parseSelection("Some unknown label", undefined);
                                Curry._3(Assert.deepStrictEqual, actual, {
                                      TAG: "SwitchToTarget",
                                      _0: ""
                                    }, undefined);
                              }));
                        it("should handle ALS target selection", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.SelectionParsing.parseSelection("$(squirrel)  Agda v2.6.4 Language Server v1.2.3", "lsp://localhost:4096");
                                Curry._3(Assert.deepStrictEqual, actual, {
                                      TAG: "SwitchToTarget",
                                      _0: "lsp://localhost:4096"
                                    }, undefined);
                              }));
                      }));
              }));
        describe("ItemCreation", (function () {
                describe("createSeparatorItem", (function () {
                        it("should create separator item correctly", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.ItemCreation.createSeparatorItem("Installed");
                                Curry._3(Assert.strictEqual, actual.label, "Installed", undefined);
                                var kind = actual.kind;
                                if (kind !== undefined) {
                                  return Curry._3(Assert.deepStrictEqual, kind, -1, undefined);
                                } else {
                                  Assert.fail("Expected kind to be set to Separator");
                                  return ;
                                }
                              }));
                      }));
                describe("createFolderItem", (function () {
                        it("should create folder item correctly", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.ItemCreation.createFolderItem();
                                Curry._3(Assert.strictEqual, actual.label, "$(folder-opened)  Open download folder", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  return Curry._3(Assert.strictEqual, desc, "Where the language servers are downloaded to", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                  return ;
                                }
                              }));
                      }));
                describe("createDownloadItem", (function () {
                        it("should create download item for not downloaded version", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.ItemCreation.createDownloadItem(false, "Agda v2.6.4 Language Server v1.2.3");
                                Curry._3(Assert.strictEqual, actual.label, "$(cloud-download)  Download the latest Agda Language Server", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  Curry._3(Assert.strictEqual, desc, "", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                }
                                var detail = actual.detail;
                                if (detail !== undefined) {
                                  return Curry._3(Assert.strictEqual, detail, "Agda v2.6.4 Language Server v1.2.3", undefined);
                                } else {
                                  Assert.fail("Expected detail to be set");
                                  return ;
                                }
                              }));
                        it("should create download item for already downloaded version", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.ItemCreation.createDownloadItem(true, "Agda v2.6.4 Language Server v1.2.3");
                                Curry._3(Assert.strictEqual, actual.label, "$(cloud-download)  Download the latest Agda Language Server", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  Curry._3(Assert.strictEqual, desc, "Downloaded and installed", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                }
                                var detail = actual.detail;
                                if (detail !== undefined) {
                                  return Curry._3(Assert.strictEqual, detail, "Agda v2.6.4 Language Server v1.2.3", undefined);
                                } else {
                                  Assert.fail("Expected detail to be set");
                                  return ;
                                }
                              }));
                      }));
                describe("createAgdaItem", (function () {
                        it("should create Agda item for non-selected version", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.ItemCreation.createAgdaItem("2.6.4", "/usr/bin/agda", false, "/extension/path");
                                Curry._3(Assert.strictEqual, actual.label, "Agda v2.6.4", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  Curry._3(Assert.strictEqual, desc, "", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                }
                                var detail = actual.detail;
                                if (detail !== undefined) {
                                  Curry._3(Assert.strictEqual, detail, "/usr/bin/agda", undefined);
                                } else {
                                  Assert.fail("Expected detail to be set");
                                }
                                var match = actual.iconPath;
                                if (match !== undefined) {
                                  Assert.ok(true);
                                } else {
                                  Assert.fail("Expected iconPath to be set");
                                }
                              }));
                        it("should create Agda item for selected version", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.ItemCreation.createAgdaItem("2.6.4", "/usr/bin/agda", true, "/extension/path");
                                Curry._3(Assert.strictEqual, actual.label, "Agda v2.6.4", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  Curry._3(Assert.strictEqual, desc, "Selected", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                }
                                var detail = actual.detail;
                                if (detail !== undefined) {
                                  return Curry._3(Assert.strictEqual, detail, "/usr/bin/agda", undefined);
                                } else {
                                  Assert.fail("Expected detail to be set");
                                  return ;
                                }
                              }));
                      }));
                describe("createALSItem", (function () {
                        it("should create ALS item for TCP connection", (function () {
                                var mockUrl = {
                                  protocol: "lsp:",
                                  hostname: "localhost",
                                  port: "4096",
                                  toString: (function () {
                                      return "lsp://localhost:4096";
                                    })
                                };
                                var method = {
                                  TAG: "ViaTCP",
                                  _0: mockUrl
                                };
                                var actual = State__SwitchVersion$AgdaModeVscode.ItemCreation.createALSItem("1.2.3", "2.6.4", method, false);
                                Curry._3(Assert.strictEqual, actual.label, "$(squirrel)  Agda v2.6.4 Language Server v1.2.3", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  Curry._3(Assert.strictEqual, desc, "", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                }
                                var detail = actual.detail;
                                if (detail !== undefined) {
                                  return Curry._3(Assert.strictEqual, detail, "lsp://localhost:4096", undefined);
                                } else {
                                  Assert.fail("Expected detail to be set");
                                  return ;
                                }
                              }));
                        it("should create ALS item for pipe connection", (function () {
                                var method_1 = [];
                                var method = {
                                  TAG: "ViaPipe",
                                  _0: "/path/to/als",
                                  _1: method_1,
                                  _2: undefined
                                };
                                var actual = State__SwitchVersion$AgdaModeVscode.ItemCreation.createALSItem("1.2.3", "2.6.4", method, true);
                                Curry._3(Assert.strictEqual, actual.label, "$(squirrel)  Agda v2.6.4 Language Server v1.2.3", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  Curry._3(Assert.strictEqual, desc, "Selected", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                }
                                var detail = actual.detail;
                                if (detail !== undefined) {
                                  return Curry._3(Assert.strictEqual, detail, "/path/to/als", undefined);
                                } else {
                                  Assert.fail("Expected detail to be set");
                                  return ;
                                }
                              }));
                      }));
                describe("createErrorItem", (function () {
                        it("should create error item correctly", (function () {
                                var mockError_0 = Connection__URI$AgdaModeVscode.parse("/bad/path");
                                var mockError = {
                                  TAG: "NotAgdaOrALS",
                                  _0: mockError_0,
                                  _1: "invalid output"
                                };
                                var actual = State__SwitchVersion$AgdaModeVscode.ItemCreation.createErrorItem(mockError);
                                Curry._3(Assert.strictEqual, actual.label, "$(error)  Bad path", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  Curry._3(Assert.strictEqual, desc, "", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                }
                                var detail = actual.detail;
                                if (detail !== undefined) {
                                  Assert.ok(detail.includes("/bad/path"));
                                  Assert.ok(detail.includes("doesn't seem to be an Agda executable"));
                                } else {
                                  Assert.fail("Expected detail to be set");
                                }
                              }));
                      }));
              }));
      }));

var VersionDisplay;

var SelectionParsing;

var DownloadWorkflow;

var ItemCreation;

exports.VersionDisplay = VersionDisplay;
exports.SelectionParsing = SelectionParsing;
exports.DownloadWorkflow = DownloadWorkflow;
exports.ItemCreation = ItemCreation;
/*  Not a pure module */
