// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml = require("rescript/lib/js/caml.js");
var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Chan$AgdaModeVscode = require("../../src/Util/Chan.bs.js");
var Mock$AgdaModeVscode = require("../../src/Main/Mock.bs.js");
var State$AgdaModeVscode = require("../../src/State/State.bs.js");
var Memento$AgdaModeVscode = require("../../src/Memento.bs.js");
var State__SwitchVersion$AgdaModeVscode = require("../../src/State/State__SwitchVersion.bs.js");

function createMockEntry(endpoint, error, param) {
  return {
          endpoint: endpoint,
          timestamp: new Date(),
          error: error
        };
}

var agdaEntry = createMockEntry({
      TAG: "Agda",
      _0: "2.6.4"
    }, undefined, undefined);

var agdaUnknownEntry = createMockEntry({
      TAG: "Agda",
      _0: undefined
    }, undefined, undefined);

var alsEntry = createMockEntry({
      TAG: "ALS",
      _0: [
        "4.0.0",
        "2.6.4",
        undefined
      ]
    }, undefined, undefined);

var unknownEntry = createMockEntry("Unknown", "Permission denied", undefined);

function createMockMemento() {
  return Memento$AgdaModeVscode.make(undefined);
}

function createMockExtensionUri() {
  return Vscode.Uri.file("/test/extension");
}

var TestData = {
  createMockEntry: createMockEntry,
  agdaEntry: agdaEntry,
  agdaUnknownEntry: agdaUnknownEntry,
  alsEntry: alsEntry,
  unknownEntry: unknownEntry,
  createMockMemento: createMockMemento,
  createMockExtensionUri: createMockExtensionUri
};

describe("State__SwitchVersion", (function () {
        describe("Core", (function () {
                describe("getEndpointDisplayInfo", (function () {
                        it("should format Agda endpoint with version", (function () {
                                var match = State__SwitchVersion$AgdaModeVscode.ItemData.getEndpointDisplayInfo("agda", agdaEntry);
                                Curry._3(Assert.deepStrictEqual, match[0], "Agda v2.6.4", undefined);
                                Curry._3(Assert.deepStrictEqual, match[1], undefined, undefined);
                              }));
                        it("should format Agda endpoint without version", (function () {
                                var match = State__SwitchVersion$AgdaModeVscode.ItemData.getEndpointDisplayInfo("agda", agdaUnknownEntry);
                                Curry._3(Assert.deepStrictEqual, match[0], "Agda (version unknown)", undefined);
                                Curry._3(Assert.deepStrictEqual, match[1], undefined, undefined);
                              }));
                        it("should format ALS endpoint with versions", (function () {
                                var match = State__SwitchVersion$AgdaModeVscode.ItemData.getEndpointDisplayInfo("als", alsEntry);
                                Curry._3(Assert.deepStrictEqual, match[0], "$(squirrel)  ALS v4.0.0, Agda v2.6.4", undefined);
                                Curry._3(Assert.deepStrictEqual, match[1], undefined, undefined);
                              }));
                        it("should format error endpoint", (function () {
                                var match = State__SwitchVersion$AgdaModeVscode.ItemData.getEndpointDisplayInfo("broken-agda", unknownEntry);
                                Curry._3(Assert.deepStrictEqual, match[0], "$(error) broken-agda", undefined);
                                Curry._3(Assert.deepStrictEqual, match[1], "Error: Permission denied", undefined);
                              }));
                        it("should format unknown endpoint without error", (function () {
                                var entry = createMockEntry("Unknown", undefined, undefined);
                                var match = State__SwitchVersion$AgdaModeVscode.ItemData.getEndpointDisplayInfo("mystery", entry);
                                Curry._3(Assert.deepStrictEqual, match[0], "$(question) mystery", undefined);
                                Curry._3(Assert.deepStrictEqual, match[1], "Unknown executable", undefined);
                              }));
                      }));
                describe("shouldEndpointHaveIcon", (function () {
                        it("should return true for Agda endpoints", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.ItemData.shouldEndpointHaveIcon({
                                          TAG: "Agda",
                                          _0: "2.6.4"
                                        }), true, undefined);
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.ItemData.shouldEndpointHaveIcon({
                                          TAG: "Agda",
                                          _0: undefined
                                        }), true, undefined);
                              }));
                        it("should return false for ALS endpoints", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.ItemData.shouldEndpointHaveIcon({
                                          TAG: "ALS",
                                          _0: [
                                            "4.0.0",
                                            "2.6.4",
                                            undefined
                                          ]
                                        }), false, undefined);
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.ItemData.shouldEndpointHaveIcon({
                                          TAG: "ALS",
                                          _0: undefined
                                        }), false, undefined);
                              }));
                        it("should return false for unknown endpoints", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.ItemData.shouldEndpointHaveIcon("Unknown"), false, undefined);
                              }));
                      }));
                describe("inferEndpointType", (function () {
                        it("should recognize als.wasm as ALS endpoint", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.SwitchVersionManager.inferEndpointType("als.wasm"), {
                                      TAG: "ALS",
                                      _0: undefined
                                    }, undefined);
                              }));
                        it("should recognize als as ALS endpoint", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.SwitchVersionManager.inferEndpointType("als"), {
                                      TAG: "ALS",
                                      _0: undefined
                                    }, undefined);
                              }));
                        it("should recognize als.exe as ALS endpoint", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.SwitchVersionManager.inferEndpointType("als.exe"), {
                                      TAG: "ALS",
                                      _0: undefined
                                    }, undefined);
                              }));
                        it("should recognize agda as Agda endpoint", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.SwitchVersionManager.inferEndpointType("agda"), {
                                      TAG: "Agda",
                                      _0: undefined
                                    }, undefined);
                              }));
                        it("should recognize agda-2.6.4 as Agda endpoint", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.SwitchVersionManager.inferEndpointType("agda-2.6.4"), {
                                      TAG: "Agda",
                                      _0: undefined
                                    }, undefined);
                              }));
                        it("should recognize unknown executables", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.SwitchVersionManager.inferEndpointType("unknown"), "Unknown", undefined);
                              }));
                        it("should extract basename from full paths", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.SwitchVersionManager.inferEndpointType("/path/to/dev-als/als.wasm"), {
                                      TAG: "ALS",
                                      _0: undefined
                                    }, undefined);
                              }));
                        it("should handle uppercase extensions", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.SwitchVersionManager.inferEndpointType("ALS.WASM"), {
                                      TAG: "ALS",
                                      _0: undefined
                                    }, undefined);
                              }));
                        it("should recognize als- prefixed executables", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.SwitchVersionManager.inferEndpointType("als-server"), {
                                      TAG: "ALS",
                                      _0: undefined
                                    }, undefined);
                              }));
                      }));
              }));
        describe("QuickPick", (function () {
                var extensionUri = Vscode.Uri.file("/test/extension");
                describe("fromItemData", (function () {
                        it("should create quickpick item from endpoint data with correct properties", (function () {
                                var itemData = {
                                  TAG: "Endpoint",
                                  _0: "/usr/bin/agda",
                                  _1: agdaEntry,
                                  _2: false
                                };
                                var item = State__SwitchVersion$AgdaModeVscode.Item.fromItemData(itemData, extensionUri);
                                Curry._3(Assert.deepStrictEqual, item.label, "Agda v2.6.4", undefined);
                                Curry._3(Assert.deepStrictEqual, item.description, "", undefined);
                                Curry._3(Assert.deepStrictEqual, item.detail, "/usr/bin/agda", undefined);
                              }));
                        it("should include icon for Agda endpoints", (function () {
                                var itemData = {
                                  TAG: "Endpoint",
                                  _0: "/usr/bin/agda",
                                  _1: agdaEntry,
                                  _2: false
                                };
                                var item = State__SwitchVersion$AgdaModeVscode.Item.fromItemData(itemData, extensionUri);
                                var match = item.iconPath;
                                if (match !== undefined) {
                                  return ;
                                } else {
                                  Assert.fail("Expected iconPath for Agda endpoint");
                                  return ;
                                }
                              }));
                        it("should not include icon for ALS endpoints", (function () {
                                var itemData = {
                                  TAG: "Endpoint",
                                  _0: "/usr/bin/als",
                                  _1: alsEntry,
                                  _2: false
                                };
                                var item = State__SwitchVersion$AgdaModeVscode.Item.fromItemData(itemData, extensionUri);
                                var match = item.iconPath;
                                if (match !== undefined) {
                                  Assert.fail("Did not expect iconPath for ALS endpoint");
                                  return ;
                                }
                                
                              }));
                      }));
                describe("separator items", (function () {
                        it("should create separator with correct kind", (function () {
                                var item = State__SwitchVersion$AgdaModeVscode.Item.fromItemData({
                                      TAG: "Separator",
                                      _0: "Test Section"
                                    }, extensionUri);
                                Curry._3(Assert.deepStrictEqual, item.label, "Test Section", undefined);
                                Curry._3(Assert.deepStrictEqual, item.kind, -1, undefined);
                              }));
                      }));
                describe("no installations item", (function () {
                        it("should create placeholder item", (function () {
                                var item = State__SwitchVersion$AgdaModeVscode.Item.fromItemData("NoInstallations", extensionUri);
                                Curry._3(Assert.deepStrictEqual, item.label, "$(info) No installations found", undefined);
                                Curry._3(Assert.deepStrictEqual, item.description, "Try installing Agda or ALS first", undefined);
                                Curry._3(Assert.deepStrictEqual, item.detail, "No executable paths detected", undefined);
                              }));
                      }));
                describe("download items", (function () {
                        it("should create download item when not downloaded", (function () {
                                var item = State__SwitchVersion$AgdaModeVscode.Item.fromItemData({
                                      TAG: "DownloadAction",
                                      _0: false,
                                      _1: "ALS v1.0.0",
                                      _2: "latest"
                                    }, extensionUri);
                                Curry._3(Assert.deepStrictEqual, item.label, "$(cloud-download)  Download the latest Agda Language Server", undefined);
                                Curry._3(Assert.deepStrictEqual, item.description, "", undefined);
                                Curry._3(Assert.deepStrictEqual, item.detail, "ALS v1.0.0", undefined);
                              }));
                        it("should create download item when already downloaded", (function () {
                                var item = State__SwitchVersion$AgdaModeVscode.Item.fromItemData({
                                      TAG: "DownloadAction",
                                      _0: true,
                                      _1: "ALS v1.0.0",
                                      _2: "latest"
                                    }, extensionUri);
                                Curry._3(Assert.deepStrictEqual, item.label, "$(cloud-download)  Download the latest Agda Language Server", undefined);
                                Curry._3(Assert.deepStrictEqual, item.description, "Downloaded and installed", undefined);
                                Curry._3(Assert.deepStrictEqual, item.detail, "ALS v1.0.0", undefined);
                              }));
                      }));
              }));
        describe("View", (function () {
                it("should create quickpick with correct initial state", (function () {
                        var qp = State__SwitchVersion$AgdaModeVscode.View.make(Chan$AgdaModeVscode.make());
                        Curry._3(Assert.deepStrictEqual, qp.items.length, 0, undefined);
                        Curry._3(Assert.deepStrictEqual, qp.subscriptions.length, 0, undefined);
                      }));
                it("should update items correctly", (function () {
                        var qp = State__SwitchVersion$AgdaModeVscode.View.make(Chan$AgdaModeVscode.make());
                        var items = [State__SwitchVersion$AgdaModeVscode.Item.fromItemData("NoInstallations", Vscode.Uri.file("/test/extension"))];
                        State__SwitchVersion$AgdaModeVscode.View.updateItems(qp, items);
                        Curry._3(Assert.deepStrictEqual, qp.items.length, 1, undefined);
                        Curry._3(Assert.deepStrictEqual, Core__Option.map(qp.items[0], (function (item) {
                                    return item.label;
                                  })), "$(info) No installations found", undefined);
                      }));
              }));
        describe("Core Integration Tests", (function () {
                describe("entriesToItemData", (function () {
                        it("should return no installations item when no entries", (function () {
                                var entries = {};
                                var itemData = State__SwitchVersion$AgdaModeVscode.ItemData.entriesToItemData(entries, undefined, []);
                                Curry._3(Assert.deepStrictEqual, itemData.length, 3, undefined);
                                Curry._3(Assert.deepStrictEqual, itemData[0], "NoInstallations", undefined);
                                var match = itemData[1];
                                if (!(match !== undefined && !(typeof match !== "object" || !(match.TAG === "Separator" && match._0 === "Misc")))) {
                                  Assert.fail("Expected Misc separator");
                                }
                                var match$1 = itemData[2];
                                if (match$1 !== undefined && typeof match$1 !== "object") {
                                  if (match$1 === "DeleteDownloads") {
                                    return ;
                                  }
                                  Assert.fail("Expected DeleteDownloads item");
                                  return ;
                                } else {
                                  Assert.fail("Expected DeleteDownloads item");
                                  return ;
                                }
                              }));
                        it("should create items with separator when entries exist", (function () {
                                var entries = {};
                                entries["/usr/bin/agda"] = agdaEntry;
                                entries["/usr/bin/als"] = alsEntry;
                                var itemData = State__SwitchVersion$AgdaModeVscode.ItemData.entriesToItemData(entries, undefined, []);
                                Curry._3(Assert.deepStrictEqual, itemData.length, 5, undefined);
                                var match = itemData[0];
                                if (!(match !== undefined && !(typeof match !== "object" || !(match.TAG === "Separator" && match._0 === "Installed")))) {
                                  Assert.fail("Expected Installed separator");
                                }
                                var match$1 = itemData[3];
                                if (!(match$1 !== undefined && !(typeof match$1 !== "object" || !(match$1.TAG === "Separator" && match$1._0 === "Misc")))) {
                                  Assert.fail("Expected Misc separator");
                                }
                                var match$2 = itemData[4];
                                if (match$2 !== undefined && typeof match$2 !== "object") {
                                  if (match$2 === "DeleteDownloads") {
                                    return ;
                                  }
                                  Assert.fail("Expected DeleteDownloads item");
                                  return ;
                                } else {
                                  Assert.fail("Expected DeleteDownloads item");
                                  return ;
                                }
                              }));
                        it("should include download section when download info is provided", (function () {
                                var entries = {};
                                entries["/usr/bin/agda"] = agdaEntry;
                                var itemData = State__SwitchVersion$AgdaModeVscode.ItemData.entriesToItemData(entries, undefined, [[
                                        false,
                                        "ALS v1.0.0",
                                        "latest"
                                      ]]);
                                Curry._3(Assert.deepStrictEqual, itemData.length, 6, undefined);
                                var downloadSeparator = itemData.find(function (data) {
                                      if (typeof data !== "object" || !(data.TAG === "Separator" && data._0 === "Download")) {
                                        return false;
                                      } else {
                                        return true;
                                      }
                                    });
                                var downloadAction = itemData.find(function (data) {
                                      if (typeof data !== "object" || !(data.TAG === "DownloadAction" && !(data._0 || !(data._1 === "ALS v1.0.0" && data._2 === "latest")))) {
                                        return false;
                                      } else {
                                        return true;
                                      }
                                    });
                                Assert.ok(Core__Option.isSome(downloadSeparator));
                                Assert.ok(Core__Option.isSome(downloadAction));
                              }));
                      }));
              }));
        describe("Events", (function () {
                var createTestState = function () {
                  var channels_inputMethod = Chan$AgdaModeVscode.make();
                  var channels_responseHandled = Chan$AgdaModeVscode.make();
                  var channels_commandHandled = Chan$AgdaModeVscode.make();
                  var channels_log = Chan$AgdaModeVscode.make();
                  var channels = {
                    inputMethod: channels_inputMethod,
                    responseHandled: channels_responseHandled,
                    commandHandled: channels_commandHandled,
                    log: channels_log
                  };
                  var mockEditor = {
        document: { fileName: "test.agda" }
      };
                  var mockUri = Vscode.Uri.file("/test/path");
                  return State$AgdaModeVscode.make(Mock$AgdaModeVscode.Platform.makeWithAgda(), channels, mockUri, mockUri, Memento$AgdaModeVscode.make(undefined), mockEditor, undefined);
                };
                it("should have an endpoint marked as selected onActivation", (async function () {
                        var state = createTestState();
                        var loggedEvents = [];
                        Chan$AgdaModeVscode.on(state.channels.log, (function (logEvent) {
                                if (logEvent.TAG !== "SwitchVersionUI") {
                                  return ;
                                }
                                var endpoints = logEvent._0;
                                if (typeof endpoints !== "object") {
                                  return ;
                                }
                                if (endpoints.TAG !== "UpdatedEndpoints") {
                                  return ;
                                }
                                loggedEvents.push(endpoints._0);
                              }));
                        await Memento$AgdaModeVscode.Module.PickedConnection.set(state.memento, undefined);
                        var discoveredEndpoints = {};
                        discoveredEndpoints["/usr/bin/agda"] = {
                          TAG: "Agda",
                          _0: "2.6.4"
                        };
                        await Memento$AgdaModeVscode.Module.Endpoints.syncWithPaths(state.memento, discoveredEndpoints);
                        var mockConnection = { TAG: "Agda", _0: null, _1: "/usr/bin/agda", _2: "2.6.4" };
                        state.connection = mockConnection;
                        await State__SwitchVersion$AgdaModeVscode.Handler.onActivate(state, Mock$AgdaModeVscode.Platform.makeWithAgda());
                        var allEndpointsFromLogs = loggedEvents.flat();
                        var anyEndpointSelected = allEndpointsFromLogs.some(function (param) {
                              return param[3];
                            });
                        Assert.ok(anyEndpointSelected);
                      }));
                it("should prefer memento selection over active connection inference", (async function () {
                        var state = createTestState();
                        var loggedEvents = [];
                        Chan$AgdaModeVscode.on(state.channels.log, (function (logEvent) {
                                if (logEvent.TAG !== "SwitchVersionUI") {
                                  return ;
                                }
                                var endpoints = logEvent._0;
                                if (typeof endpoints !== "object") {
                                  return ;
                                }
                                if (endpoints.TAG !== "UpdatedEndpoints") {
                                  return ;
                                }
                                loggedEvents.push(endpoints._0);
                              }));
                        var discoveredEndpoints = {};
                        discoveredEndpoints["/usr/bin/agda"] = {
                          TAG: "Agda",
                          _0: "2.6.4"
                        };
                        discoveredEndpoints["/opt/homebrew/bin/agda"] = {
                          TAG: "Agda",
                          _0: "2.6.3"
                        };
                        await Memento$AgdaModeVscode.Module.Endpoints.syncWithPaths(state.memento, discoveredEndpoints);
                        await Memento$AgdaModeVscode.Module.PickedConnection.set(state.memento, "/usr/bin/agda");
                        var mockConnection = { TAG: "Agda", _0: null, _1: "/opt/homebrew/bin/agda", _2: "2.6.3" };
                        state.connection = mockConnection;
                        await State__SwitchVersion$AgdaModeVscode.Handler.onActivate(state, Mock$AgdaModeVscode.Platform.makeWithAgda());
                        var allEndpointsFromLogs = loggedEvents.flat();
                        var selectedEndpoint = allEndpointsFromLogs.find(function (param) {
                              return param[3];
                            });
                        if (selectedEndpoint !== undefined) {
                          Curry._3(Assert.deepStrictEqual, selectedEndpoint[0], "/usr/bin/agda", undefined);
                        } else {
                          Assert.fail("Expected one endpoint to be marked as selected");
                        }
                        var selectedCount = allEndpointsFromLogs.filter(function (param) {
                              return param[3];
                            }).length;
                        return Curry._3(Assert.deepStrictEqual, selectedCount, 1, undefined);
                      }));
                it("should handle download workflow correctly", (async function () {
                        var state = createTestState();
                        var loggedEvents = [];
                        Chan$AgdaModeVscode.on(state.channels.log, (function (logEvent) {
                                if (logEvent.TAG !== "SwitchVersionUI") {
                                  return ;
                                }
                                var endpoints = logEvent._0;
                                if (typeof endpoints !== "object") {
                                  return ;
                                }
                                if (endpoints.TAG !== "UpdatedEndpoints") {
                                  return ;
                                }
                                loggedEvents.push(endpoints._0);
                              }));
                        var discoveredEndpoints = {};
                        discoveredEndpoints["/usr/bin/agda"] = {
                          TAG: "Agda",
                          _0: "2.6.4"
                        };
                        await Memento$AgdaModeVscode.Module.Endpoints.syncWithPaths(state.memento, discoveredEndpoints);
                        await Memento$AgdaModeVscode.Module.PickedConnection.set(state.memento, undefined);
                        var mockConnection = { TAG: "Agda", _0: null, _1: "/usr/bin/agda", _2: "2.6.4" };
                        state.connection = mockConnection;
                        await State__SwitchVersion$AgdaModeVscode.Handler.onActivate(state, Mock$AgdaModeVscode.Platform.makeWithAgda());
                        var allEndpointsFromLogs = loggedEvents.flat();
                        var selectedEndpoints = allEndpointsFromLogs.filter(function (param) {
                              return param[3];
                            });
                        Curry._3(Assert.deepStrictEqual, selectedEndpoints.length, 1, undefined);
                        var match = selectedEndpoints[0];
                        if (match !== undefined) {
                          Curry._3(Assert.deepStrictEqual, match[0], "/usr/bin/agda", undefined);
                        } else {
                          Assert.fail("Expected one endpoint to be selected");
                        }
                        Assert.ok(allEndpointsFromLogs.length > 0);
                        var hasErrors = allEndpointsFromLogs.some(function (param) {
                              return param[2] !== undefined;
                            });
                        Assert.ok(!hasErrors);
                      }));
                it("should mark only one endpoint when multiple exist", (async function () {
                        var state = createTestState();
                        var loggedEvents = [];
                        Chan$AgdaModeVscode.on(state.channels.log, (function (logEvent) {
                                if (logEvent.TAG !== "SwitchVersionUI") {
                                  return ;
                                }
                                var endpoints = logEvent._0;
                                if (typeof endpoints !== "object") {
                                  return ;
                                }
                                if (endpoints.TAG !== "UpdatedEndpoints") {
                                  return ;
                                }
                                loggedEvents.push(endpoints._0);
                              }));
                        var discoveredEndpoints = {};
                        discoveredEndpoints["/usr/bin/agda"] = {
                          TAG: "Agda",
                          _0: "2.6.4"
                        };
                        discoveredEndpoints["/opt/homebrew/bin/agda"] = {
                          TAG: "Agda",
                          _0: "2.6.3"
                        };
                        discoveredEndpoints["/usr/local/bin/agda"] = {
                          TAG: "Agda",
                          _0: "2.6.2"
                        };
                        discoveredEndpoints["/usr/bin/als"] = {
                          TAG: "ALS",
                          _0: [
                            "4.0.0",
                            "2.6.4",
                            undefined
                          ]
                        };
                        await Memento$AgdaModeVscode.Module.Endpoints.syncWithPaths(state.memento, discoveredEndpoints);
                        await Memento$AgdaModeVscode.Module.PickedConnection.set(state.memento, "/opt/homebrew/bin/agda");
                        var mockConnection = { TAG: "Agda", _0: null, _1: "/usr/bin/agda", _2: "2.6.4" };
                        state.connection = mockConnection;
                        await State__SwitchVersion$AgdaModeVscode.Handler.onActivate(state, Mock$AgdaModeVscode.Platform.makeWithAgda());
                        var allEndpointsFromLogs = loggedEvents.flat();
                        var selectedEndpoints = allEndpointsFromLogs.filter(function (param) {
                              return param[3];
                            });
                        Curry._3(Assert.deepStrictEqual, selectedEndpoints.length, 1, undefined);
                        var match = selectedEndpoints[0];
                        if (match !== undefined) {
                          Curry._3(Assert.deepStrictEqual, match[0], "/opt/homebrew/bin/agda", undefined);
                        } else {
                          Assert.fail("Expected exactly one endpoint to be selected");
                        }
                        var unselectedEndpoints = allEndpointsFromLogs.filter(function (param) {
                              return !param[3];
                            });
                        Curry._3(Assert.deepStrictEqual, unselectedEndpoints.length, 3, undefined);
                        var unselectedPaths = unselectedEndpoints.map(function (param) {
                                return param[0];
                              }).toSorted(Caml.string_compare);
                        var expectedUnselectedPaths = [
                            "/usr/bin/agda",
                            "/usr/bin/als",
                            "/usr/local/bin/agda"
                          ].toSorted(Caml.string_compare);
                        Curry._3(Assert.deepStrictEqual, unselectedPaths, expectedUnselectedPaths, undefined);
                        return Curry._3(Assert.deepStrictEqual, allEndpointsFromLogs.length, 4, undefined);
                      }));
              }));
        describe("ItemCreation", (function () {
                describe("fromItemData - Separator", (function () {
                        it("should create separator item correctly", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.Item.fromItemData({
                                      TAG: "Separator",
                                      _0: "Installed"
                                    }, Vscode.Uri.file("/extension/path"));
                                Curry._3(Assert.strictEqual, actual.label, "Installed", undefined);
                                var kind = actual.kind;
                                if (kind !== undefined) {
                                  return Curry._3(Assert.deepStrictEqual, kind, -1, undefined);
                                } else {
                                  Assert.fail("Expected kind to be set to Separator");
                                  return ;
                                }
                              }));
                      }));
                describe("fromItemData - DownloadAction", (function () {
                        it("should create download item for not downloaded version", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.Item.fromItemData({
                                      TAG: "DownloadAction",
                                      _0: false,
                                      _1: "Agda v2.6.4 Language Server v1.2.3",
                                      _2: "latest"
                                    }, Vscode.Uri.file("/extension/path"));
                                Curry._3(Assert.strictEqual, actual.label, "$(cloud-download)  Download the latest Agda Language Server", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  Curry._3(Assert.strictEqual, desc, "", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                }
                                var detail = actual.detail;
                                if (detail !== undefined) {
                                  return Curry._3(Assert.strictEqual, detail, "Agda v2.6.4 Language Server v1.2.3", undefined);
                                } else {
                                  Assert.fail("Expected detail to be set");
                                  return ;
                                }
                              }));
                        it("should create download item for already downloaded version", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.Item.fromItemData({
                                      TAG: "DownloadAction",
                                      _0: true,
                                      _1: "Agda v2.6.4 Language Server v1.2.3",
                                      _2: "latest"
                                    }, Vscode.Uri.file("/extension/path"));
                                Curry._3(Assert.strictEqual, actual.label, "$(cloud-download)  Download the latest Agda Language Server", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  Curry._3(Assert.strictEqual, desc, "Downloaded and installed", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                }
                                var detail = actual.detail;
                                if (detail !== undefined) {
                                  return Curry._3(Assert.strictEqual, detail, "Agda v2.6.4 Language Server v1.2.3", undefined);
                                } else {
                                  Assert.fail("Expected detail to be set");
                                  return ;
                                }
                              }));
                      }));
                describe("fromItemData - NoInstallations", (function () {
                        it("should create no installations item correctly", (function () {
                                var actual = State__SwitchVersion$AgdaModeVscode.Item.fromItemData("NoInstallations", Vscode.Uri.file("/extension/path"));
                                Curry._3(Assert.strictEqual, actual.label, "$(info) No installations found", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  Curry._3(Assert.strictEqual, desc, "Try installing Agda or ALS first", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                }
                                var detail = actual.detail;
                                if (detail !== undefined) {
                                  return Curry._3(Assert.strictEqual, detail, "No executable paths detected", undefined);
                                } else {
                                  Assert.fail("Expected detail to be set");
                                  return ;
                                }
                              }));
                      }));
                describe("fromItemData - Endpoint (Agda)", (function () {
                        it("should create Agda item for non-selected version", (function () {
                                var entry = createMockEntry({
                                      TAG: "Agda",
                                      _0: "2.6.4"
                                    }, undefined, undefined);
                                var itemData = {
                                  TAG: "Endpoint",
                                  _0: "/usr/bin/agda",
                                  _1: entry,
                                  _2: false
                                };
                                var actual = State__SwitchVersion$AgdaModeVscode.Item.fromItemData(itemData, Vscode.Uri.file("/extension/path"));
                                Curry._3(Assert.strictEqual, actual.label, "Agda v2.6.4", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  Curry._3(Assert.strictEqual, desc, "", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                }
                                var detail = actual.detail;
                                if (detail !== undefined) {
                                  Curry._3(Assert.strictEqual, detail, "/usr/bin/agda", undefined);
                                } else {
                                  Assert.fail("Expected detail to be set");
                                }
                                var match = actual.iconPath;
                                if (match !== undefined) {
                                  Assert.ok(true);
                                } else {
                                  Assert.fail("Expected iconPath to be set for Agda endpoint");
                                }
                              }));
                        it("should create Agda item for selected version", (function () {
                                var entry = createMockEntry({
                                      TAG: "Agda",
                                      _0: "2.6.4"
                                    }, undefined, undefined);
                                var itemData = {
                                  TAG: "Endpoint",
                                  _0: "/usr/bin/agda",
                                  _1: entry,
                                  _2: true
                                };
                                var actual = State__SwitchVersion$AgdaModeVscode.Item.fromItemData(itemData, Vscode.Uri.file("/extension/path"));
                                Curry._3(Assert.strictEqual, actual.label, "Agda v2.6.4", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  Curry._3(Assert.strictEqual, desc, "Selected", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                }
                                var detail = actual.detail;
                                if (detail !== undefined) {
                                  return Curry._3(Assert.strictEqual, detail, "/usr/bin/agda", undefined);
                                } else {
                                  Assert.fail("Expected detail to be set");
                                  return ;
                                }
                              }));
                        it("should create Agda item with unknown version", (function () {
                                var entry = createMockEntry({
                                      TAG: "Agda",
                                      _0: undefined
                                    }, undefined, undefined);
                                var itemData = {
                                  TAG: "Endpoint",
                                  _0: "/usr/bin/agda",
                                  _1: entry,
                                  _2: false
                                };
                                var actual = State__SwitchVersion$AgdaModeVscode.Item.fromItemData(itemData, Vscode.Uri.file("/extension/path"));
                                Curry._3(Assert.strictEqual, actual.label, "Agda (version unknown)", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  return Curry._3(Assert.strictEqual, desc, "", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                  return ;
                                }
                              }));
                      }));
                describe("fromItemData - Endpoint (ALS)", (function () {
                        it("should create ALS item for non-selected version", (function () {
                                var entry = createMockEntry({
                                      TAG: "ALS",
                                      _0: [
                                        "1.2.3",
                                        "2.6.4",
                                        undefined
                                      ]
                                    }, undefined, undefined);
                                var itemData = {
                                  TAG: "Endpoint",
                                  _0: "/usr/bin/als",
                                  _1: entry,
                                  _2: false
                                };
                                var actual = State__SwitchVersion$AgdaModeVscode.Item.fromItemData(itemData, Vscode.Uri.file("/extension/path"));
                                Curry._3(Assert.strictEqual, actual.label, "$(squirrel)  ALS v1.2.3, Agda v2.6.4", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  Curry._3(Assert.strictEqual, desc, "", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                }
                                var detail = actual.detail;
                                if (detail !== undefined) {
                                  Curry._3(Assert.strictEqual, detail, "/usr/bin/als", undefined);
                                } else {
                                  Assert.fail("Expected detail to be set");
                                }
                                var match = actual.iconPath;
                                if (match !== undefined) {
                                  Assert.fail("Did not expect iconPath for ALS endpoint");
                                } else {
                                  Assert.ok(true);
                                }
                              }));
                        it("should create ALS item for selected version", (function () {
                                var entry = createMockEntry({
                                      TAG: "ALS",
                                      _0: [
                                        "1.2.3",
                                        "2.6.4",
                                        undefined
                                      ]
                                    }, undefined, undefined);
                                var itemData = {
                                  TAG: "Endpoint",
                                  _0: "/usr/bin/als",
                                  _1: entry,
                                  _2: true
                                };
                                var actual = State__SwitchVersion$AgdaModeVscode.Item.fromItemData(itemData, Vscode.Uri.file("/extension/path"));
                                Curry._3(Assert.strictEqual, actual.label, "$(squirrel)  ALS v1.2.3, Agda v2.6.4", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  return Curry._3(Assert.strictEqual, desc, "Selected", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                  return ;
                                }
                              }));
                        it("should create ALS item with unknown version", (function () {
                                var entry = createMockEntry({
                                      TAG: "ALS",
                                      _0: undefined
                                    }, undefined, undefined);
                                var itemData = {
                                  TAG: "Endpoint",
                                  _0: "/usr/bin/als",
                                  _1: entry,
                                  _2: false
                                };
                                var actual = State__SwitchVersion$AgdaModeVscode.Item.fromItemData(itemData, Vscode.Uri.file("/extension/path"));
                                Curry._3(Assert.strictEqual, actual.label, "$(squirrel)  ALS v(version unknown)", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  return Curry._3(Assert.strictEqual, desc, "", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                  return ;
                                }
                              }));
                      }));
                describe("fromItemData - Endpoint (Error)", (function () {
                        it("should create error item correctly", (function () {
                                var entry = createMockEntry("Unknown", "Permission denied", undefined);
                                var itemData = {
                                  TAG: "Endpoint",
                                  _0: "/broken/path",
                                  _1: entry,
                                  _2: false
                                };
                                var actual = State__SwitchVersion$AgdaModeVscode.Item.fromItemData(itemData, Vscode.Uri.file("/extension/path"));
                                Curry._3(Assert.strictEqual, actual.label, "$(error) path", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  Curry._3(Assert.strictEqual, desc, "Error: Permission denied", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                }
                                var detail = actual.detail;
                                if (detail !== undefined) {
                                  return Curry._3(Assert.strictEqual, detail, "/broken/path", undefined);
                                } else {
                                  Assert.fail("Expected detail to be set");
                                  return ;
                                }
                              }));
                        it("should create unknown item correctly", (function () {
                                var entry = createMockEntry("Unknown", undefined, undefined);
                                var itemData = {
                                  TAG: "Endpoint",
                                  _0: "/mystery/path",
                                  _1: entry,
                                  _2: false
                                };
                                var actual = State__SwitchVersion$AgdaModeVscode.Item.fromItemData(itemData, Vscode.Uri.file("/extension/path"));
                                Curry._3(Assert.strictEqual, actual.label, "$(question) path", undefined);
                                var desc = actual.description;
                                if (desc !== undefined) {
                                  return Curry._3(Assert.strictEqual, desc, "Unknown executable", undefined);
                                } else {
                                  Assert.fail("Expected description to be set");
                                  return ;
                                }
                              }));
                      }));
                describe("shouldEndpointHaveIcon", (function () {
                        it("should return true for Agda endpoints", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.ItemData.shouldEndpointHaveIcon({
                                          TAG: "Agda",
                                          _0: "2.6.4"
                                        }), true, undefined);
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.ItemData.shouldEndpointHaveIcon({
                                          TAG: "Agda",
                                          _0: undefined
                                        }), true, undefined);
                              }));
                        it("should return false for ALS endpoints", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.ItemData.shouldEndpointHaveIcon({
                                          TAG: "ALS",
                                          _0: [
                                            "4.0.0",
                                            "2.6.4",
                                            undefined
                                          ]
                                        }), false, undefined);
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.ItemData.shouldEndpointHaveIcon({
                                          TAG: "ALS",
                                          _0: undefined
                                        }), false, undefined);
                              }));
                        it("should return false for unknown endpoints", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion$AgdaModeVscode.ItemData.shouldEndpointHaveIcon("Unknown"), false, undefined);
                              }));
                      }));
              }));
        describe("Selection Logic", (function () {
                describe("Selection Parsing (inline logic)", (function () {
                        it("should identify download ALS action by label", (function () {
                                Curry._3(Assert.strictEqual, State__SwitchVersion$AgdaModeVscode.Constants.downloadLatestALS, "$(cloud-download)  Download the latest Agda Language Server", undefined);
                              }));
                        it("should verify other UI constants", (function () {
                                Curry._3(Assert.strictEqual, State__SwitchVersion$AgdaModeVscode.Constants.agdaVersionPrefix, "Agda v", undefined);
                                Curry._3(Assert.strictEqual, State__SwitchVersion$AgdaModeVscode.Constants.alsWithSquirrel, "$(squirrel)  ALS v", undefined);
                                Curry._3(Assert.strictEqual, State__SwitchVersion$AgdaModeVscode.Constants.downloadedAndInstalled, "Downloaded and installed", undefined);
                              }));
                      }));
              }));
      }));

exports.TestData = TestData;
/* agdaEntry Not a pure module */
