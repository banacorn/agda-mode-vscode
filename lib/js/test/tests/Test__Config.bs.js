// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Config$AgdaModeVscode = require("../../src/Config.bs.js");
var Connection__URI$AgdaModeVscode = require("../../src/Connection/Connection__URI.bs.js");

describe("Config", (function () {
        describe("Connection", (function () {
                describe("Paths", (function () {
                        it("getAgdaPaths . setAgdaPaths = id", (async function () {
                                var expected = [];
                                await Config$AgdaModeVscode.Connection.setAgdaPaths(expected);
                                var actual = Config$AgdaModeVscode.Connection.getAgdaPaths();
                                Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                                var expected$1 = [
                                    "some/path",
                                    "some/other/path"
                                  ].map(Connection__URI$AgdaModeVscode.parse);
                                await Config$AgdaModeVscode.Connection.setAgdaPaths(expected$1);
                                var actual$1 = Config$AgdaModeVscode.Connection.getAgdaPaths();
                                return Curry._3(Assert.deepStrictEqual, actual$1, expected$1, undefined);
                              }));
                        it("`setAgdaPaths` should remove previous paths", (async function () {
                                await Config$AgdaModeVscode.Connection.setAgdaPaths(["some/path"].map(Connection__URI$AgdaModeVscode.parse));
                                var expected = ["some/other/path"].map(Connection__URI$AgdaModeVscode.parse);
                                await Config$AgdaModeVscode.Connection.setAgdaPaths(expected);
                                var actual = Config$AgdaModeVscode.Connection.getAgdaPaths();
                                return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                              }));
                        it("`addAgdaPaths` should be idempotent", (async function () {
                                var expected = ["some/path"].map(Connection__URI$AgdaModeVscode.parse);
                                await Config$AgdaModeVscode.Connection.setAgdaPaths(expected);
                                await Config$AgdaModeVscode.Connection.setAgdaPaths(expected);
                                var actual = Config$AgdaModeVscode.Connection.getAgdaPaths();
                                return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                              }));
                      }));
              }));
      }));

/*  Not a pure module */
