// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Chan$AgdaModeVscode = require("../../src/Util/Chan.bs.js");
var Config$AgdaModeVscode = require("../../src/Config.bs.js");

describe("Config", (function () {
        describe("Connection", (function () {
                describe("Paths", (function () {
                        it("getAgdaPaths . setAgdaPaths = id", (async function () {
                                var expected = [];
                                await Config$AgdaModeVscode.Connection.setAgdaPaths(Chan$AgdaModeVscode.make(), expected);
                                var actual = Config$AgdaModeVscode.Connection.getAgdaPaths();
                                Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                                var expected$1 = [
                                  "some/path",
                                  "some/other/path"
                                ];
                                await Config$AgdaModeVscode.Connection.setAgdaPaths(Chan$AgdaModeVscode.make(), expected$1);
                                var actual$1 = Config$AgdaModeVscode.Connection.getAgdaPaths();
                                return Curry._3(Assert.deepStrictEqual, actual$1, expected$1, undefined);
                              }));
                        it("`setAgdaPaths` should remove previous paths", (async function () {
                                await Config$AgdaModeVscode.Connection.setAgdaPaths(Chan$AgdaModeVscode.make(), ["some/path"]);
                                var expected = ["some/other/path"];
                                await Config$AgdaModeVscode.Connection.setAgdaPaths(Chan$AgdaModeVscode.make(), expected);
                                var actual = Config$AgdaModeVscode.Connection.getAgdaPaths();
                                return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                              }));
                        it("`addAgdaPaths` should be idempotent", (async function () {
                                var expected = ["some/path"];
                                await Config$AgdaModeVscode.Connection.setAgdaPaths(Chan$AgdaModeVscode.make(), expected);
                                await Config$AgdaModeVscode.Connection.setAgdaPaths(Chan$AgdaModeVscode.make(), expected);
                                var actual = Config$AgdaModeVscode.Connection.getAgdaPaths();
                                return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                              }));
                        it("`parseAgdaPaths` should be able to handle corrupted data (Issue #233)", (async function () {
                                Curry._3(Assert.deepStrictEqual, Config$AgdaModeVscode.Connection.parseAgdaPaths(null), [], undefined);
                                Curry._3(Assert.deepStrictEqual, Config$AgdaModeVscode.Connection.parseAgdaPaths([]), [], undefined);
                                Curry._3(Assert.deepStrictEqual, Config$AgdaModeVscode.Connection.parseAgdaPaths([
                                          "/Users/banacorn/.local/bin/agda",
                                          "/Users/banacorn/Library/Application Support/Code/User/globalStorage/banacorn.agda-mode/latest-als/als"
                                        ]), [
                                      "/Users/banacorn/Library/Application Support/Code/User/globalStorage/banacorn.agda-mode/latest-als/als",
                                      "/Users/banacorn/.local/bin/agda"
                                    ], undefined);
                                return Curry._3(Assert.deepStrictEqual, Config$AgdaModeVscode.Connection.parseAgdaPaths(Object.fromEntries([[
                                                      "enabled",
                                                      true
                                                    ]])), [], undefined);
                              }));
                      }));
              }));
        describe("DevMode", (function () {
                describe("defaultValue", (function () {
                        it("should be false", (function () {
                                Curry._3(Assert.strictEqual, Config$AgdaModeVscode.DevMode.defaultValue, false, undefined);
                              }));
                      }));
                describe("parseFromConfig", (function () {
                        it("should return default value for None", (function () {
                                var actual = Config$AgdaModeVscode.DevMode.parseFromConfig(undefined);
                                Curry._3(Assert.strictEqual, actual, Config$AgdaModeVscode.DevMode.defaultValue, undefined);
                              }));
                        it("should parse true correctly", (function () {
                                var actual = Config$AgdaModeVscode.DevMode.parseFromConfig(true);
                                Curry._3(Assert.strictEqual, actual, true, undefined);
                              }));
                        it("should parse false correctly", (function () {
                                var actual = Config$AgdaModeVscode.DevMode.parseFromConfig(false);
                                Curry._3(Assert.strictEqual, actual, false, undefined);
                              }));
                        it("should handle invalid values by returning default", (function () {
                                var actual = Config$AgdaModeVscode.DevMode.parseFromConfig("invalid");
                                Curry._3(Assert.strictEqual, actual, Config$AgdaModeVscode.DevMode.defaultValue, undefined);
                              }));
                        it("should handle null by returning default", (function () {
                                var actual = Config$AgdaModeVscode.DevMode.parseFromConfig(null);
                                Curry._3(Assert.strictEqual, actual, Config$AgdaModeVscode.DevMode.defaultValue, undefined);
                              }));
                        it("should handle number by returning default", (function () {
                                var actual = Config$AgdaModeVscode.DevMode.parseFromConfig(42.0);
                                Curry._3(Assert.strictEqual, actual, Config$AgdaModeVscode.DevMode.defaultValue, undefined);
                              }));
                        it("should handle array by returning default", (function () {
                                var actual = Config$AgdaModeVscode.DevMode.parseFromConfig([]);
                                Curry._3(Assert.strictEqual, actual, Config$AgdaModeVscode.DevMode.defaultValue, undefined);
                              }));
                      }));
              }));
      }));

/*  Not a pure module */
