// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var FastCheck = require("fast-check");
var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");
var TokenChange$AgdaModeVscode = require("../../src/Tokens/TokenChange.bs.js");
var TokenIntervals$AgdaModeVscode = require("../../src/Tokens/TokenIntervals.bs.js");

describe("TokenIntervals", (function () {
        describe("TokenIntervals.deltaToString", (function () {
                it("should format positive delta", (function () {
                        var result = TokenIntervals$AgdaModeVscode.deltaToString(5);
                        Curry._3(Assert.deepStrictEqual, result, " +5 ", undefined);
                      }));
                it("should format negative delta", (function () {
                        var result = TokenIntervals$AgdaModeVscode.deltaToString(-3);
                        Curry._3(Assert.deepStrictEqual, result, " -3 ", undefined);
                      }));
                it("should format zero delta", (function () {
                        var result = TokenIntervals$AgdaModeVscode.deltaToString(0);
                        Curry._3(Assert.deepStrictEqual, result, " +0 ", undefined);
                      }));
              }));
        describe("TokenIntervals.toString", (function () {
                it("should format EOF", (function () {
                        var result = TokenIntervals$AgdaModeVscode.toString("EOF");
                        Curry._3(Assert.deepStrictEqual, result, "EOF", undefined);
                      }));
                it("should format single replacement with different start and end", (function () {
                        var result = TokenIntervals$AgdaModeVscode.toString({
                              TAG: "Replace",
                              _0: 10,
                              _1: 15,
                              _2: 3,
                              _3: "EOF"
                            });
                        Curry._3(Assert.deepStrictEqual, result, "10┣━━┫15 +3 ", undefined);
                      }));
                it("should format single replacement with same start and end", (function () {
                        var result = TokenIntervals$AgdaModeVscode.toString({
                              TAG: "Replace",
                              _0: 10,
                              _1: 10,
                              _2: 5,
                              _3: "EOF"
                            });
                        Curry._3(Assert.deepStrictEqual, result, "10┃10 +5 ", undefined);
                      }));
                it("should format multiple replacements", (function () {
                        var result = TokenIntervals$AgdaModeVscode.toString({
                              TAG: "Replace",
                              _0: 5,
                              _1: 8,
                              _2: 2,
                              _3: {
                                TAG: "Replace",
                                _0: 15,
                                _1: 20,
                                _2: -1,
                                _3: "EOF"
                              }
                            });
                        Curry._3(Assert.deepStrictEqual, result, "5┣━━┫8 +2 15┣━━┫20 -1 ", undefined);
                      }));
                it("should format mixed point and range replacements", (function () {
                        var result = TokenIntervals$AgdaModeVscode.toString({
                              TAG: "Replace",
                              _0: 10,
                              _1: 10,
                              _2: 3,
                              _3: {
                                TAG: "Replace",
                                _0: 20,
                                _1: 25,
                                _2: -2,
                                _3: "EOF"
                              }
                            });
                        Curry._3(Assert.deepStrictEqual, result, "10┃10 +3 20┣━━┫25 -2 ", undefined);
                      }));
              }));
        describe("TokenIntervals.empty", (function () {
                it("should return EOF", (function () {
                        Curry._3(Assert.deepStrictEqual, TokenIntervals$AgdaModeVscode.empty, "EOF", undefined);
                      }));
              }));
        describe("TokenIntervals.hasError", (function () {
                it("should return None for EOF", (function () {
                        var result = TokenIntervals$AgdaModeVscode.hasError("EOF");
                        Curry._3(Assert.deepStrictEqual, result, undefined, undefined);
                      }));
                it("should return None for valid single interval", (function () {
                        var result = TokenIntervals$AgdaModeVscode.hasError({
                              TAG: "Replace",
                              _0: 10,
                              _1: 15,
                              _2: 5,
                              _3: "EOF"
                            });
                        Curry._3(Assert.deepStrictEqual, result, undefined, undefined);
                      }));
                it("should return None for valid multiple intervals", (function () {
                        var result = TokenIntervals$AgdaModeVscode.hasError({
                              TAG: "Replace",
                              _0: 5,
                              _1: 8,
                              _2: 3,
                              _3: {
                                TAG: "Replace",
                                _0: 15,
                                _1: 20,
                                _2: 6,
                                _3: "EOF"
                              }
                            });
                        Curry._3(Assert.deepStrictEqual, result, undefined, undefined);
                      }));
                it("should return Overlapping for overlapping intervals", (function () {
                        var result = TokenIntervals$AgdaModeVscode.hasError({
                              TAG: "Replace",
                              _0: 10,
                              _1: 15,
                              _2: 2,
                              _3: {
                                TAG: "Replace",
                                _0: 12,
                                _1: 18,
                                _2: 3,
                                _3: "EOF"
                              }
                            });
                        Curry._3(Assert.deepStrictEqual, result, "Overlapping", undefined);
                      }));
                it("should return ReversedOrder for reversed order", (function () {
                        var result = TokenIntervals$AgdaModeVscode.hasError({
                              TAG: "Replace",
                              _0: 15,
                              _1: 10,
                              _2: 2,
                              _3: "EOF"
                            });
                        Curry._3(Assert.deepStrictEqual, result, "ReversedOrder", undefined);
                      }));
                it("should return NegativeInsertion for negative insertion", (function () {
                        var result = TokenIntervals$AgdaModeVscode.hasError({
                              TAG: "Replace",
                              _0: 10,
                              _1: 20,
                              _2: -15,
                              _3: "EOF"
                            });
                        Curry._3(Assert.deepStrictEqual, result, "NegativeInsertion", undefined);
                      }));
                it("should return Empty for empty interval with no insertion", (function () {
                        var result = TokenIntervals$AgdaModeVscode.hasError({
                              TAG: "Replace",
                              _0: 10,
                              _1: 10,
                              _2: 0,
                              _3: "EOF"
                            });
                        Curry._3(Assert.deepStrictEqual, result, "Empty", undefined);
                      }));
              }));
        describe("TokenIntervals.totalDelta", (function () {
                it("should return 0 for EOF", (function () {
                        var result = TokenIntervals$AgdaModeVscode.totalDelta("EOF");
                        Curry._3(Assert.deepStrictEqual, result, 0, undefined);
                      }));
                it("should return delta for single interval", (function () {
                        var result = TokenIntervals$AgdaModeVscode.totalDelta({
                              TAG: "Replace",
                              _0: 10,
                              _1: 15,
                              _2: 8,
                              _3: "EOF"
                            });
                        Curry._3(Assert.deepStrictEqual, result, 8, undefined);
                      }));
                it("should return last delta for multiple intervals", (function () {
                        var result = TokenIntervals$AgdaModeVscode.totalDelta({
                              TAG: "Replace",
                              _0: 5,
                              _1: 8,
                              _2: 3,
                              _3: {
                                TAG: "Replace",
                                _0: 15,
                                _1: 20,
                                _2: 12,
                                _3: "EOF"
                              }
                            });
                        Curry._3(Assert.deepStrictEqual, result, 12, undefined);
                      }));
                it("should handle negative delta", (function () {
                        var result = TokenIntervals$AgdaModeVscode.totalDelta({
                              TAG: "Replace",
                              _0: 10,
                              _1: 20,
                              _2: -5,
                              _3: {
                                TAG: "Replace",
                                _0: 30,
                                _1: 35,
                                _2: -8,
                                _3: "EOF"
                              }
                            });
                        Curry._3(Assert.deepStrictEqual, result, -8, undefined);
                      }));
              }));
        describe("TokenIntervals.removedIntervals", (function () {
                it("should return empty array for EOF", (function () {
                        var result = TokenIntervals$AgdaModeVscode.removedIntervals("EOF");
                        Curry._3(Assert.deepStrictEqual, result, [], undefined);
                      }));
                it("should return interval for single removal", (function () {
                        var result = TokenIntervals$AgdaModeVscode.removedIntervals({
                              TAG: "Replace",
                              _0: 10,
                              _1: 15,
                              _2: 3,
                              _3: "EOF"
                            });
                        Curry._3(Assert.deepStrictEqual, result, [[
                                10,
                                15
                              ]], undefined);
                      }));
                it("should skip intervals with no removal (start == end)", (function () {
                        var result = TokenIntervals$AgdaModeVscode.removedIntervals({
                              TAG: "Replace",
                              _0: 10,
                              _1: 10,
                              _2: 5,
                              _3: "EOF"
                            });
                        Curry._3(Assert.deepStrictEqual, result, [], undefined);
                      }));
                it("should return multiple removal intervals", (function () {
                        var result = TokenIntervals$AgdaModeVscode.removedIntervals({
                              TAG: "Replace",
                              _0: 5,
                              _1: 8,
                              _2: 2,
                              _3: {
                                TAG: "Replace",
                                _0: 15,
                                _1: 20,
                                _2: 1,
                                _3: "EOF"
                              }
                            });
                        Curry._3(Assert.deepStrictEqual, result, [
                              [
                                5,
                                8
                              ],
                              [
                                15,
                                20
                              ]
                            ], undefined);
                      }));
                it("should mix removal and insertion-only intervals", (function () {
                        var result = TokenIntervals$AgdaModeVscode.removedIntervals({
                              TAG: "Replace",
                              _0: 5,
                              _1: 8,
                              _2: 2,
                              _3: {
                                TAG: "Replace",
                                _0: 10,
                                _1: 10,
                                _2: 3,
                                _3: {
                                  TAG: "Replace",
                                  _0: 20,
                                  _1: 25,
                                  _2: 1,
                                  _3: "EOF"
                                }
                              }
                            });
                        Curry._3(Assert.deepStrictEqual, result, [
                              [
                                5,
                                8
                              ],
                              [
                                20,
                                25
                              ]
                            ], undefined);
                      }));
              }));
        describe("TokenIntervals.isValidWRTChanges", (function () {
                it("should return true for empty intervals and empty changes", (function () {
                        var changes = [];
                        var result = TokenIntervals$AgdaModeVscode.isValidWRTChanges("EOF", changes);
                        Curry._3(Assert.deepStrictEqual, result, true, undefined);
                      }));
                it("should return true for matching single change", (function () {
                        var changes = [{
                            offset: 10,
                            removed: 5,
                            inserted: 8
                          }];
                        var result = TokenIntervals$AgdaModeVscode.isValidWRTChanges({
                              TAG: "Replace",
                              _0: 10,
                              _1: 15,
                              _2: 3,
                              _3: "EOF"
                            }, changes);
                        Curry._3(Assert.deepStrictEqual, result, true, undefined);
                      }));
                it("should return false for mismatched total delta", (function () {
                        var changes = [{
                            offset: 10,
                            removed: 5,
                            inserted: 7
                          }];
                        var result = TokenIntervals$AgdaModeVscode.isValidWRTChanges({
                              TAG: "Replace",
                              _0: 10,
                              _1: 15,
                              _2: 3,
                              _3: "EOF"
                            }, changes);
                        Curry._3(Assert.deepStrictEqual, result, false, undefined);
                      }));
                it("should return false for mismatched removed intervals", (function () {
                        var changes = [{
                            offset: 12,
                            removed: 5,
                            inserted: 8
                          }];
                        var result = TokenIntervals$AgdaModeVscode.isValidWRTChanges({
                              TAG: "Replace",
                              _0: 10,
                              _1: 15,
                              _2: 3,
                              _3: "EOF"
                            }, changes);
                        Curry._3(Assert.deepStrictEqual, result, false, undefined);
                      }));
                it("should handle multiple changes correctly", (function () {
                        var changes = [
                          {
                            offset: 5,
                            removed: 3,
                            inserted: 5
                          },
                          {
                            offset: 15,
                            removed: 5,
                            inserted: 10
                          }
                        ];
                        var result = TokenIntervals$AgdaModeVscode.isValidWRTChanges({
                              TAG: "Replace",
                              _0: 5,
                              _1: 8,
                              _2: 2,
                              _3: {
                                TAG: "Replace",
                                _0: 15,
                                _1: 20,
                                _2: 7,
                                _3: "EOF"
                              }
                            }, changes);
                        Curry._3(Assert.deepStrictEqual, result, true, undefined);
                      }));
              }));
        describe("TokenIntervals.isValidWRTChangeBatches", (function () {
                it("should return true for empty intervals and empty batches", (function () {
                        var batches = [];
                        var result = TokenIntervals$AgdaModeVscode.isValidWRTChangeBatches("EOF", batches);
                        Curry._3(Assert.deepStrictEqual, result, true, undefined);
                      }));
                it("should return true for matching total delta across batches", (function () {
                        var batches = [
                          [{
                              offset: 5,
                              removed: 2,
                              inserted: 5
                            }],
                          [{
                              offset: 10,
                              removed: 3,
                              inserted: 8
                            }]
                        ];
                        var result = TokenIntervals$AgdaModeVscode.isValidWRTChangeBatches({
                              TAG: "Replace",
                              _0: 10,
                              _1: 15,
                              _2: 8,
                              _3: "EOF"
                            }, batches);
                        Curry._3(Assert.deepStrictEqual, result, true, undefined);
                      }));
                it("should return false for mismatched total delta", (function () {
                        var batches = [
                          [{
                              offset: 5,
                              removed: 2,
                              inserted: 4
                            }],
                          [{
                              offset: 10,
                              removed: 3,
                              inserted: 6
                            }]
                        ];
                        var result = TokenIntervals$AgdaModeVscode.isValidWRTChangeBatches({
                              TAG: "Replace",
                              _0: 10,
                              _1: 15,
                              _2: 6,
                              _3: "EOF"
                            }, batches);
                        Curry._3(Assert.deepStrictEqual, result, false, undefined);
                      }));
                it("should handle empty batches with single batch", (function () {
                        var batches = [
                          [],
                          [{
                              offset: 10,
                              removed: 1,
                              inserted: 5
                            }],
                          []
                        ];
                        var result = TokenIntervals$AgdaModeVscode.isValidWRTChangeBatches({
                              TAG: "Replace",
                              _0: 10,
                              _1: 15,
                              _2: 4,
                              _3: "EOF"
                            }, batches);
                        Curry._3(Assert.deepStrictEqual, result, true, undefined);
                      }));
              }));
        describe("TokenIntervals.Source.toString", (function () {
                it("should format Before", (function () {
                        var result = TokenIntervals$AgdaModeVscode.Source.toString({
                              TAG: "Before",
                              _0: 15
                            });
                        Curry._3(Assert.deepStrictEqual, result, "Before 15", undefined);
                      }));
                it("should format InInsertion", (function () {
                        var result = TokenIntervals$AgdaModeVscode.Source.toString({
                              TAG: "InInsertion",
                              _0: 8
                            });
                        Curry._3(Assert.deepStrictEqual, result, "InInsertion 8", undefined);
                      }));
                it("should format After", (function () {
                        var result = TokenIntervals$AgdaModeVscode.Source.toString({
                              TAG: "After",
                              _0: 25
                            });
                        Curry._3(Assert.deepStrictEqual, result, "After 25", undefined);
                      }));
              }));
        describe("TokenIntervals.Source.calculateOriginalOffset", (function () {
                it("should return After for offset beyond end+deltaAfter", (function () {
                        var result = TokenIntervals$AgdaModeVscode.Source.calculateOriginalOffset(5, 10, 15, 8, 25);
                        Curry._3(Assert.deepStrictEqual, result, {
                              TAG: "After",
                              _0: 17
                            }, undefined);
                      }));
                it("should return Before for offset at or before deltaBefore+start", (function () {
                        var result = TokenIntervals$AgdaModeVscode.Source.calculateOriginalOffset(5, 10, 15, 8, 15);
                        Curry._3(Assert.deepStrictEqual, result, {
                              TAG: "Before",
                              _0: 10
                            }, undefined);
                      }));
                it("should return InInsertion for offset between boundaries", (function () {
                        var result = TokenIntervals$AgdaModeVscode.Source.calculateOriginalOffset(5, 10, 15, 8, 18);
                        Curry._3(Assert.deepStrictEqual, result, {
                              TAG: "InInsertion",
                              _0: 13
                            }, undefined);
                      }));
                it("should handle edge case at exact boundaries", (function () {
                        var result1 = TokenIntervals$AgdaModeVscode.Source.calculateOriginalOffset(5, 10, 15, 8, 23);
                        Curry._3(Assert.deepStrictEqual, result1, {
                              TAG: "After",
                              _0: 15
                            }, undefined);
                        var result2 = TokenIntervals$AgdaModeVscode.Source.calculateOriginalOffset(5, 10, 15, 8, 15);
                        Curry._3(Assert.deepStrictEqual, result2, {
                              TAG: "Before",
                              _0: 10
                            }, undefined);
                      }));
              }));
        describe("TokenIntervals.preprocessChangeBatch", (function () {
                it("should return empty array for empty input", (function () {
                        var result = TokenIntervals$AgdaModeVscode.preprocessChangeBatch([]);
                        Curry._3(Assert.deepStrictEqual, result, [], undefined);
                      }));
                it("should return single change unchanged for single input", (function () {
                        var changes = [{
                            offset: 10,
                            removed: 5,
                            inserted: 8
                          }];
                        var result = TokenIntervals$AgdaModeVscode.preprocessChangeBatch(changes);
                        var expected = [{
                            offset: 10,
                            removed: 5,
                            inserted: 8
                          }];
                        Curry._3(Assert.deepStrictEqual, result, expected, undefined);
                      }));
                it("should translate subsequent changes by cumulative delta", (function () {
                        var changes = [
                          {
                            offset: 10,
                            removed: 3,
                            inserted: 6
                          },
                          {
                            offset: 20,
                            removed: 2,
                            inserted: 1
                          },
                          {
                            offset: 30,
                            removed: 0,
                            inserted: 4
                          }
                        ];
                        var result = TokenIntervals$AgdaModeVscode.preprocessChangeBatch(changes);
                        var expected = [
                          {
                            offset: 10,
                            removed: 3,
                            inserted: 6
                          },
                          {
                            offset: 23,
                            removed: 2,
                            inserted: 1
                          },
                          {
                            offset: 32,
                            removed: 0,
                            inserted: 4
                          }
                        ];
                        Curry._3(Assert.deepStrictEqual, result, expected, undefined);
                      }));
                it("should handle negative deltas correctly", (function () {
                        var changes = [
                          {
                            offset: 15,
                            removed: 8,
                            inserted: 2
                          },
                          {
                            offset: 25,
                            removed: 1,
                            inserted: 5
                          }
                        ];
                        var result = TokenIntervals$AgdaModeVscode.preprocessChangeBatch(changes);
                        var expected = [
                          {
                            offset: 15,
                            removed: 8,
                            inserted: 2
                          },
                          {
                            offset: 19,
                            removed: 1,
                            inserted: 5
                          }
                        ];
                        Curry._3(Assert.deepStrictEqual, result, expected, undefined);
                      }));
              }));
        describe("TokenIntervals.applyChanges", (function () {
                it("should return EOF for empty changes on empty intervals", (function () {
                        var changes = [];
                        var result = TokenIntervals$AgdaModeVscode.applyChanges("EOF", changes);
                        Curry._3(Assert.deepStrictEqual, result, "EOF", undefined);
                      }));
                it("should create single interval for single change on empty intervals", (function () {
                        var changes = [{
                            offset: 10,
                            removed: 5,
                            inserted: 8
                          }];
                        var result = TokenIntervals$AgdaModeVscode.applyChanges("EOF", changes);
                        Curry._3(Assert.deepStrictEqual, result, {
                              TAG: "Replace",
                              _0: 10,
                              _1: 15,
                              _2: 3,
                              _3: "EOF"
                            }, undefined);
                      }));
                it("should handle insertion-only change", (function () {
                        var changes = [{
                            offset: 15,
                            removed: 0,
                            inserted: 6
                          }];
                        var result = TokenIntervals$AgdaModeVscode.applyChanges("EOF", changes);
                        Curry._3(Assert.deepStrictEqual, result, {
                              TAG: "Replace",
                              _0: 15,
                              _1: 15,
                              _2: 6,
                              _3: "EOF"
                            }, undefined);
                      }));
                it("should handle removal-only change", (function () {
                        var changes = [{
                            offset: 20,
                            removed: 8,
                            inserted: 0
                          }];
                        var result = TokenIntervals$AgdaModeVscode.applyChanges("EOF", changes);
                        Curry._3(Assert.deepStrictEqual, result, {
                              TAG: "Replace",
                              _0: 20,
                              _1: 28,
                              _2: -8,
                              _3: "EOF"
                            }, undefined);
                      }));
                it.skip("should create multiple intervals for multiple changes", (function () {
                        var changes = [
                          {
                            offset: 5,
                            removed: 2,
                            inserted: 4
                          },
                          {
                            offset: 15,
                            removed: 3,
                            inserted: 1
                          }
                        ];
                        var result = TokenIntervals$AgdaModeVscode.applyChanges("EOF", changes);
                        Curry._3(Assert.deepStrictEqual, result, {
                              TAG: "Replace",
                              _0: 5,
                              _1: 7,
                              _2: 2,
                              _3: {
                                TAG: "Replace",
                                _0: 17,
                                _1: 20,
                                _2: 0,
                                _3: "EOF"
                              }
                            }, undefined);
                      }));
                it("should preserve existing intervals when applying new changes", (function () {
                        var changes = [{
                            offset: 10,
                            removed: 3,
                            inserted: 6
                          }];
                        var result = TokenIntervals$AgdaModeVscode.applyChanges({
                              TAG: "Replace",
                              _0: 30,
                              _1: 35,
                              _2: 5,
                              _3: "EOF"
                            }, changes);
                        Curry._3(Assert.deepStrictEqual, result, {
                              TAG: "Replace",
                              _0: 10,
                              _1: 13,
                              _2: 3,
                              _3: {
                                TAG: "Replace",
                                _0: 30,
                                _1: 35,
                                _2: 8,
                                _3: "EOF"
                              }
                            }, undefined);
                      }));
              }));
        describe("TokenIntervals FastCheck Properties", (function () {
                describe("Monotonic Delta Progression", (function () {
                        it("should have monotonically consistent delta progression when applying changes sequentially", (function () {
                                FastCheck.assert(FastCheck.property(TokenChange$AgdaModeVscode.arbitraryBatch(5, undefined), (function (changes) {
                                            return Core__Array.reduceWithIndex(changes, true, (function (acc, change, i) {
                                                          if (!acc) {
                                                            return false;
                                                          }
                                                          var partialChanges = changes.slice(0, i + 1 | 0);
                                                          var intervals = TokenIntervals$AgdaModeVscode.applyChanges(TokenIntervals$AgdaModeVscode.empty, partialChanges);
                                                          var intervalsDelta = TokenIntervals$AgdaModeVscode.totalDelta(intervals);
                                                          var expectedDelta = TokenChange$AgdaModeVscode.totalDelta(partialChanges);
                                                          return intervalsDelta === expectedDelta;
                                                        }));
                                          })));
                              }));
                        it("should maintain delta consistency when intervals have no errors", (function () {
                                FastCheck.assert(FastCheck.property(TokenChange$AgdaModeVscode.arbitraryBatch(3, undefined), (function (changes) {
                                            var intervals = TokenIntervals$AgdaModeVscode.applyChanges(TokenIntervals$AgdaModeVscode.empty, changes);
                                            var match = TokenIntervals$AgdaModeVscode.hasError(intervals);
                                            if (match !== undefined) {
                                              return true;
                                            }
                                            var intervalsDelta = TokenIntervals$AgdaModeVscode.totalDelta(intervals);
                                            var changesDelta = TokenChange$AgdaModeVscode.totalDelta(changes);
                                            return intervalsDelta === changesDelta;
                                          })));
                              }));
                      }));
              }));
      }));

/*  Not a pure module */
