// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Nodeurl = require("node:url");
var OS$AgdaModeVscode = require("../../src/Util/OS.bs.js");
var Connection__URI$AgdaModeVscode = require("../../src/Connection/Shared/Connection__URI.bs.js");

describe("Connection__URI", (function () {
        describe("parse", (function () {
                it("should parse lsp:// URLs as LspURI variant", (function () {
                        var uri = Connection__URI$AgdaModeVscode.parse("lsp://localhost:8080");
                        if (uri.TAG !== "FileURI") {
                          return Curry._3(Assert.deepStrictEqual, uri._0.protocol, "lsp:", undefined);
                        }
                        Assert.fail("Expected LspURI variant");
                      }));
                it("should reject non-lsp URLs and treat as filepath", (function () {
                        var uri = Connection__URI$AgdaModeVscode.parse("http://example.com");
                        if (uri.TAG === "FileURI") {
                          return ;
                        }
                        Assert.fail("Expected FileURI variant for non-lsp URL");
                      }));
                it("should parse regular file paths as FileURI variant", (function () {
                        var uri = Connection__URI$AgdaModeVscode.parse("/usr/bin/agda");
                        if (uri.TAG === "FileURI") {
                          return Curry._3(Assert.deepStrictEqual, uri._0.fsPath, "/usr/bin/agda", undefined);
                        }
                        Assert.fail("Expected FileURI variant");
                      }));
                it("should expand tilde in file paths", (function () {
                        var uri = Connection__URI$AgdaModeVscode.parse("~/bin/agda");
                        if (uri.TAG === "FileURI") {
                          var path = uri._0.fsPath;
                          Assert.ok(!path.includes("~"));
                          return ;
                        }
                        Assert.fail("Expected FileURI variant");
                      }));
                it("should normalize file paths", (function () {
                        var uri = Connection__URI$AgdaModeVscode.parse("/usr/bin/../bin/agda");
                        if (uri.TAG === "FileURI") {
                          return Curry._3(Assert.deepStrictEqual, uri._0.fsPath, "/usr/bin/agda", undefined);
                        }
                        Assert.fail("Expected FileURI variant");
                      }));
                if (!OS$AgdaModeVscode.onUnix) {
                  it("should convert Windows-style paths on Windows", (function () {
                          var uri = Connection__URI$AgdaModeVscode.parse("/c/path/to/agda");
                          if (uri.TAG === "FileURI") {
                            return Curry._3(Assert.deepStrictEqual, uri._0.fsPath, "c:\\path\\to\\agda", undefined);
                          }
                          Assert.fail("Expected FileURI variant");
                        }));
                  return ;
                }
                
              }));
        describe("toString", (function () {
                it("should convert FileURI to normalized string", (function () {
                        var vscodeUri = Vscode.Uri.file("/usr/bin/../bin/agda");
                        var uri = {
                          TAG: "FileURI",
                          _0: vscodeUri
                        };
                        var result = Connection__URI$AgdaModeVscode.toString(uri);
                        Curry._3(Assert.deepStrictEqual, result, "/usr/bin/agda", undefined);
                      }));
                it("should convert LspURI to string", (function () {
                        var url = new Nodeurl.URL("lsp://localhost:8080");
                        var uri = {
                          TAG: "LspURI",
                          _0: url
                        };
                        var result = Connection__URI$AgdaModeVscode.toString(uri);
                        Curry._3(Assert.deepStrictEqual, result, "lsp://localhost:8080", undefined);
                      }));
              }));
        describe("equal", (function () {
                it("should return true for equal file paths", (function () {
                        var uri1 = {
                          TAG: "FileURI",
                          _0: Vscode.Uri.file("/usr/bin/agda")
                        };
                        var uri2 = {
                          TAG: "FileURI",
                          _0: Vscode.Uri.file("/usr/bin/agda")
                        };
                        Curry._3(Assert.deepStrictEqual, Connection__URI$AgdaModeVscode.equal(uri1, uri2), true, undefined);
                      }));
                it("should return false for different file paths", (function () {
                        var uri1 = {
                          TAG: "FileURI",
                          _0: Vscode.Uri.file("/usr/bin/agda")
                        };
                        var uri2 = {
                          TAG: "FileURI",
                          _0: Vscode.Uri.file("/usr/local/bin/agda")
                        };
                        Curry._3(Assert.deepStrictEqual, Connection__URI$AgdaModeVscode.equal(uri1, uri2), false, undefined);
                      }));
                it("should return true for equal LSP URIs", (function () {
                        var url1 = new Nodeurl.URL("lsp://localhost:8080");
                        var url2 = new Nodeurl.URL("lsp://localhost:8080");
                        var uri1 = {
                          TAG: "LspURI",
                          _0: url1
                        };
                        var uri2 = {
                          TAG: "LspURI",
                          _0: url2
                        };
                        Curry._3(Assert.deepStrictEqual, Connection__URI$AgdaModeVscode.equal(uri1, uri2), true, undefined);
                      }));
                it("should return false for different LSP URIs", (function () {
                        var url1 = new Nodeurl.URL("lsp://localhost:8080");
                        var url2 = new Nodeurl.URL("lsp://localhost:9090");
                        var uri1 = {
                          TAG: "LspURI",
                          _0: url1
                        };
                        var uri2 = {
                          TAG: "LspURI",
                          _0: url2
                        };
                        Curry._3(Assert.deepStrictEqual, Connection__URI$AgdaModeVscode.equal(uri1, uri2), false, undefined);
                      }));
                it("should return false for mixed FileURI and LspURI", (function () {
                        var uri1 = {
                          TAG: "FileURI",
                          _0: Vscode.Uri.file("/usr/bin/agda")
                        };
                        var url = new Nodeurl.URL("lsp://localhost:8080");
                        var uri2 = {
                          TAG: "LspURI",
                          _0: url
                        };
                        Curry._3(Assert.deepStrictEqual, Connection__URI$AgdaModeVscode.equal(uri1, uri2), false, undefined);
                      }));
              }));
        describe("round-trip parsing", (function () {
                it("should preserve lsp:// URLs through parse -> toString", (function () {
                        var parsed = Connection__URI$AgdaModeVscode.parse("lsp://localhost:8080");
                        var stringified = Connection__URI$AgdaModeVscode.toString(parsed);
                        Assert.ok(stringified.startsWith("lsp://localhost:8080"));
                      }));
                it("should preserve file paths through parse -> toString", (function () {
                        var original = "/usr/bin/agda";
                        var parsed = Connection__URI$AgdaModeVscode.parse(original);
                        var stringified = Connection__URI$AgdaModeVscode.toString(parsed);
                        Curry._3(Assert.deepStrictEqual, stringified, original, undefined);
                      }));
              }));
      }));

var URI;

exports.URI = URI;
/*  Not a pure module */
