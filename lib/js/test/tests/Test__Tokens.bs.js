// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var FastCheck = require("fast-check");
var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");
var Util$AgdaModeVscode = require("../../src/Util/Util.bs.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var Tokens$AgdaModeVscode = require("../../src/Tokens.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");

describe("Tokens", (function () {
        this.timeout(10000);
        describe("GotoDefinition.agda", (function () {
                it("should produce 28 tokens", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("GotoDefinition.agda");
                        var tokens = Tokens$AgdaModeVscode.toArray(ctx.state.tokens).map(function (param) {
                              return Editor$AgdaModeVscode.$$Range.toString(param[1]) + " " + Tokens$AgdaModeVscode.Token.toString(param[0]);
                            });
                        return Curry._3(Assert.deepEqual, tokens.length, 28, undefined);
                      }));
                it("should produce correct tokens", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("GotoDefinition.agda");
                        var tokens = Tokens$AgdaModeVscode.toArray(ctx.state.tokens).map(function (param) {
                              return Editor$AgdaModeVscode.$$Range.toString(param[1]) + " " + Tokens$AgdaModeVscode.Token.toString(param[0]);
                            });
                        var version = ctx.state.agdaVersion;
                        var srcOfPrimitive;
                        if (version !== undefined) {
                          srcOfPrimitive = Util$AgdaModeVscode.Version.gte(version, "2.6.4") ? "[src: 388]" : "[src: 320]";
                        } else {
                          throw {
                                RE_EXN_ID: "Failure",
                                _1: "No Agda version found",
                                Error: new Error()
                              };
                        }
                        return Curry._3(Assert.deepEqual, tokens, [
                                    "0:0-6 (0, 6) [Keyword]",
                                    "0:7-21 (7, 21) [Module] [src: 1]",
                                    "0:22-27 (22, 27) [Keyword]",
                                    "1:0-4 (28, 32) [Keyword]",
                                    "1:5-6 (33, 34) [Datatype] [src: 34]",
                                    "1:7-8 (35, 36) [Symbol]",
                                    "1:9-12 (37, 40) [Primitive] " + srcOfPrimitive,
                                    "1:13-18 (41, 46) [Keyword]",
                                    "2:2-3 (49, 50) [ConstructorInductive] [src: 50]",
                                    "2:4-5 (51, 52) [Symbol]",
                                    "2:6-7 (53, 54) [Datatype] [src: 34]",
                                    "3:2-3 (57, 58) [ConstructorInductive] [src: 58]",
                                    "3:4-5 (59, 60) [Symbol]",
                                    "3:6-7 (61, 62) [Datatype] [src: 34]",
                                    "3:8-9 (63, 64) [Symbol]",
                                    "3:10-11 (65, 66) [Datatype] [src: 34]",
                                    "5:0-3 (68, 71) [Function, Operator] [src: 69]",
                                    "5:4-5 (72, 73) [Symbol]",
                                    "5:6-7 (74, 75) [Datatype] [src: 34]",
                                    "5:8-9 (76, 77) [Symbol]",
                                    "5:10-11 (78, 79) [Datatype] [src: 34]",
                                    "5:12-13 (80, 81) [Symbol]",
                                    "5:14-15 (82, 83) [Datatype] [src: 34]",
                                    "6:0-1 (84, 85) [Bound] [src: 85]",
                                    "6:2-3 (86, 87) [Function, Operator] [src: 69]",
                                    "6:4-5 (88, 89) [Bound] [src: 89]",
                                    "6:6-7 (90, 91) [Symbol]",
                                    "6:8-15 (92, 99) [Hole]"
                                  ], undefined);
                      }));
              }));
        describe.only("Change", (function () {
                it("`arbitraryBatch` should generate non-overlapping changes", (function () {
                        FastCheck.assert(FastCheck.property(Tokens$AgdaModeVscode.Change.arbitraryBatch(), (function (xs) {
                                    return Core__Array.reduceWithIndex(xs, true, (function (acc, param, i) {
                                                  var match = xs[i];
                                                  var match$1 = xs[i + 1 | 0];
                                                  if (match === undefined) {
                                                    return acc;
                                                  }
                                                  if (match$1 === undefined) {
                                                    return acc;
                                                  }
                                                  var aEnd = (match.offset + match.inserted | 0) - match.removed | 0;
                                                  var bStart = match$1.offset;
                                                  if (aEnd <= bStart) {
                                                    return acc;
                                                  } else {
                                                    return false;
                                                  }
                                                }));
                                  })));
                      }));
              }));
        describe.only("Intervals", (function () {
                it("`empty` should should be valid", (function () {
                        Assert.ok(Tokens$AgdaModeVscode.Intervals.isValid(Tokens$AgdaModeVscode.Intervals.empty));
                      }));
                it("`applyChanges` should result in correct intervals with 1 change", (function () {
                        FastCheck.assert(FastCheck.property(Tokens$AgdaModeVscode.Change.arbitrary(0), (function (change) {
                                    var result = Tokens$AgdaModeVscode.Intervals.applyChanges(Tokens$AgdaModeVscode.Intervals.empty, [change]);
                                    Tokens$AgdaModeVscode.Intervals.debugIsValid(result);
                                    if (Tokens$AgdaModeVscode.Intervals.isValid(result)) {
                                      return Tokens$AgdaModeVscode.Intervals.isValidWRTChanges(result, [change]);
                                    } else {
                                      return false;
                                    }
                                  })));
                      }));
              }));
      }));

/*  Not a pure module */
