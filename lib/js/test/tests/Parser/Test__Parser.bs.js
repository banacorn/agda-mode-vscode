// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var OS$AgdaModeVscode = require("../../../src/Util/OS.bs.js");
var Parser$AgdaModeVscode = require("../../../src/Parser/Parser.bs.js");

describe("Parser.escape", (function () {
        it("should make escaped backslash explicit", (function () {
                var actual = Parser$AgdaModeVscode.$$escape("\\ x -> x");
                Curry._3(Assert.deepStrictEqual, actual, "\\\\ x -> x", undefined);
              }));
        it("should make escaped newline on Unix explicit", (function () {
                var actual = Parser$AgdaModeVscode.$$escape("x\ny");
                Curry._3(Assert.deepStrictEqual, actual, "x\\ny", undefined);
              }));
        it("should make escaped newline on Windows explicit", (function () {
                var actual = Parser$AgdaModeVscode.$$escape("x\r\ny");
                Curry._3(Assert.deepStrictEqual, actual, "x\\r\\ny", undefined);
              }));
        it("should make escaped double quote explicit", (function () {
                var actual = Parser$AgdaModeVscode.$$escape("\"x\"");
                Curry._3(Assert.deepStrictEqual, actual, "\\\"x\\\"", undefined);
              }));
      }));

describe("Parser.unescapeEOL", (function () {
        it("should make explicit newline on Unix implicit", (function () {
                var actual = Parser$AgdaModeVscode.unescapeEOL("x\\ny");
                Curry._3(Assert.deepStrictEqual, actual, "x\ny", undefined);
              }));
        it("should make explicit newline on Windows implicit", (function () {
                var actual = Parser$AgdaModeVscode.unescapeEOL("x\\r\\ny");
                Curry._3(Assert.deepStrictEqual, actual, "x\r\ny", undefined);
              }));
      }));

describe.only("Parser.Filepath", (function () {
        it("should remove Windows Bidi control characters", (function () {
                var actual = Parser$AgdaModeVscode.Filepath.make("\u202A/path/to/file.agda");
                var expected = Parser$AgdaModeVscode.Filepath.make("/path/to/file.agda");
                Assert.ok(Parser$AgdaModeVscode.Filepath.equal(actual, expected));
              }));
        it("should normalize paths", (function () {
                var actual = Parser$AgdaModeVscode.Filepath.make("/path/./to/../file.agda");
                var expected = Parser$AgdaModeVscode.Filepath.make("/path/file.agda");
                Assert.ok(Parser$AgdaModeVscode.Filepath.equal(actual, expected));
              }));
        it("should be neutral regaring separators (backslash vs slash)", (function () {
                var actual = Parser$AgdaModeVscode.Filepath.make("C:\\path\\to\\file.agda");
                var expected = Parser$AgdaModeVscode.Filepath.make("C:/path/to/file.agda");
                Assert.ok(Parser$AgdaModeVscode.Filepath.equal(actual, expected));
              }));
        if (!OS$AgdaModeVscode.onUnix) {
          it("should convert small case roots to upper case on Windows", (function () {
                  var actual = Parser$AgdaModeVscode.Filepath.make("c:\\path\\dir\\file.txt");
                  var expected = Parser$AgdaModeVscode.Filepath.make("C:\\path\\dir\\file.txt");
                  Assert.ok(Parser$AgdaModeVscode.Filepath.equal(actual, expected));
                }));
          return ;
        }
        
      }));

describe("Parser.filepath", (function () {
        it("should remove Windows Bidi control characters", (function () {
                var actual = Parser$AgdaModeVscode.filepath("\u202A/path/to/file.agda");
                Curry._3(Assert.deepStrictEqual, actual, "/path/to/file.agda", undefined);
              }));
        it("should normalize the path", (function () {
                var actual = Parser$AgdaModeVscode.filepath("/path/./to/../file.agda");
                Curry._3(Assert.deepStrictEqual, actual, "/path/file.agda", undefined);
              }));
        it("should replace Windows backslash with slash", (function () {
                var actual = Parser$AgdaModeVscode.filepath("C:\\path\\to\\file.agda");
                Curry._3(Assert.deepStrictEqual, actual, "C:/path/to/file.agda", undefined);
              }));
        if (!OS$AgdaModeVscode.onUnix) {
          it("should convert small case Windows roots to upper case", (function () {
                  var actual = Parser$AgdaModeVscode.filepath("c:\\path\\dir\\file.txt");
                  Curry._3(Assert.deepStrictEqual, actual, "C:/path/dir/file.txt", undefined);
                }));
          return ;
        }
        
      }));

/*  Not a pure module */
