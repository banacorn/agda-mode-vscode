// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Util$AgdaModeVscode = require("../../../src/Util/Util.bs.js");
var Emacs__Parser2$AgdaModeVscode = require("../../../src/View/Panel/Emacs/Emacs__Parser2.bs.js");

function tempNormalize(xs) {
  return Js_dict.map((function (value) {
                return value.map(function (x) {
                            return Util$AgdaModeVscode.$$String.unlines(Util$AgdaModeVscode.$$String.lines(x));
                          });
              }), xs);
}

describe.only("when running Emacs__Parser2.parseGoalType", (function () {
        it("should parse goal only", (function () {
                var actual = Emacs__Parser2$AgdaModeVscode.parseGoalType("Goal: ℕ\n————————————————————————————————————————————————————————————");
                var expected = Object.fromEntries([[
                        "goal",
                        ["Goal: ℕ"]
                      ]]);
                Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
              }));
        it("should parse goal + have", (function () {
                var actual = Emacs__Parser2$AgdaModeVscode.parseGoalType("Goal: ℕ\nHave: ℕ\n————————————————————————————————————————————————————————————");
                var expected = Object.fromEntries([
                      [
                        "goal",
                        ["Goal: ℕ"]
                      ],
                      [
                        "have",
                        ["Have: ℕ"]
                      ]
                    ]);
                Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
              }));
        it("should parse goal + have + context", (function () {
                var actual = Emacs__Parser2$AgdaModeVscode.parseGoalType("Goal: ℕ\nHave: ℕ\n————————————————————————————————————————————————————————————\ny : ℕ\nx : ℕ");
                var expected = Object.fromEntries([
                      [
                        "goal",
                        ["Goal: ℕ"]
                      ],
                      [
                        "have",
                        ["Have: ℕ"]
                      ],
                      [
                        "interactionMetas",
                        [
                          "y : ℕ",
                          "x : ℕ"
                        ]
                      ]
                    ]);
                Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
              }));
      }));

describe("when running Emacs__Parser2.parseAllGoalsWarnings", (function () {
        it("should parse goals only", (function () {
                var actual = Emacs__Parser2$AgdaModeVscode.parseAllGoalsWarnings("*All Goals*", "\n?0 : ℕ\n?1 : ℕ\nSort _0  [ at /path/to/agda/examples/A.agda:11,5-20 ]\n");
                var expected = Object.fromEntries([
                      [
                        "interactionMetas",
                        [
                          "?0 : ℕ",
                          "?1 : ℕ"
                        ]
                      ],
                      [
                        "hiddenMetas",
                        ["Sort _0  [ at /path/to/agda/examples/A.agda:11,5-20 ]"]
                      ]
                    ]);
                Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
              }));
        it("should parse goals + errors", (function () {
                var actual = Emacs__Parser2$AgdaModeVscode.parseAllGoalsWarnings("*All Goals, Errors*", "?0 : _2\n\n———— Errors ————————————————————————————————————————————————\nUnsolved constraints");
                var expected = Object.fromEntries([
                      [
                        "interactionMetas",
                        ["?0 : _2"]
                      ],
                      [
                        "errors",
                        ["Unsolved constraints"]
                      ]
                    ]);
                Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
              }));
        it("should parse goals that span multiple lines", (function () {
                var actual = Emacs__Parser2$AgdaModeVscode.parseAllGoalsWarnings("*All Goals, Errors*", "?0\n  : BoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBool");
                var expected = tempNormalize(Object.fromEntries([[
                            "interactionMetas",
                            ["?0\n  : BoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBoolBool"]
                          ]]));
                Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
              }));
      }));

describe("when running Emacs__Parser2.parseError", (function () {
        it("should parse an error only", (function () {
                var actual = Emacs__Parser2$AgdaModeVscode.parseError("/path/to/agda/examples/A.agda:15,1-2\nThe right-hand side can only be omitted if there is an absurd\npattern, () or {}, in the left-hand side.\nwhen checking that the clause a has type _8");
                var expected = tempNormalize(Object.fromEntries([[
                            "errors",
                            ["/path/to/agda/examples/A.agda:15,1-2\nThe right-hand side can only be omitted if there is an absurd\npattern, () or {}, in the left-hand side.\nwhen checking that the clause a has type _8"]
                          ]]));
                Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
              }));
        it("should parse an error + warnings", (function () {
                var actual = Emacs__Parser2$AgdaModeVscode.parseError("———— Error —————————————————————————————————————————————————\n/path/to/agda/examples/A.agda:15,1-2\nThe right-hand side can only be omitted if there is an absurd\npattern, () or {}, in the left-hand side.\nwhen checking that the clause a has type _8\n\n———— Warning(s) ————————————————————————————————————————————\n/path/to/agda/examples/A.agda:17,1-8\nThe following names are declared but not accompanied by a\ndefinition: boo\n/path/to/agda/examples/A.agda:9,1-10\nUnreachable clause\nwhen checking the definition of _+_");
                var expected = tempNormalize(Object.fromEntries([
                          [
                            "errors",
                            ["/path/to/agda/examples/A.agda:15,1-2\nThe right-hand side can only be omitted if there is an absurd\npattern, () or {}, in the left-hand side.\nwhen checking that the clause a has type _8"]
                          ],
                          [
                            "warnings",
                            [
                              "/path/to/agda/examples/A.agda:9,1-10\nUnreachable clause\nwhen checking the definition of _+_",
                              "/path/to/agda/examples/A.agda:17,1-8\nThe following names are declared but not accompanied by a\ndefinition: boo"
                            ]
                          ]
                        ]));
                Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
              }));
      }));

exports.tempNormalize = tempNormalize;
/*  Not a pure module */
