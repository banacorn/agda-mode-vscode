// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Nodefs = require("node:fs");
var Nodeos = require("node:os");
var Nodepath = require("node:path");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Connection__DevALS$AgdaModeVscode = require("../../../src/Connection/Download/Connection__DevALS.bs.js");
var Connection__Download$AgdaModeVscode = require("../../../src/Connection/Download/Connection__Download.bs.js");

describe("Connection DevALS", (function () {
        this.timeout(10000);
        describe("makeAgdaLanguageServerRepo", (function () {
                it("should create repo config targeting banacorn/agda-language-server", (function () {
                        var mockGlobalStorageUri = Vscode.Uri.file("/mock/storage");
                        var repo = Connection__DevALS$AgdaModeVscode.makeAgdaLanguageServerRepo(mockGlobalStorageUri);
                        Curry._3(Assert.deepStrictEqual, repo.username, "banacorn", undefined);
                        Curry._3(Assert.deepStrictEqual, repo.repository, "agda-language-server", undefined);
                        Curry._3(Assert.deepStrictEqual, repo.userAgent, "banacorn/agda-mode-vscode", undefined);
                        Curry._3(Assert.deepStrictEqual, repo.cacheInvalidateExpirationSecs, 86400, undefined);
                      }));
              }));
        describe("chooseAssetByPlatform", (function () {
                var mockRelease_assets = [
                  {
                    url: "https://example.com/darwin-arm64.zip",
                    id: 123456,
                    node_id: "mock_node_id_1",
                    name: "als-dev-Agda-2.8.0-macos-arm64.zip",
                    label: "",
                    content_type: "application/zip",
                    state: "uploaded",
                    size: 1000000,
                    created_at: "2024-01-01T00:00:00Z",
                    updated_at: "2024-01-01T00:00:00Z",
                    browser_download_url: "https://example.com/darwin-arm64.zip"
                  },
                  {
                    url: "https://example.com/linux-x64.zip",
                    id: 123457,
                    node_id: "mock_node_id_2",
                    name: "als-dev-Agda-2.8.0-ubuntu.zip",
                    label: "",
                    content_type: "application/zip",
                    state: "uploaded",
                    size: 1000000,
                    created_at: "2024-01-01T00:00:00Z",
                    updated_at: "2024-01-01T00:00:00Z",
                    browser_download_url: "https://example.com/linux-x64.zip"
                  },
                  {
                    url: "https://example.com/win32-x64.zip",
                    id: 123458,
                    node_id: "mock_node_id_3",
                    name: "als-dev-Agda-2.8.0-windows.zip",
                    label: "",
                    content_type: "application/zip",
                    state: "uploaded",
                    size: 1000000,
                    created_at: "2024-01-01T00:00:00Z",
                    updated_at: "2024-01-01T00:00:00Z",
                    browser_download_url: "https://example.com/win32-x64.zip"
                  }
                ];
                var mockRelease_body = "Development release";
                var mockRelease = {
                  url: "https://api.github.com/repos/banacorn/agda-language-server/releases/123456",
                  assets_url: "https://api.github.com/repos/banacorn/agda-language-server/releases/123456/assets",
                  upload_url: "https://uploads.github.com/repos/banacorn/agda-language-server/releases/123456/assets{?name,label}",
                  html_url: "https://github.com/banacorn/agda-language-server/releases/tag/dev",
                  id: 123456,
                  node_id: "RE_mock_node_id",
                  tag_name: "dev",
                  target_commitish: "main",
                  name: "dev",
                  draft: false,
                  prerelease: true,
                  created_at: "2024-01-01T00:00:00Z",
                  published_at: "2024-01-01T00:00:00Z",
                  assets: mockRelease_assets,
                  tarball_url: "https://api.github.com/repos/banacorn/agda-language-server/tarball/dev",
                  zipball_url: "https://api.github.com/repos/banacorn/agda-language-server/zipball/dev",
                  body: mockRelease_body
                };
                it("should filter assets by darwin-arm64 platform", (async function () {
                        var assets = await Connection__DevALS$AgdaModeVscode.chooseAssetByPlatform(mockRelease, "MacOS_Arm");
                        Curry._3(Assert.deepStrictEqual, assets.length, 1, undefined);
                        return Curry._3(Assert.deepStrictEqual, Core__Option.getExn(assets[0], undefined).name, "als-dev-Agda-2.8.0-macos-arm64.zip", undefined);
                      }));
                it("should filter assets by linux-x64 platform", (async function () {
                        var assets = await Connection__DevALS$AgdaModeVscode.chooseAssetByPlatform(mockRelease, "Ubuntu");
                        Curry._3(Assert.deepStrictEqual, assets.length, 1, undefined);
                        return Curry._3(Assert.deepStrictEqual, Core__Option.getExn(assets[0], undefined).name, "als-dev-Agda-2.8.0-ubuntu.zip", undefined);
                      }));
                it("should filter assets by win32-x64 platform", (async function () {
                        var assets = await Connection__DevALS$AgdaModeVscode.chooseAssetByPlatform(mockRelease, "Windows");
                        Curry._3(Assert.deepStrictEqual, assets.length, 1, undefined);
                        return Curry._3(Assert.deepStrictEqual, Core__Option.getExn(assets[0], undefined).name, "als-dev-Agda-2.8.0-windows.zip", undefined);
                      }));
                it("should return empty array when no matching assets", (async function () {
                        var releaseWithDifferentAssets_assets = [{
                            url: "https://example.com/other.zip",
                            id: 123456,
                            node_id: "mock_node_id_1",
                            name: "other-file-unsupported.zip",
                            label: "",
                            content_type: "application/zip",
                            state: "uploaded",
                            size: 1000000,
                            created_at: "2024-01-01T00:00:00Z",
                            updated_at: "2024-01-01T00:00:00Z",
                            browser_download_url: "https://example.com/other.zip"
                          }];
                        var releaseWithDifferentAssets_body = "Development release without matching assets";
                        var releaseWithDifferentAssets = {
                          url: "https://api.github.com/repos/banacorn/agda-language-server/releases/123457",
                          assets_url: "https://api.github.com/repos/banacorn/agda-language-server/releases/123457/assets",
                          upload_url: "https://uploads.github.com/repos/banacorn/agda-language-server/releases/123457/assets{?name,label}",
                          html_url: "https://github.com/banacorn/agda-language-server/releases/tag/dev",
                          id: 123457,
                          node_id: "RE_mock_node_id_2",
                          tag_name: "dev",
                          target_commitish: "main",
                          name: "dev",
                          draft: false,
                          prerelease: true,
                          created_at: "2024-01-01T00:00:00Z",
                          published_at: "2024-01-01T00:00:00Z",
                          assets: releaseWithDifferentAssets_assets,
                          tarball_url: "https://api.github.com/repos/banacorn/agda-language-server/tarball/dev",
                          zipball_url: "https://api.github.com/repos/banacorn/agda-language-server/zipball/dev",
                          body: releaseWithDifferentAssets_body
                        };
                        var assets = await Connection__DevALS$AgdaModeVscode.chooseAssetByPlatform(releaseWithDifferentAssets, "MacOS_Arm");
                        return Curry._3(Assert.deepStrictEqual, assets.length, 0, undefined);
                      }));
              }));
        describe("alreadyDownloaded", (function () {
                it("should return None when dev-als directory doesn't exist", (async function () {
                        var nonExistentDir = Nodepath.join(Nodeos.tmpdir(), "devals-test-nonexistent-" + String(Date.now() | 0));
                        var globalStorageUri = Vscode.Uri.file(nonExistentDir);
                        var result = await Connection__DevALS$AgdaModeVscode.alreadyDownloaded(globalStorageUri)();
                        return Curry._3(Assert.deepStrictEqual, result, undefined, undefined);
                      }));
                it("should return None when dev-als directory exists but als executable doesn't", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "devals-test-noals-" + String(Date.now() | 0));
                        var devAlsDir = Nodepath.join(tempDir, "dev-als");
                        await Nodefs.promises.mkdir(devAlsDir, {
                              recursive: true,
                              mode: 511
                            });
                        var globalStorageUri = Vscode.Uri.file(tempDir);
                        var result = await Connection__DevALS$AgdaModeVscode.alreadyDownloaded(globalStorageUri)();
                        Curry._3(Assert.deepStrictEqual, result, undefined, undefined);
                        Nodefs.rmdirSync(devAlsDir);
                        Nodefs.rmdirSync(tempDir);
                      }));
                it("should return Some(path) when dev-als/als exists", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "devals-test-exists-" + String(Date.now() | 0));
                        var devAlsDir = Nodepath.join(tempDir, "dev-als");
                        var alsExecutable = Nodepath.join(devAlsDir, "als");
                        await Nodefs.promises.mkdir(devAlsDir, {
                              recursive: true,
                              mode: 511
                            });
                        Nodefs.writeFileSync(alsExecutable, Buffer.from("mock executable"));
                        var globalStorageUri = Vscode.Uri.file(tempDir);
                        var result = await Connection__DevALS$AgdaModeVscode.alreadyDownloaded(globalStorageUri)();
                        Curry._3(Assert.deepStrictEqual, result, alsExecutable, undefined);
                        Nodefs.unlinkSync(alsExecutable);
                        Nodefs.rmdirSync(devAlsDir);
                        Nodefs.rmdirSync(tempDir);
                      }));
                it("should handle multiple calls consistently", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "devals-test-multiple-" + String(Date.now() | 0));
                        var devAlsDir = Nodepath.join(tempDir, "dev-als");
                        var alsExecutable = Nodepath.join(devAlsDir, "als");
                        await Nodefs.promises.mkdir(devAlsDir, {
                              recursive: true,
                              mode: 511
                            });
                        Nodefs.writeFileSync(alsExecutable, Buffer.from("mock executable"));
                        var globalStorageUri = Vscode.Uri.file(tempDir);
                        var result1 = await Connection__DevALS$AgdaModeVscode.alreadyDownloaded(globalStorageUri)();
                        var result2 = await Connection__DevALS$AgdaModeVscode.alreadyDownloaded(globalStorageUri)();
                        var result3 = await Connection__DevALS$AgdaModeVscode.alreadyDownloaded(globalStorageUri)();
                        Curry._3(Assert.deepStrictEqual, result1, alsExecutable, undefined);
                        Curry._3(Assert.deepStrictEqual, result2, alsExecutable, undefined);
                        Curry._3(Assert.deepStrictEqual, result3, alsExecutable, undefined);
                        Nodefs.unlinkSync(alsExecutable);
                        Nodefs.rmdirSync(devAlsDir);
                        Nodefs.rmdirSync(tempDir);
                      }));
              }));
        describe("getALSReleaseManifest integration", (function () {
                it("should fetch ALS release manifest from GitHub API", (async function () {
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-dev-als");
                        var releaseResult = await Connection__DevALS$AgdaModeVscode.getALSReleaseManifestWithoutCache(globalStorageUri);
                        if (releaseResult.TAG === "Ok") {
                          var releases = releaseResult._0;
                          Assert.ok(releases.length > 0);
                          var devRelease = releases.find(function (release) {
                                return release.tag_name === "dev";
                              });
                          if (devRelease !== undefined) {
                            Curry._3(Assert.deepStrictEqual, devRelease.tag_name, "dev", undefined);
                            Curry._3(Assert.deepStrictEqual, devRelease.name, "Development Release (dev)", undefined);
                            Assert.ok(devRelease.prerelease === true);
                            Assert.ok(devRelease.assets.length > 0);
                            var assetNames = devRelease.assets.map(function (asset) {
                                  return asset.name;
                                });
                            Assert.ok(assetNames.some(function (name) {
                                      return name.includes("ubuntu");
                                    }));
                            Assert.ok(assetNames.some(function (name) {
                                      return name.includes("windows");
                                    }));
                            Assert.ok(assetNames.some(function (name) {
                                      return name.includes("macos");
                                    }));
                            return ;
                          }
                          Assert.fail("No dev release found in manifest");
                          return ;
                        }
                        Assert.fail("Failed to fetch releases: " + Connection__Download$AgdaModeVscode.$$Error.toString(releaseResult._0));
                      }));
              }));
        describe("getDownloadDescriptor integration", (function () {
                it("should fetch dev release spec from GitHub API", (async function () {
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-dev-als");
                        var result = await Connection__DevALS$AgdaModeVscode.getDownloadDescriptor(globalStorageUri, "Ubuntu");
                        if (result.TAG === "Ok") {
                          var downloadDescriptor = result._0;
                          Curry._3(Assert.deepStrictEqual, downloadDescriptor.release.tag_name, "dev", undefined);
                          Curry._3(Assert.deepStrictEqual, downloadDescriptor.saveAsFileName, "dev-als", undefined);
                          Assert.ok(downloadDescriptor.asset.name.includes("als-dev-Agda"));
                          return ;
                        }
                        Assert.fail("Expected success but got error: " + Connection__Download$AgdaModeVscode.$$Error.toString(result._0));
                      }));
              }));
      }));

var GitHub;

exports.GitHub = GitHub;
/*  Not a pure module */
