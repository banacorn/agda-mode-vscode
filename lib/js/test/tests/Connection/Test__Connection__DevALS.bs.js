// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Nodefs = require("node:fs");
var Nodeos = require("node:os");
var Nodepath = require("node:path");
var Connection__DevALS$AgdaModeVscode = require("../../../src/Connection/Download/Connection__DevALS.bs.js");
var Connection__Download$AgdaModeVscode = require("../../../src/Connection/Download/Connection__Download.bs.js");

describe("Connection DevALS", (function () {
        this.timeout(10000);
        describe("alreadyDownloaded", (function () {
                it("should return None when dev ALS not downloaded", (async function () {
                        var nonExistentDir = Nodepath.join(Nodeos.tmpdir(), "devals-test-nonexistent-" + String(Date.now() | 0));
                        var globalStorageUri = Vscode.Uri.file(nonExistentDir);
                        var result = await Connection__DevALS$AgdaModeVscode.alreadyDownloaded(globalStorageUri)();
                        return Curry._3(Assert.deepStrictEqual, result, undefined, undefined);
                      }));
                it("should return Some(path) when dev ALS executable exists", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "devals-test-exists-" + String(Date.now() | 0));
                        var devAlsDir = Nodepath.join(tempDir, "dev-als");
                        var alsExecutable = Nodepath.join(devAlsDir, "als");
                        await Nodefs.promises.mkdir(devAlsDir, {
                              recursive: true,
                              mode: 511
                            });
                        Nodefs.writeFileSync(alsExecutable, Buffer.from("mock executable"));
                        var globalStorageUri = Vscode.Uri.file(tempDir);
                        var result = await Connection__DevALS$AgdaModeVscode.alreadyDownloaded(globalStorageUri)();
                        Curry._3(Assert.deepStrictEqual, result, alsExecutable, undefined);
                        Nodefs.unlinkSync(alsExecutable);
                        Nodefs.rmdirSync(devAlsDir);
                        Nodefs.rmdirSync(tempDir);
                      }));
                it("should return None when dev-als directory exists but als executable missing", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "devals-test-noals-" + String(Date.now() | 0));
                        var devAlsDir = Nodepath.join(tempDir, "dev-als");
                        await Nodefs.promises.mkdir(devAlsDir, {
                              recursive: true,
                              mode: 511
                            });
                        var globalStorageUri = Vscode.Uri.file(tempDir);
                        var result = await Connection__DevALS$AgdaModeVscode.alreadyDownloaded(globalStorageUri)();
                        Curry._3(Assert.deepStrictEqual, result, undefined, undefined);
                        Nodefs.rmdirSync(devAlsDir);
                        Nodefs.rmdirSync(tempDir);
                      }));
                it("should return None when global storage exists but no dev-als directory", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "devals-test-nostorage-" + String(Date.now() | 0));
                        await Nodefs.promises.mkdir(tempDir, {
                              recursive: true,
                              mode: 511
                            });
                        var globalStorageUri = Vscode.Uri.file(tempDir);
                        var result = await Connection__DevALS$AgdaModeVscode.alreadyDownloaded(globalStorageUri)();
                        Curry._3(Assert.deepStrictEqual, result, undefined, undefined);
                        Nodefs.rmdirSync(tempDir);
                      }));
              }));
        describe("GitHub API integration", (function () {
                it("should fetch dev release from GitHub API", (async function () {
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-dev-als");
                        var releaseResult = await Connection__DevALS$AgdaModeVscode.getALSReleaseManifestWithoutCache(globalStorageUri);
                        if (releaseResult.TAG === "Ok") {
                          var devRelease = releaseResult._0.find(function (release) {
                                return release.tag_name === "dev";
                              });
                          if (devRelease !== undefined) {
                            return Curry._3(Assert.deepStrictEqual, devRelease.tag_name, "dev", undefined);
                          } else {
                            Assert.fail("Dev release not found");
                            return ;
                          }
                        }
                        Assert.fail("Failed to fetch releases: " + Connection__Download$AgdaModeVscode.$$Error.toString(releaseResult._0));
                      }));
              }));
        describe("getDownloadDescriptor integration", (function () {
                it("should fetch dev release spec from GitHub API", (async function () {
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-dev-als");
                        var result = await Connection__DevALS$AgdaModeVscode.getDownloadDescriptor(globalStorageUri, "Ubuntu");
                        if (result.TAG === "Ok") {
                          var downloadDescriptor = result._0;
                          Curry._3(Assert.deepStrictEqual, downloadDescriptor.release.tag_name, "dev", undefined);
                          Curry._3(Assert.deepStrictEqual, downloadDescriptor.saveAsFileName, "dev-als", undefined);
                          return Curry._3(Assert.deepStrictEqual, downloadDescriptor.asset.name, "als-dev-Agda-2.8.0-ubuntu.zip", undefined);
                        }
                        Assert.fail("Expected success but got error: " + Connection__Download$AgdaModeVscode.$$Error.toString(result._0));
                      }));
              }));
      }));

var GitHub;

exports.GitHub = GitHub;
/*  Not a pure module */
