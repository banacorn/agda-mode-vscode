// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Chan$AgdaModeVscode = require("../../../src/Util/Chan.bs.js");
var Config$AgdaModeVscode = require("../../../src/Config.bs.js");
var Desktop$AgdaModeVscode = require("../../../src/Main/Desktop.bs.js");
var Memento$AgdaModeVscode = require("../../../src/Memento.bs.js");
var Connection$AgdaModeVscode = require("../../../src/Connection/Connection.bs.js");
var Test__Util$AgdaModeVscode = require("../Test__Util.bs.js");

describe("Connection Config Path Management", (function () {
        var userAgda = {
          contents: ""
        };
        var systemAgda = {
          contents: ""
        };
        before(async function () {
              userAgda.contents = await Test__Util$AgdaModeVscode.Endpoint.Agda.mock("2.7.0.1", "agda-mock-user");
              systemAgda.contents = await Test__Util$AgdaModeVscode.Endpoint.Agda.mock("2.7.0.1", "agda-mock-system");
            });
        after(async function () {
              await Test__Util$AgdaModeVscode.Endpoint.Agda.destroy(userAgda.contents);
              return await Test__Util$AgdaModeVscode.Endpoint.Agda.destroy(systemAgda.contents);
            });
        var findCommand = function (_command, _timeoutOpt) {
          return Promise.resolve({
                      TAG: "Ok",
                      _0: systemAgda.contents
                    });
        };
        var platform_determinePlatform = Desktop$AgdaModeVscode.Desktop.determinePlatform;
        var platform_alreadyDownloaded = Desktop$AgdaModeVscode.Desktop.alreadyDownloaded;
        var platform_downloadLatestALS = Desktop$AgdaModeVscode.Desktop.downloadLatestALS;
        var platform_getInstalledEndpointsAndPersistThem = Desktop$AgdaModeVscode.Desktop.getInstalledEndpointsAndPersistThem;
        var platform_askUserAboutDownloadPolicy = Desktop$AgdaModeVscode.Desktop.askUserAboutDownloadPolicy;
        var platform = {
          determinePlatform: platform_determinePlatform,
          findCommand: findCommand,
          alreadyDownloaded: platform_alreadyDownloaded,
          downloadLatestALS: platform_downloadLatestALS,
          getInstalledEndpointsAndPersistThem: platform_getInstalledEndpointsAndPersistThem,
          askUserAboutDownloadPolicy: platform_askUserAboutDownloadPolicy
        };
        var makeConnection = async function (previouslySelectedPath) {
          var memento = Memento$AgdaModeVscode.make(undefined);
          if (previouslySelectedPath !== undefined) {
            await Memento$AgdaModeVscode.Module.PickedConnection.set(memento, previouslySelectedPath);
          }
          return await Connection$AgdaModeVscode.make(platform, memento, Vscode.Uri.file("/tmp/test"), Config$AgdaModeVscode.Connection.getAgdaPaths(), ["whatever"], Chan$AgdaModeVscode.make());
        };
        describe.only("User Configuration", (function () {
                it("should respect user's configuration when no paths were previously selected", (async function () {
                        var userConfig = [userAgda.contents];
                        await Config$AgdaModeVscode.Connection.setAgdaPaths(userConfig);
                        var result = await makeConnection(undefined);
                        var actualConfig = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        Curry._3(Assert.deepStrictEqual, actualConfig, userConfig, undefined);
                        if (result.TAG === "Ok") {
                          var actualPath = Connection$AgdaModeVscode.getPath(result._0);
                          var expectedPath = userAgda.contents;
                          return Curry._3(Assert.deepStrictEqual, actualPath, expectedPath, undefined);
                        }
                        Assert.fail("Connection should succeed with user-configured paths");
                      }));
                it("should respect user's configuration when a path has been previously selected", (async function () {
                        var userConfig = [userAgda.contents];
                        await Config$AgdaModeVscode.Connection.setAgdaPaths(userConfig);
                        var result = await makeConnection(userAgda.contents);
                        var actualConfig = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        Curry._3(Assert.deepStrictEqual, actualConfig, userConfig, undefined);
                        if (result.TAG === "Ok") {
                          var actualPath = Connection$AgdaModeVscode.getPath(result._0);
                          var expectedPath = userAgda.contents;
                          return Curry._3(Assert.deepStrictEqual, actualPath, expectedPath, undefined);
                        }
                        Assert.fail("Connection should succeed with user-configured paths");
                      }));
                it("should only add path when the users has not provided any paths", (async function () {
                        var userConfig = [];
                        await Config$AgdaModeVscode.Connection.setAgdaPaths(userConfig);
                        var result = await makeConnection(undefined);
                        var expectedConfig = [systemAgda.contents];
                        var actualConfig = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        Curry._3(Assert.deepStrictEqual, actualConfig, expectedConfig, undefined);
                        if (result.TAG === "Ok") {
                          var actualPath = Connection$AgdaModeVscode.getPath(result._0);
                          var expectedPath = systemAgda.contents;
                          return Curry._3(Assert.deepStrictEqual, actualPath, expectedPath, undefined);
                        }
                        Assert.fail("Connection should succeed with user-configured paths");
                      }));
              }));
        describe("Path Management Integrity", (function () {
                it("should prevent duplicate entries when paths already exist in user config", (async function () {
                        var existingPath = "/usr/bin/agda";
                        await Config$AgdaModeVscode.Connection.setAgdaPaths([existingPath]);
                        await Config$AgdaModeVscode.Connection.addAgdaPath(existingPath);
                        var pathsAfterDuplicateAdd = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        Curry._3(Assert.deepStrictEqual, pathsAfterDuplicateAdd, [existingPath], undefined);
                        return Curry._3(Assert.deepStrictEqual, pathsAfterDuplicateAdd.length, 1, undefined);
                      }));
                it("should preserve user-configured path order and priority", (async function () {
                        var userOrderedPaths = [
                          "/custom/agda",
                          "/usr/bin/agda",
                          "/opt/agda"
                        ];
                        await Config$AgdaModeVscode.Connection.setAgdaPaths(userOrderedPaths);
                        var actualPaths = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        Curry._3(Assert.deepStrictEqual, actualPaths, userOrderedPaths, undefined);
                        return Curry._3(Assert.deepStrictEqual, actualPaths[0], "/custom/agda", undefined);
                      }));
                it("should handle setAgdaPaths as complete replacement, not addition", (async function () {
                        await Config$AgdaModeVscode.Connection.setAgdaPaths([
                              "path1",
                              "path2"
                            ]);
                        var initialPaths = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        Curry._3(Assert.deepStrictEqual, initialPaths, [
                              "path1",
                              "path2"
                            ], undefined);
                        await Config$AgdaModeVscode.Connection.setAgdaPaths(["path3"]);
                        var replacedPaths = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        Curry._3(Assert.deepStrictEqual, replacedPaths, ["path3"], undefined);
                        return Curry._3(Assert.deepStrictEqual, replacedPaths.length, 1, undefined);
                      }));
              }));
        describe("Correct Auto-Discovery Behavior", (function () {
                it("should demonstrate proper conditional auto-discovery logic", (async function () {
                        await Config$AgdaModeVscode.Connection.setAgdaPaths(["user-configured-agda"]);
                        var userPaths = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        var hasUserConfig = userPaths.length > 0;
                        if (hasUserConfig) {
                          Curry._3(Assert.deepStrictEqual, userPaths, ["user-configured-agda"], undefined);
                        }
                        await Config$AgdaModeVscode.Connection.setAgdaPaths([]);
                        var emptyPaths = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        var shouldAutoDiscover = emptyPaths.length === 0;
                        if (!shouldAutoDiscover) {
                          return ;
                        }
                        await Config$AgdaModeVscode.Connection.addAgdaPath("/discovered/agda");
                        var discoveredPaths = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        return Curry._3(Assert.deepStrictEqual, discoveredPaths, ["/discovered/agda"], undefined);
                      }));
                it("should verify addAgdaPath idempotency works correctly", (async function () {
                        await Config$AgdaModeVscode.Connection.setAgdaPaths([]);
                        await Config$AgdaModeVscode.Connection.addAgdaPath("/some/path");
                        await Config$AgdaModeVscode.Connection.addAgdaPath("/some/path");
                        await Config$AgdaModeVscode.Connection.addAgdaPath("/some/path");
                        var paths = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        Curry._3(Assert.deepStrictEqual, paths, ["/some/path"], undefined);
                        return Curry._3(Assert.deepStrictEqual, paths.length, 1, undefined);
                      }));
              }));
        describe("Configuration State Management", (function () {
                it("should maintain configuration integrity across multiple operations", (async function () {
                        await Config$AgdaModeVscode.Connection.setAgdaPaths([]);
                        Curry._3(Assert.deepStrictEqual, Config$AgdaModeVscode.Connection.getAgdaPaths(), [], undefined);
                        await Config$AgdaModeVscode.Connection.setAgdaPaths(["agda-user"]);
                        Curry._3(Assert.deepStrictEqual, Config$AgdaModeVscode.Connection.getAgdaPaths(), ["agda-user"], undefined);
                        await Config$AgdaModeVscode.Connection.addAgdaPath("agda-user");
                        Curry._3(Assert.deepStrictEqual, Config$AgdaModeVscode.Connection.getAgdaPaths(), ["agda-user"], undefined);
                        await Config$AgdaModeVscode.Connection.addAgdaPath("agda-system");
                        Curry._3(Assert.deepStrictEqual, Config$AgdaModeVscode.Connection.getAgdaPaths(), [
                              "agda-user",
                              "agda-system"
                            ], undefined);
                        await Config$AgdaModeVscode.Connection.setAgdaPaths(["agda-new"]);
                        return Curry._3(Assert.deepStrictEqual, Config$AgdaModeVscode.Connection.getAgdaPaths(), ["agda-new"], undefined);
                      }));
                it("should handle empty and invalid configurations gracefully", (async function () {
                        await Config$AgdaModeVscode.Connection.setAgdaPaths([]);
                        Curry._3(Assert.deepStrictEqual, Config$AgdaModeVscode.Connection.getAgdaPaths(), [], undefined);
                        await Config$AgdaModeVscode.Connection.setAgdaPaths([""]);
                        Curry._3(Assert.deepStrictEqual, Config$AgdaModeVscode.Connection.getAgdaPaths(), [""], undefined);
                        await Config$AgdaModeVscode.Connection.setAgdaPaths([
                              "",
                              "agda",
                              ""
                            ]);
                        return Curry._3(Assert.deepStrictEqual, Config$AgdaModeVscode.Connection.getAgdaPaths(), [
                                    "",
                                    "agda",
                                    ""
                                  ], undefined);
                      }));
              }));
        after(async function () {
              return await Config$AgdaModeVscode.Connection.setAgdaPaths([]);
            });
      }));

/*  Not a pure module */
