// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Log$AgdaModeVscode = require("../../../src/State/Log.bs.js");
var Chan$AgdaModeVscode = require("../../../src/Util/Chan.bs.js");
var Config$AgdaModeVscode = require("../../../src/Config.bs.js");
var Desktop$AgdaModeVscode = require("../../../src/Main/Desktop.bs.js");
var Memento$AgdaModeVscode = require("../../../src/Memento.bs.js");
var Connection$AgdaModeVscode = require("../../../src/Connection/Connection.bs.js");
var Test__Util$AgdaModeVscode = require("../Test__Util.bs.js");

describe("Connection Config Path Management", (function () {
        var userAgda = {
          contents: ""
        };
        var systemAgda = {
          contents: ""
        };
        var logChannel = Chan$AgdaModeVscode.make();
        before(async function () {
              userAgda.contents = await Test__Util$AgdaModeVscode.Endpoint.Agda.mock("2.7.0.1", "agda-mock-user");
              systemAgda.contents = await Test__Util$AgdaModeVscode.Endpoint.Agda.mock("2.7.0.1", "agda-mock-system");
            });
        after(async function () {
              await Test__Util$AgdaModeVscode.Endpoint.Agda.destroy(userAgda.contents);
              return await Test__Util$AgdaModeVscode.Endpoint.Agda.destroy(systemAgda.contents);
            });
        var findCommand = function (_command, _timeoutOpt) {
          return Promise.resolve({
                      TAG: "Ok",
                      _0: systemAgda.contents
                    });
        };
        var platform_determinePlatform = Desktop$AgdaModeVscode.Desktop.determinePlatform;
        var platform_alreadyDownloaded = Desktop$AgdaModeVscode.Desktop.alreadyDownloaded;
        var platform_downloadLatestALS = Desktop$AgdaModeVscode.Desktop.downloadLatestALS;
        var platform_getInstalledEndpointsAndPersistThem = Desktop$AgdaModeVscode.Desktop.getInstalledEndpointsAndPersistThem;
        var platform_askUserAboutDownloadPolicy = Desktop$AgdaModeVscode.Desktop.askUserAboutDownloadPolicy;
        var platform = {
          determinePlatform: platform_determinePlatform,
          findCommand: findCommand,
          alreadyDownloaded: platform_alreadyDownloaded,
          downloadLatestALS: platform_downloadLatestALS,
          getInstalledEndpointsAndPersistThem: platform_getInstalledEndpointsAndPersistThem,
          askUserAboutDownloadPolicy: platform_askUserAboutDownloadPolicy
        };
        var makeConnection = async function (previouslySelectedPath) {
          var memento = Memento$AgdaModeVscode.make(undefined);
          if (previouslySelectedPath !== undefined) {
            await Memento$AgdaModeVscode.Module.PickedConnection.set(memento, previouslySelectedPath);
          }
          return await Connection$AgdaModeVscode.make(platform, memento, Vscode.Uri.file("/tmp/test"), Config$AgdaModeVscode.Connection.getAgdaPaths(), ["whatever"], logChannel);
        };
        describe("User Configuration", (function () {
                it("should respect user's configuration when no paths were previously selected", (async function () {
                        var userConfig = [userAgda.contents];
                        await Config$AgdaModeVscode.Connection.setAgdaPaths(logChannel, userConfig);
                        var listener = Log$AgdaModeVscode.collect(logChannel);
                        var result = await makeConnection(undefined);
                        var logs = listener(Log$AgdaModeVscode.isConfig);
                        Curry._3(Assert.deepStrictEqual, logs, [], undefined);
                        var actualConfig = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        Curry._3(Assert.deepStrictEqual, actualConfig, userConfig, undefined);
                        if (result.TAG === "Ok") {
                          var actualPath = Connection$AgdaModeVscode.getPath(result._0);
                          var expectedPath = userAgda.contents;
                          return Curry._3(Assert.deepStrictEqual, actualPath, expectedPath, undefined);
                        }
                        Assert.fail("Connection should succeed with user-configured paths");
                      }));
                it("should respect user's configuration when a path has been previously selected", (async function () {
                        var userConfig = [userAgda.contents];
                        await Config$AgdaModeVscode.Connection.setAgdaPaths(logChannel, userConfig);
                        var listener = Log$AgdaModeVscode.collect(logChannel);
                        var result = await makeConnection(userAgda.contents);
                        var logs = listener(Log$AgdaModeVscode.isConfig);
                        Curry._3(Assert.deepStrictEqual, logs, [], undefined);
                        var actualConfig = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        Curry._3(Assert.deepStrictEqual, actualConfig, userConfig, undefined);
                        if (result.TAG === "Ok") {
                          var actualPath = Connection$AgdaModeVscode.getPath(result._0);
                          var expectedPath = userAgda.contents;
                          return Curry._3(Assert.deepStrictEqual, actualPath, expectedPath, undefined);
                        }
                        Assert.fail("Connection should succeed with user-configured paths");
                      }));
                it("should update previously selected path when it doesn't exist in user config but user config works", (async function () {
                        var userConfig = [userAgda.contents];
                        await Config$AgdaModeVscode.Connection.setAgdaPaths(logChannel, userConfig);
                        var listener = Log$AgdaModeVscode.collect(logChannel);
                        var result = await makeConnection(systemAgda.contents);
                        var logs = listener(Log$AgdaModeVscode.isConfig);
                        Curry._3(Assert.deepStrictEqual, logs, [], undefined);
                        var expectedConfig = [userAgda.contents];
                        var actualConfig = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        Curry._3(Assert.deepStrictEqual, actualConfig, expectedConfig, undefined);
                        if (result.TAG === "Ok") {
                          var actualPath = Connection$AgdaModeVscode.getPath(result._0);
                          var expectedPath = userAgda.contents;
                          return Curry._3(Assert.deepStrictEqual, actualPath, expectedPath, undefined);
                        }
                        Assert.fail("Connection should succeed with user-configured paths");
                      }));
                it("should add working fallback path when user config contains broken path", (async function () {
                        var brokenPath = "/broken/agda";
                        var userConfig = [brokenPath];
                        await Config$AgdaModeVscode.Connection.setAgdaPaths(logChannel, userConfig);
                        var listener = Log$AgdaModeVscode.collect(logChannel);
                        var result = await makeConnection(undefined);
                        var logs = listener(Log$AgdaModeVscode.isConfig);
                        var tmp;
                        tmp = result.TAG === "Ok" ? "Ok" : "Error";
                        console.log("DEBUG: Connection result = " + tmp);
                        console.log("DEBUG: Config logs length = " + logs.length.toString());
                        if (result.TAG === "Ok") {
                          var actualPath = Connection$AgdaModeVscode.getPath(result._0);
                          console.log("DEBUG: actualPath = " + actualPath + ", systemAgda = " + systemAgda.contents);
                          if (actualPath === systemAgda.contents) {
                            Curry._3(Assert.deepStrictEqual, logs, [{
                                    TAG: "Config",
                                    _0: {
                                      TAG: "Changed",
                                      _0: userConfig,
                                      _1: [
                                        brokenPath,
                                        systemAgda.contents
                                      ]
                                    }
                                  }], undefined);
                            var expectedConfig = [
                              brokenPath,
                              systemAgda.contents
                            ];
                            var actualConfig = Config$AgdaModeVscode.Connection.getAgdaPaths();
                            Curry._3(Assert.deepStrictEqual, actualConfig, expectedConfig, undefined);
                            return Curry._3(Assert.deepStrictEqual, actualPath, systemAgda.contents, undefined);
                          }
                          console.log("DEBUG: Connection succeeded with broken path instead of falling back");
                          Assert.fail("Expected connection to fail with broken path and fallback to system path, but it succeeded with " + actualPath);
                          return ;
                        }
                        console.log("DEBUG: Connection failed completely - no fallback occurred");
                        Assert.fail("Connection should succeed with fallback to system path");
                      }));
                it("should only add path when the users has not provided any paths", (async function () {
                        var userConfig = [];
                        await Config$AgdaModeVscode.Connection.setAgdaPaths(logChannel, userConfig);
                        var listener = Log$AgdaModeVscode.collect(logChannel);
                        var result = await makeConnection(undefined);
                        var logs = listener(Log$AgdaModeVscode.isConfig);
                        Curry._3(Assert.deepStrictEqual, logs, [{
                                TAG: "Config",
                                _0: {
                                  TAG: "Changed",
                                  _0: [],
                                  _1: [systemAgda.contents]
                                }
                              }], undefined);
                        var expectedConfig = [systemAgda.contents];
                        var actualConfig = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        Curry._3(Assert.deepStrictEqual, actualConfig, expectedConfig, undefined);
                        if (result.TAG === "Ok") {
                          var actualPath = Connection$AgdaModeVscode.getPath(result._0);
                          var expectedPath = systemAgda.contents;
                          return Curry._3(Assert.deepStrictEqual, actualPath, expectedPath, undefined);
                        }
                        Assert.fail("Connection should succeed with user-configured paths");
                      }));
              }));
      }));

/*  Not a pure module */
