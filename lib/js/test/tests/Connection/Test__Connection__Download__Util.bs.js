// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Nodefs = require("node:fs");
var Nodeos = require("node:os");
var Nodepath = require("node:path");
var Connection__Download__Util$AgdaModeVscode = require("../../../src/Connection/Download/Connection__Download__Util.bs.js");

describe("Connection__Download__Util", (function () {
        this.timeout(10000);
        describe("Error.toString", (function () {
                it("should format ServerResponseError correctly", (async function () {
                        var exn = (new Error("Network failed"));
                        var error = {
                          TAG: "ServerResponseError",
                          _0: exn
                        };
                        var errorString = Connection__Download__Util$AgdaModeVscode.$$Error.toString(error);
                        Assert.ok(errorString.length > 0);
                      }));
                it("should format NoRedirectLocation correctly", (async function () {
                        var errorString = Connection__Download__Util$AgdaModeVscode.$$Error.toString("NoRedirectLocation");
                        return Curry._3(Assert.equal, errorString, "Got HTTP 301/302 from GitHub without location in headers", undefined);
                      }));
                it("should format Timeout correctly", (async function () {
                        var errorString = Connection__Download__Util$AgdaModeVscode.$$Error.toString({
                              TAG: "Timeout",
                              _0: 5000
                            });
                        return Curry._3(Assert.equal, errorString, "Timeout after 5000ms. Please check your internet connection", undefined);
                      }));
                it("should format JsonParseError correctly", (async function () {
                        var errorString = Connection__Download__Util$AgdaModeVscode.$$Error.toString({
                              TAG: "JsonParseError",
                              _0: "invalid json content"
                            });
                        return Curry._3(Assert.equal, errorString, "Cannot parse downloaded file as JSON:\ninvalid json content", undefined);
                      }));
                it("should format CannotWriteFile correctly", (async function () {
                        var exn = (new Error("Permission denied"));
                        var error = {
                          TAG: "CannotWriteFile",
                          _0: exn
                        };
                        var errorString = Connection__Download__Util$AgdaModeVscode.$$Error.toString(error);
                        Assert.ok(errorString.length > 0);
                      }));
              }));
        describe("Event.toString", (function () {
                it("should format Start event correctly", (async function () {
                        var eventString = Connection__Download__Util$AgdaModeVscode.$$Event.toString("Start");
                        return Curry._3(Assert.equal, eventString, "Starting", undefined);
                      }));
                it("should format Progress event correctly for small files", (async function () {
                        var eventString = Connection__Download__Util$AgdaModeVscode.$$Event.toString({
                              TAG: "Progress",
                              _0: 512000,
                              _1: 1024000
                            });
                        return Curry._3(Assert.equal, eventString, "500 KB / 1000 MB", undefined);
                      }));
                it("should format Progress event correctly for large files", (async function () {
                        var eventString = Connection__Download__Util$AgdaModeVscode.$$Event.toString({
                              TAG: "Progress",
                              _0: 52428800,
                              _1: 104857600
                            });
                        return Curry._3(Assert.equal, eventString, "50 MB / 100 MB", undefined);
                      }));
                it("should format Finish event correctly", (async function () {
                        var eventString = Connection__Download__Util$AgdaModeVscode.$$Event.toString("Finish");
                        return Curry._3(Assert.equal, eventString, "Done", undefined);
                      }));
              }));
        describe("timeoutAfter", (function () {
                it("should resolve normally if promise completes within timeout", (async function () {
                        var fastPromise = new Promise((function (resolve, param) {
                                setTimeout((function () {
                                        resolve({
                                              TAG: "Ok",
                                              _0: "success"
                                            });
                                      }), 100);
                              }));
                        var result = await Connection__Download__Util$AgdaModeVscode.timeoutAfter(fastPromise, 1000);
                        if (result.TAG === "Ok") {
                          return Curry._3(Assert.equal, result._0, "success", undefined);
                        }
                        Assert.fail("Expected success, got error: " + Connection__Download__Util$AgdaModeVscode.$$Error.toString(result._0));
                      }));
                it("should timeout if promise takes too long", (async function () {
                        var slowPromise = new Promise((function (resolve, param) {
                                setTimeout((function () {
                                        resolve({
                                              TAG: "Ok",
                                              _0: "success"
                                            });
                                      }), 2000);
                              }));
                        var result = await Connection__Download__Util$AgdaModeVscode.timeoutAfter(slowPromise, 500);
                        if (result.TAG === "Ok") {
                          Assert.fail("Expected timeout error, got success");
                          return ;
                        }
                        var error = result._0;
                        if (typeof error === "object" && error.TAG === "Timeout") {
                          return Curry._3(Assert.equal, error._0, 500, undefined);
                        }
                        Assert.fail("Expected Timeout error, got: " + Connection__Download__Util$AgdaModeVscode.$$Error.toString(error));
                      }));
              }));
        describe("asJson (integration)", (function () {
                it("should successfully parse valid JSON response", (async function () {
                        var testOptions = {
                          headers: {
                            "User-Agent": "agda-mode-vscode-test"
                          },
                          host: "httpbin.org",
                          path: "/json"
                        };
                        var timedResult = await Connection__Download__Util$AgdaModeVscode.timeoutAfter(Connection__Download__Util$AgdaModeVscode.asJson(testOptions), 5000);
                        if (timedResult.TAG === "Ok") {
                          Assert.ok(typeof timedResult._0 === "object");
                          return ;
                        }
                        console.warn("Network test failed (this may be expected): " + Connection__Download__Util$AgdaModeVscode.$$Error.toString(timedResult._0));
                        Assert.ok(true);
                      }));
                it("should handle invalid JSON gracefully", (async function () {
                        var testOptions = {
                          headers: {
                            "User-Agent": "agda-mode-vscode-test"
                          },
                          host: "httpbin.org",
                          path: "/html"
                        };
                        var timedResult = await Connection__Download__Util$AgdaModeVscode.timeoutAfter(Connection__Download__Util$AgdaModeVscode.asJson(testOptions), 5000);
                        if (timedResult.TAG === "Ok") {
                          Assert.fail("Expected JSON parse error, got success");
                          return ;
                        }
                        var error = timedResult._0;
                        if (typeof error === "object") {
                          switch (error.TAG) {
                            case "Timeout" :
                                console.warn("Network test timed out (this may be expected)");
                                Assert.ok(true);
                                return ;
                            case "JsonParseError" :
                                Assert.ok(true);
                                return ;
                            default:
                              
                          }
                        }
                        console.warn("Got network error instead of JSON parse error: " + Connection__Download__Util$AgdaModeVscode.$$Error.toString(error));
                        Assert.ok(true);
                      }));
              }));
        describe("asFile (integration)", (function () {
                it("should successfully download and save small file", (async function () {
                        var smallHttpOptions = {
                          headers: {
                            "User-Agent": "agda-mode-vscode-test"
                          },
                          host: "httpbin.org",
                          path: "/bytes/10"
                        };
                        var tempFile = Nodepath.join(Nodeos.tmpdir(), "agda-download-test-" + String(Date.now() | 0) + ".bin");
                        var destUri = Vscode.Uri.file(tempFile);
                        var events = {
                          contents: []
                        };
                        var onDownload = function ($$event) {
                          events.contents = events.contents.concat([$$event]);
                        };
                        var timedResult = await Connection__Download__Util$AgdaModeVscode.timeoutAfter(Connection__Download__Util$AgdaModeVscode.asFile(smallHttpOptions, destUri, onDownload), 3000);
                        if (timedResult.TAG === "Ok") {
                          Assert.ok(Nodefs.existsSync(tempFile));
                          var content = Nodefs.readFileSync(tempFile);
                          Assert.ok(content.length > 0);
                          var hasStart = events.contents.some(function ($$event) {
                                if (typeof $$event !== "object" && $$event === "Start") {
                                  return true;
                                } else {
                                  return false;
                                }
                              });
                          var hasFinish = events.contents.some(function ($$event) {
                                if (typeof $$event !== "object" && $$event !== "Start") {
                                  return true;
                                } else {
                                  return false;
                                }
                              });
                          Assert.ok(hasStart);
                          Assert.ok(hasFinish);
                          Nodefs.unlinkSync(tempFile);
                          return ;
                        }
                        var error = timedResult._0;
                        var exit = 0;
                        if (typeof error !== "object" || error.TAG !== "Timeout") {
                          exit = 1;
                        } else {
                          console.warn("Network test timed out (this may be expected)");
                        }
                        if (exit === 1) {
                          console.warn("Network test failed (this may be expected): " + Connection__Download__Util$AgdaModeVscode.$$Error.toString(error));
                        }
                        Assert.ok(true);
                      }));
              }));
      }));

var Util;

exports.Util = Util;
/*  Not a pure module */
