// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Chan$AgdaModeVscode = require("../../../src/Util/Chan.bs.js");
var Config$AgdaModeVscode = require("../../../src/Config.bs.js");
var Desktop$AgdaModeVscode = require("../../../src/Main/Desktop.bs.js");
var Memento$AgdaModeVscode = require("../../../src/Memento.bs.js");
var Connection$AgdaModeVscode = require("../../../src/Connection/Connection.bs.js");
var Test__Util$AgdaModeVscode = require("../Test__Util.bs.js");

describe("Memento.PickedConnection", (function () {
        var userAgda = {
          contents: ""
        };
        var systemAgda = {
          contents: ""
        };
        var alternativeAgda = {
          contents: ""
        };
        var logChannel = Chan$AgdaModeVscode.make();
        before(async function () {
              userAgda.contents = await Test__Util$AgdaModeVscode.Endpoint.Agda.mock("2.7.0.1", "agda-mock-user");
              systemAgda.contents = await Test__Util$AgdaModeVscode.Endpoint.Agda.mock("2.7.0.1", "agda-mock-system");
              alternativeAgda.contents = await Test__Util$AgdaModeVscode.Endpoint.Agda.mock("2.7.0.1", "agda-mock-alt");
            });
        after(async function () {
              await Test__Util$AgdaModeVscode.Endpoint.Agda.destroy(userAgda.contents);
              await Test__Util$AgdaModeVscode.Endpoint.Agda.destroy(systemAgda.contents);
              return await Test__Util$AgdaModeVscode.Endpoint.Agda.destroy(alternativeAgda.contents);
            });
        var findCommand = function (_command, _timeoutOpt) {
          return Promise.resolve({
                      TAG: "Ok",
                      _0: systemAgda.contents
                    });
        };
        var platform_determinePlatform = Desktop$AgdaModeVscode.Desktop.determinePlatform;
        var platform_alreadyDownloaded = Desktop$AgdaModeVscode.Desktop.alreadyDownloaded;
        var platform_downloadLatestALS = Desktop$AgdaModeVscode.Desktop.downloadLatestALS;
        var platform_getDownloadDescriptorOfDevALS = Desktop$AgdaModeVscode.Desktop.getDownloadDescriptorOfDevALS;
        var platform_getDownloadDescriptorOfLatestALS = Desktop$AgdaModeVscode.Desktop.getDownloadDescriptorOfLatestALS;
        var platform_download = Desktop$AgdaModeVscode.Desktop.download;
        var platform_askUserAboutDownloadPolicy = Desktop$AgdaModeVscode.Desktop.askUserAboutDownloadPolicy;
        var platform_openFolder = Desktop$AgdaModeVscode.Desktop.openFolder;
        var platform = {
          determinePlatform: platform_determinePlatform,
          findCommand: findCommand,
          alreadyDownloaded: platform_alreadyDownloaded,
          downloadLatestALS: platform_downloadLatestALS,
          getDownloadDescriptorOfDevALS: platform_getDownloadDescriptorOfDevALS,
          getDownloadDescriptorOfLatestALS: platform_getDownloadDescriptorOfLatestALS,
          download: platform_download,
          askUserAboutDownloadPolicy: platform_askUserAboutDownloadPolicy,
          openFolder: platform_openFolder
        };
        var makeConnection = async function (previouslySelectedPath, configPaths) {
          var memento = Memento$AgdaModeVscode.make(undefined);
          if (previouslySelectedPath !== undefined) {
            await Memento$AgdaModeVscode.Module.PickedConnection.set(memento, previouslySelectedPath);
          }
          await Config$AgdaModeVscode.Connection.setAgdaPaths(logChannel, configPaths);
          return await Connection$AgdaModeVscode.makeWithFallback(platform, memento, Vscode.Uri.file("/tmp/test"), configPaths, ["whatever"], logChannel);
        };
        describe("Memento path exists in config", (function () {
                it("should prioritize memento path over other config paths", (async function () {
                        var configPaths = [
                          alternativeAgda.contents,
                          userAgda.contents
                        ];
                        var result = await makeConnection(userAgda.contents, configPaths);
                        if (result.TAG === "Ok") {
                          var actualPath = Connection$AgdaModeVscode.getPath(result._0);
                          return Curry._3(Assert.deepStrictEqual, actualPath, userAgda.contents, undefined);
                        }
                        Assert.fail("Connection should succeed");
                      }));
              }));
        describe("Memento path not in config", (function () {
                it("should ignore memento and use config as-is", (async function () {
                        var configPaths = [userAgda.contents];
                        var result = await makeConnection(systemAgda.contents, configPaths);
                        if (result.TAG === "Ok") {
                          var actualPath = Connection$AgdaModeVscode.getPath(result._0);
                          return Curry._3(Assert.deepStrictEqual, actualPath, userAgda.contents, undefined);
                        }
                        Assert.fail("Connection should succeed");
                      }));
              }));
        describe("Memento always updated", (function () {
                it("should set memento to working connection path from config", (async function () {
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        await Config$AgdaModeVscode.Connection.setAgdaPaths(logChannel, [userAgda.contents]);
                        var result = await Connection$AgdaModeVscode.makeWithFallback(platform, memento, Vscode.Uri.file("/tmp/test"), [userAgda.contents], ["whatever"], logChannel);
                        if (result.TAG === "Ok") {
                          var actualPath = Connection$AgdaModeVscode.getPath(result._0);
                          var mementoPath = Memento$AgdaModeVscode.Module.PickedConnection.get(memento);
                          Curry._3(Assert.deepStrictEqual, actualPath, userAgda.contents, undefined);
                          return Curry._3(Assert.deepStrictEqual, mementoPath, userAgda.contents, undefined);
                        }
                        Assert.fail("Connection should succeed");
                      }));
                it("should set memento to working connection path from auto discovery", (async function () {
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        await Config$AgdaModeVscode.Connection.setAgdaPaths(logChannel, []);
                        var result = await Connection$AgdaModeVscode.makeWithFallback(platform, memento, Vscode.Uri.file("/tmp/test"), [], ["whatever"], logChannel);
                        if (result.TAG === "Ok") {
                          var actualPath = Connection$AgdaModeVscode.getPath(result._0);
                          var mementoPath = Memento$AgdaModeVscode.Module.PickedConnection.get(memento);
                          Curry._3(Assert.deepStrictEqual, actualPath, systemAgda.contents, undefined);
                          return Curry._3(Assert.deepStrictEqual, mementoPath, systemAgda.contents, undefined);
                        }
                        Assert.fail("Connection should succeed");
                      }));
              }));
      }));

/*  Not a pure module */
