// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Nodefs = require("node:fs");
var Nodeos = require("node:os");
var Nodepath = require("node:path");
var Memento$AgdaModeVscode = require("../../../src/Memento.bs.js");
var Connection__Download$AgdaModeVscode = require("../../../src/Connection/Download/Connection__Download.bs.js");
var Connection__LatestALS$AgdaModeVscode = require("../../../src/Connection/Download/Connection__LatestALS.bs.js");
var Connection__Download__GitHub$AgdaModeVscode = require("../../../src/Connection/Download/Connection__Download__GitHub.bs.js");

describe("Download", (function () {
        this.timeout(10000);
        describe("alreadyDownloaded", (function () {
                it("should return None when dev ALS not downloaded", (async function () {
                        var nonExistentDir = Nodepath.join(Nodeos.tmpdir(), "devals-test-nonexistent-" + String(Date.now() | 0));
                        var globalStorageUri = Vscode.Uri.file(nonExistentDir);
                        var result = await Connection__Download$AgdaModeVscode.alreadyDownloaded(globalStorageUri, "DevALS");
                        return Curry._3(Assert.deepStrictEqual, result, undefined, undefined);
                      }));
                it("should return Some(path) when dev ALS executable exists", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "devals-test-exists-" + String(Date.now() | 0));
                        var devAlsDir = Nodepath.join(tempDir, "dev-als");
                        var alsExecutable = Nodepath.join(devAlsDir, "als");
                        await Nodefs.promises.mkdir(devAlsDir, {
                              recursive: true,
                              mode: 511
                            });
                        Nodefs.writeFileSync(alsExecutable, Buffer.from("mock executable"));
                        var globalStorageUri = Vscode.Uri.file(tempDir);
                        var result = await Connection__Download$AgdaModeVscode.alreadyDownloaded(globalStorageUri, "DevALS");
                        Curry._3(Assert.deepStrictEqual, result, Vscode.Uri.file(alsExecutable).fsPath, undefined);
                        Nodefs.unlinkSync(alsExecutable);
                        Nodefs.rmdirSync(devAlsDir);
                        Nodefs.rmdirSync(tempDir);
                      }));
                it("should return None when dev-als directory exists but als executable missing", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "devals-test-noals-" + String(Date.now() | 0));
                        var devAlsDir = Nodepath.join(tempDir, "dev-als");
                        await Nodefs.promises.mkdir(devAlsDir, {
                              recursive: true,
                              mode: 511
                            });
                        var globalStorageUri = Vscode.Uri.file(tempDir);
                        var result = await Connection__Download$AgdaModeVscode.alreadyDownloaded(globalStorageUri, "DevALS");
                        Curry._3(Assert.deepStrictEqual, result, undefined, undefined);
                        Nodefs.rmdirSync(devAlsDir);
                        Nodefs.rmdirSync(tempDir);
                      }));
                it("should return None when global storage exists but no dev-als directory", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "devals-test-nostorage-" + String(Date.now() | 0));
                        await Nodefs.promises.mkdir(tempDir, {
                              recursive: true,
                              mode: 511
                            });
                        var globalStorageUri = Vscode.Uri.file(tempDir);
                        var result = await Connection__Download$AgdaModeVscode.alreadyDownloaded(globalStorageUri, "DevALS");
                        Curry._3(Assert.deepStrictEqual, result, undefined, undefined);
                        Nodefs.rmdirSync(tempDir);
                      }));
              }));
        describe("isDownloading", (function () {
                it("should return false and create directory when global storage directory doesn't exist", (async function () {
                        var nonExistentDir = Nodepath.join(Nodeos.tmpdir(), "agda-isdownloading-test-" + String(Date.now() | 0));
                        Assert.ok(!Nodefs.existsSync(nonExistentDir));
                        var globalStorageUri = Vscode.Uri.file(nonExistentDir);
                        var result = await Connection__Download__GitHub$AgdaModeVscode.isDownloading(globalStorageUri);
                        Assert.ok(!result);
                        Assert.ok(Nodefs.existsSync(nonExistentDir));
                        Nodefs.rmdirSync(nonExistentDir);
                      }));
                it("should return false when directory exists but no in-flight download file is present", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "agda-isdownloading-exists-" + String(Date.now() | 0));
                        await Nodefs.promises.mkdir(tempDir, {
                              recursive: true,
                              mode: 511
                            });
                        Assert.ok(Nodefs.existsSync(tempDir));
                        var inFlightFile = Nodepath.join(tempDir, "in-flight.download");
                        Assert.ok(!Nodefs.existsSync(inFlightFile));
                        var globalStorageUri = Vscode.Uri.file(tempDir);
                        var result = await Connection__Download__GitHub$AgdaModeVscode.isDownloading(globalStorageUri);
                        Assert.ok(!result);
                        Nodefs.rmdirSync(tempDir);
                      }));
                it("should return true when in-flight download file exists", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "agda-isdownloading-inflight-" + String(Date.now() | 0));
                        var inFlightFile = Nodepath.join(tempDir, "in-flight.download");
                        await Nodefs.promises.mkdir(tempDir, {
                              recursive: true,
                              mode: 511
                            });
                        Nodefs.writeFileSync(inFlightFile, Buffer.from("downloading..."));
                        Assert.ok(Nodefs.existsSync(tempDir));
                        Assert.ok(Nodefs.existsSync(inFlightFile));
                        var globalStorageUri = Vscode.Uri.file(tempDir);
                        var result = await Connection__Download__GitHub$AgdaModeVscode.isDownloading(globalStorageUri);
                        Assert.ok(result);
                        Nodefs.unlinkSync(inFlightFile);
                        Nodefs.rmdirSync(tempDir);
                      }));
                it("should return false when directory exists with other files but no in-flight download file", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "agda-isdownloading-otherfiles-" + String(Date.now() | 0));
                        var otherFile = Nodepath.join(tempDir, "some-other-file.txt");
                        var inFlightFile = Nodepath.join(tempDir, "in-flight.download");
                        await Nodefs.promises.mkdir(tempDir, {
                              recursive: true,
                              mode: 511
                            });
                        Nodefs.writeFileSync(otherFile, Buffer.from("other content"));
                        Assert.ok(Nodefs.existsSync(tempDir));
                        Assert.ok(Nodefs.existsSync(otherFile));
                        Assert.ok(!Nodefs.existsSync(inFlightFile));
                        var globalStorageUri = Vscode.Uri.file(tempDir);
                        var result = await Connection__Download__GitHub$AgdaModeVscode.isDownloading(globalStorageUri);
                        Assert.ok(!result);
                        Nodefs.unlinkSync(otherFile);
                        Nodefs.rmdirSync(tempDir);
                      }));
                it("should handle multiple calls consistently when no download is in progress", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "agda-isdownloading-multiple-" + String(Date.now() | 0));
                        await Nodefs.promises.mkdir(tempDir, {
                              recursive: true,
                              mode: 511
                            });
                        var globalStorageUri = Vscode.Uri.file(tempDir);
                        var result1 = await Connection__Download__GitHub$AgdaModeVscode.isDownloading(globalStorageUri);
                        var result2 = await Connection__Download__GitHub$AgdaModeVscode.isDownloading(globalStorageUri);
                        var result3 = await Connection__Download__GitHub$AgdaModeVscode.isDownloading(globalStorageUri);
                        Assert.ok(!result1);
                        Assert.ok(!result2);
                        Assert.ok(!result3);
                        Nodefs.rmdirSync(tempDir);
                      }));
                it("should handle multiple calls consistently when download is in progress", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "agda-isdownloading-multiple-progress-" + String(Date.now() | 0));
                        var inFlightFile = Nodepath.join(tempDir, "in-flight.download");
                        await Nodefs.promises.mkdir(tempDir, {
                              recursive: true,
                              mode: 511
                            });
                        Nodefs.writeFileSync(inFlightFile, Buffer.from("downloading..."));
                        var globalStorageUri = Vscode.Uri.file(tempDir);
                        var result1 = await Connection__Download__GitHub$AgdaModeVscode.isDownloading(globalStorageUri);
                        var result2 = await Connection__Download__GitHub$AgdaModeVscode.isDownloading(globalStorageUri);
                        var result3 = await Connection__Download__GitHub$AgdaModeVscode.isDownloading(globalStorageUri);
                        Assert.ok(result1);
                        Assert.ok(result2);
                        Assert.ok(result3);
                        Nodefs.unlinkSync(inFlightFile);
                        Nodefs.rmdirSync(tempDir);
                      }));
                it("should transition from not downloading to downloading when in-flight file is created", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "agda-isdownloading-transition-" + String(Date.now() | 0));
                        var inFlightFile = Nodepath.join(tempDir, "in-flight.download");
                        await Nodefs.promises.mkdir(tempDir, {
                              recursive: true,
                              mode: 511
                            });
                        var globalStorageUri = Vscode.Uri.file(tempDir);
                        var result1 = await Connection__Download__GitHub$AgdaModeVscode.isDownloading(globalStorageUri);
                        Assert.ok(!result1);
                        Nodefs.writeFileSync(inFlightFile, Buffer.from("downloading..."));
                        var result2 = await Connection__Download__GitHub$AgdaModeVscode.isDownloading(globalStorageUri);
                        Assert.ok(result2);
                        Nodefs.unlinkSync(inFlightFile);
                        var result3 = await Connection__Download__GitHub$AgdaModeVscode.isDownloading(globalStorageUri);
                        Assert.ok(!result3);
                        Nodefs.rmdirSync(tempDir);
                      }));
                it("should handle edge case with empty in-flight file", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "agda-isdownloading-empty-" + String(Date.now() | 0));
                        var inFlightFile = Nodepath.join(tempDir, "in-flight.download");
                        await Nodefs.promises.mkdir(tempDir, {
                              recursive: true,
                              mode: 511
                            });
                        Nodefs.writeFileSync(inFlightFile, Buffer.from(""));
                        Assert.ok(Nodefs.existsSync(tempDir));
                        Assert.ok(Nodefs.existsSync(inFlightFile));
                        var globalStorageUri = Vscode.Uri.file(tempDir);
                        var result = await Connection__Download__GitHub$AgdaModeVscode.isDownloading(globalStorageUri);
                        Assert.ok(result);
                        Nodefs.unlinkSync(inFlightFile);
                        Nodefs.rmdirSync(tempDir);
                      }));
                it("should create directory with proper permissions when it doesn't exist", (async function () {
                        var nonExistentDir = Nodepath.join(Nodeos.tmpdir(), "agda-isdownloading-permissions-" + String(Date.now() | 0));
                        Assert.ok(!Nodefs.existsSync(nonExistentDir));
                        var globalStorageUri = Vscode.Uri.file(nonExistentDir);
                        var result = await Connection__Download__GitHub$AgdaModeVscode.isDownloading(globalStorageUri);
                        Assert.ok(!result);
                        Assert.ok(Nodefs.existsSync(nonExistentDir));
                        var testFile = Nodepath.join(nonExistentDir, "test.txt");
                        Nodefs.writeFileSync(testFile, Buffer.from("test"));
                        Assert.ok(Nodefs.existsSync(testFile));
                        Nodefs.unlinkSync(testFile);
                        Nodefs.rmdirSync(nonExistentDir);
                      }));
              }));
        describe("Integration Tests", (function () {
                describe.skip("`getReleaseManifestFromGitHub` without cache", (function () {
                        it("should fetch release from GitHub API", (async function () {
                                var globalStorageUri = Vscode.Uri.file("/tmp/test-dev-als");
                                var repo = Connection__LatestALS$AgdaModeVscode.makeRepo(globalStorageUri);
                                var memento = Memento$AgdaModeVscode.make(undefined);
                                var releaseResult = await Connection__Download$AgdaModeVscode.getReleaseManifestFromGitHub(memento, repo, false);
                                if (releaseResult.TAG === "Ok") {
                                  Assert.ok(releaseResult._0.length > 0);
                                  return ;
                                }
                                Assert.fail("Failed to fetch releases: " + Connection__Download$AgdaModeVscode.$$Error.toString(releaseResult._0));
                              }));
                      }));
              }));
      }));

var GitHub;

exports.GitHub = GitHub;
/*  Not a pure module */
