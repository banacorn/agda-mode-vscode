// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Assert = require("assert");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Js_json = require("rescript/lib/js/js_json.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Command$AgdaModeVscode = require("../../src/Command.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");

var noKeybinding = [
  "OpenDebugBuffer",
  "SwitchAgdaVersion2"
];

var pseudoCommand = [
  {
    TAG: "InputMethod",
    _0: "BrowseUp"
  },
  {
    TAG: "InputMethod",
    _0: "BrowseDown"
  },
  {
    TAG: "InputMethod",
    _0: "BrowseLeft"
  },
  {
    TAG: "InputMethod",
    _0: "BrowseRight"
  },
  {
    TAG: "InputMethod",
    _0: {
      TAG: "InsertChar",
      _0: "{"
    }
  },
  {
    TAG: "InputMethod",
    _0: {
      TAG: "InsertChar",
      _0: "("
    }
  }
];

async function read() {
  var packageJsonPath = Test__Util$AgdaModeVscode.Path.toAbsolute("../../../../package.json");
  var packageJsonContent = await Test__Util$AgdaModeVscode.$$File.read(packageJsonPath);
  var packageJson = JSON.parse(packageJsonContent);
  var extractCommands = function (section) {
    return Core__Array.filterMap(Core__Option.getOr(Core__Option.flatMap(Core__Option.flatMap(Core__Option.flatMap(Core__Option.flatMap(Js_json.decodeObject(packageJson), (function (obj) {
                                        return Js_dict.get(obj, "contributes");
                                      })), Js_json.decodeObject), (function (obj) {
                                return Js_dict.get(obj, section);
                              })), Js_json.decodeArray), []), (function (item) {
                    return Core__Option.flatMap(Core__Option.flatMap(Js_json.decodeObject(item), (function (obj) {
                                      return Js_dict.get(obj, "command");
                                    })), Js_json.decodeString);
                  })).map(function (cmd) {
                if (cmd.startsWith("agda-mode.")) {
                  return cmd.slice(10);
                } else {
                  return cmd;
                }
              });
  };
  return {
          commands: extractCommands("commands"),
          keybindings: extractCommands("keybindings")
        };
}

var PackageJson = {
  read: read
};

function shouldBeRegisteredAsCommand(command) {
  return !pseudoCommand.some(function (pseudo) {
              return Caml_obj.equal(pseudo, command);
            });
}

function shouldHaveKeybinding(command) {
  if (shouldBeRegisteredAsCommand(command)) {
    return !noKeybinding.some(function (noKb) {
                return Caml_obj.equal(noKb, command);
              });
  } else {
    return false;
  }
}

describe("Command Registration", (function () {
        it("should have all valid commands registered in package.json", (async function () {
                var packageJson = await read();
                Command$AgdaModeVscode.names.filter(function (param) {
                        return shouldBeRegisteredAsCommand(param[0]);
                      }).forEach(function (param) {
                      var commandName = param[1];
                      var found = packageJson.commands.some(function (name) {
                            return name === commandName;
                          });
                      if (!found) {
                        Assert.fail("Command \"" + commandName + "\" is not registered in package.json commands");
                        return ;
                      }
                      
                    });
              }));
        it("should have all valid commands with keybindings registered", (async function () {
                var packageJson = await read();
                Command$AgdaModeVscode.names.filter(function (param) {
                        return shouldHaveKeybinding(param[0]);
                      }).forEach(function (param) {
                      var commandName = param[1];
                      var found = packageJson.keybindings.some(function (name) {
                            return name === commandName;
                          });
                      if (!found) {
                        Assert.fail("Command \"" + commandName + "\" is not registered in package.json keybindings");
                        return ;
                      }
                      
                    });
              }));
      }));

exports.noKeybinding = noKeybinding;
exports.pseudoCommand = pseudoCommand;
exports.PackageJson = PackageJson;
exports.shouldBeRegisteredAsCommand = shouldBeRegisteredAsCommand;
exports.shouldHaveKeybinding = shouldHaveKeybinding;
/*  Not a pure module */
