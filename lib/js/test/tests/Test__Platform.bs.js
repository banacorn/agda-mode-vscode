// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Web$AgdaModeVscode = require("../../src/Main/Web.bs.js");
var Mock$AgdaModeVscode = require("../../src/Main/Mock.bs.js");
var Desktop$AgdaModeVscode = require("../../src/Main/Desktop.bs.js");

describe("Platform dependent utilities", (function () {
        describe("Platform Abstraction", (function () {
                it("should create Desktop platform and have working operations", (async function () {
                        var platformDeps = Desktop$AgdaModeVscode.make();
                        await platformDeps.determinePlatform();
                        Assert.ok(true);
                        var commandResult = await platformDeps.findCommands(["nonexistent-command"]);
                        if (commandResult.TAG !== "Ok") {
                          return Curry._3(Assert.deepStrictEqual, commandResult._0, Object.fromEntries([[
                                            "nonexistent-command",
                                            "NotFound"
                                          ]]), undefined);
                        }
                        Assert.fail("Should not find nonexistent command");
                      }));
                it("should create Web platform and return expected errors", (async function () {
                        var platformDeps = Web$AgdaModeVscode.make();
                        var platformResult = await platformDeps.determinePlatform();
                        if (platformResult.TAG === "Ok") {
                          Assert.fail("Web platform should return Error for determinePlatform");
                        } else {
                          var raw = platformResult._0;
                          Curry._3(Assert.deepStrictEqual, raw.os, "web", undefined);
                          Curry._3(Assert.deepStrictEqual, raw.dist, "browser", undefined);
                        }
                        var commandResult = await platformDeps.findCommands(["agda"]);
                        if (commandResult.TAG === "Ok") {
                          Assert.fail("Web platform should return specific NotFound error");
                        } else {
                          Curry._3(Assert.deepStrictEqual, commandResult._0, Object.fromEntries([[
                                      "agda",
                                      "NotFound"
                                    ]]), undefined);
                        }
                        var policy = await platformDeps.askUserAboutDownloadPolicy();
                        return Curry._3(Assert.deepStrictEqual, policy, "No", undefined);
                      }));
              }));
        describe("Mock Platform for Testing", (function () {
                it("should allow custom mock platforms to be created for testing", (async function () {
                        var mockPlatformDeps = Mock$AgdaModeVscode.Platform.makeBasic();
                        var platformResult = await mockPlatformDeps.determinePlatform();
                        if (platformResult.TAG === "Ok" && platformResult._0 === "MacOS_Arm") {
                          Assert.ok(true);
                        } else {
                          Assert.fail("Mock platform should return MacOS_Arm");
                        }
                        var commandResult = await mockPlatformDeps.findCommands(["test"]);
                        if (commandResult.TAG !== "Ok") {
                          return Curry._3(Assert.deepStrictEqual, commandResult._0, Object.fromEntries([[
                                            "test",
                                            "NotFound"
                                          ]]), undefined);
                        }
                        Assert.fail("Mock platform should return NotFound error");
                      }));
              }));
      }));

/*  Not a pure module */
