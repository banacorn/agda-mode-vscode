// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Web$AgdaModeVscode = require("../../src/Main/Web.bs.js");
var Desktop$AgdaModeVscode = require("../../src/Main/Desktop.bs.js");
var Memento$AgdaModeVscode = require("../../src/Memento.bs.js");
var Connection$AgdaModeVscode = require("../../src/Connection/Connection.bs.js");

describe("Platform dependent utilities", (function () {
        describe("Platform Abstraction", (function () {
                it("should create Desktop platform and have working operations", (async function () {
                        var platformDeps = Desktop$AgdaModeVscode.make();
                        await platformDeps.determinePlatform();
                        Assert.ok(true);
                        var commandResult = await platformDeps.findCommands(["nonexistent-command"]);
                        if (commandResult.TAG === "Ok") {
                          Assert.fail("Should not find nonexistent command");
                          return ;
                        }
                        Assert.ok(commandResult._0.length > 0);
                      }));
                it("should create Web platform and return expected errors", (async function () {
                        var platformDeps = Web$AgdaModeVscode.make();
                        var platformResult = await platformDeps.determinePlatform();
                        if (platformResult.TAG === "Ok") {
                          Assert.fail("Web platform should return Error for determinePlatform");
                        } else {
                          var raw = platformResult._0;
                          Curry._3(Assert.deepStrictEqual, raw.os, "web", undefined);
                          Curry._3(Assert.deepStrictEqual, raw.dist, "browser", undefined);
                        }
                        var commandResult = await platformDeps.findCommands(["agda"]);
                        if (commandResult.TAG === "Ok") {
                          Assert.fail("Web platform should return specific NotFound error");
                        } else {
                          var match = commandResult._0;
                          if (match.length !== 1) {
                            Assert.fail("Web platform should return specific NotFound error");
                          } else {
                            var msg = match[0];
                            switch (msg.TAG) {
                              case "NotFound" :
                                  Assert.ok(msg._0.includes("web environment"));
                                  break;
                              case "SomethingWentWrong" :
                              case "NotValidTarget" :
                                  Assert.fail("Web platform should return specific NotFound error");
                                  break;
                              
                            }
                          }
                        }
                        var policy = await platformDeps.askUserAboutDownloadPolicy();
                        return Curry._3(Assert.deepStrictEqual, policy, "No", undefined);
                      }));
              }));
        describe("Connection Integration", (function () {
                it("should allow Connection.make to be called with platform dependencies", (async function () {
                        var platformDeps = Web$AgdaModeVscode.make();
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var paths = [];
                        var commands = ["agda"];
                        var result = await Connection$AgdaModeVscode.make(platformDeps, memento, globalStorageUri, paths, commands);
                        if (result.TAG === "Ok") {
                          Assert.fail("Web platform should not succeed in making real connections");
                          return ;
                        }
                        Assert.ok(true);
                      }));
                it("should allow Connection.fromDownloads to be called with platform dependencies", (async function () {
                        var platformDeps = Web$AgdaModeVscode.make();
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var attempts_endpoints = {};
                        var attempts_commands = [];
                        var attempts = {
                          endpoints: attempts_endpoints,
                          commands: attempts_commands
                        };
                        var result = await Connection$AgdaModeVscode.fromDownloads(platformDeps, memento, globalStorageUri, attempts);
                        if (result.TAG === "Ok") {
                          Assert.fail("Web platform should not succeed in downloading");
                          return ;
                        }
                        Assert.ok(true);
                      }));
              }));
        describe("Mock Platform for Testing", (function () {
                it("should allow custom mock platforms to be created for testing", (async function () {
                        var platformResult = await Promise.resolve({
                              TAG: "Ok",
                              _0: "Windows"
                            });
                        if (platformResult.TAG === "Ok" && platformResult._0 === "Windows") {
                          Assert.ok(true);
                        } else {
                          Assert.fail("Mock platform should return Windows");
                        }
                        var commandResult = await Promise.resolve({
                              TAG: "Error",
                              _0: [{
                                  TAG: "NotFound",
                                  _0: "mock"
                                }]
                            });
                        if (commandResult.TAG === "Ok") {
                          Assert.fail("Mock platform should return NotFound error");
                          return ;
                        }
                        var match = commandResult._0;
                        if (match.length !== 1) {
                          Assert.fail("Mock platform should return NotFound error");
                          return ;
                        }
                        var match$1 = match[0];
                        switch (match$1.TAG) {
                          case "NotFound" :
                              if (match$1._0 === "mock") {
                                Assert.ok(true);
                                return ;
                              }
                              Assert.fail("Mock platform should return NotFound error");
                              return ;
                          case "SomethingWentWrong" :
                          case "NotValidTarget" :
                              Assert.fail("Mock platform should return NotFound error");
                              return ;
                          
                        }
                      }));
              }));
      }));

/*  Not a pure module */
