// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var FastCheck = require("fast-check");
var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");
var Goal2$AgdaModeVscode = require("../../src/Goal2.bs.js");
var Goals$AgdaModeVscode = require("../../src/Goals.bs.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var Tokens$AgdaModeVscode = require("../../src/Tokens.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");

function toString(assult) {
  return "Move(" + Tokens$AgdaModeVscode.Change.toString(assult._0) + ")";
}

function arbitraryMoveAfter(goals, after) {
  var gapsBetweenBoundariesAfter = Core__Array.reduce(goals, [
          [],
          0
        ], (function (param, goal) {
            var prevEnd = param[1];
            var acc = param[0];
            return [
                    prevEnd >= after ? (
                        (goal.end - goal.start | 0) >= 4 ? Belt_Array.concatMany([
                                [
                                  [
                                    prevEnd,
                                    goal.start
                                  ],
                                  [
                                    goal.start + 2 | 0,
                                    goal.end - 2 | 0
                                  ]
                                ],
                                acc
                              ]) : Belt_Array.concatMany([
                                [[
                                    prevEnd,
                                    goal.start
                                  ]],
                                acc
                              ])
                      ) : acc,
                    goal.end
                  ];
          }))[0];
  var length = gapsBetweenBoundariesAfter.length;
  var pickedGap = length === 0 ? FastCheck.constant(undefined) : FastCheck.integer(0, length - 1 | 0).map(function (index) {
          return gapsBetweenBoundariesAfter[index];
        });
  return pickedGap.chain(function (gap) {
              if (gap === undefined) {
                return FastCheck.integer(after, after + 20 | 0).chain(function (offset) {
                            return FastCheck.integer(0, 10).chain(function (inserted) {
                                        return FastCheck.integer(0, 10).map(function (removed) {
                                                    return {
                                                            TAG: "Move",
                                                            _0: {
                                                              offset: offset,
                                                              removed: removed,
                                                              inserted: inserted
                                                            },
                                                            [Symbol.for("name")]: "Move"
                                                          };
                                                  });
                                      });
                          });
              }
              var gapStart = gap[0];
              return FastCheck.integer(gapStart, gap[1]).chain(function (offset) {
                          return FastCheck.integer(0, offset - gapStart | 0).chain(function (removed) {
                                      return FastCheck.integer(0, 10).map(function (inserted) {
                                                  return {
                                                          TAG: "Move",
                                                          _0: {
                                                            offset: offset,
                                                            removed: removed,
                                                            inserted: inserted
                                                          },
                                                          [Symbol.for("name")]: "Move"
                                                        };
                                                });
                                    });
                        });
            });
}

function arbitraryMoveWithGoals() {
  return Goal2$AgdaModeVscode.arbitraryBatch(undefined, undefined).chain(function (goals) {
              return arbitraryMoveAfter(goals, 0).map(function (move) {
                          return [
                                  goals,
                                  move
                                ];
                        });
            });
}

var Assult = {
  toString: toString,
  arbitraryMoveAfter: arbitraryMoveAfter,
  arbitraryMoveWithGoals: arbitraryMoveWithGoals
};

describe.only("Goals", (function () {
        var fileContent = {
          contents: ""
        };
        before(async function () {
              fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Goals.agda"));
            });
        afterEach(async function () {
              return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset("Goals.agda"), fileContent.contents);
            });
        after(async function () {
              return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset("Goals.agda"), fileContent.contents);
            });
        it("should instantiate all 5 goals with question marks expanded to holes", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                      "#0 [92-99)",
                      "#1 [118-125)",
                      "#2 [145-152)",
                      "#3 [171-178)",
                      "#4 [179-183)"
                    ], undefined);
                await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Goals.agda"));
                var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Goals.agda.out"));
                return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
              }));
        it("should translate goals on an insertion immediately before a goal", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                await Editor$AgdaModeVscode.$$Text.insert(ctx.state.document, new Vscode.Position(8, 18), " ");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                      "#0 [92-99)",
                      "#1 [119-126)",
                      "#2 [146-153)",
                      "#3 [172-179)",
                      "#4 [180-184)"
                    ], undefined);
                return await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
              }));
        it("should translate goals on an insertion immediately after a goal", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                await Editor$AgdaModeVscode.$$Text.insert(ctx.state.document, new Vscode.Position(8, 25), " ");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                      "#0 [92-99)",
                      "#1 [118-125)",
                      "#2 [146-153)",
                      "#3 [172-179)",
                      "#4 [180-184)"
                    ], undefined);
                return await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
              }));
        it("should destroy a goal after it has been completely deleted", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                await Editor$AgdaModeVscode.$$Text.$$delete(ctx.state.document, new Vscode.Range(new Vscode.Position(9, 19), new Vscode.Position(9, 26)));
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                      "#0 [92-99)",
                      "#1 [118-125)",
                      "#3 [164-171)",
                      "#4 [172-176)"
                    ], undefined);
                return await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
              }));
        it("should destroy a goal after it has been completely replaced 1", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                await Editor$AgdaModeVscode.$$Text.replace(ctx.state.document, new Vscode.Range(new Vscode.Position(9, 19), new Vscode.Position(9, 26)), "       ");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                      "#0 [92-99)",
                      "#1 [118-125)",
                      "#3 [171-178)",
                      "#4 [179-183)"
                    ], undefined);
                return await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
              }));
        it("should destroy a goal after it has been completely replaced 2", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                await Editor$AgdaModeVscode.$$Text.replace(ctx.state.document, new Vscode.Range(new Vscode.Position(10, 17), new Vscode.Position(10, 26)), "::DD");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                      "#0 [92-99)",
                      "#1 [118-125)",
                      "#2 [145-152)",
                      "#4 [174-178)"
                    ], undefined);
                return await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
              }));
        it("should only resize a goal after its content has been edited", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                await Editor$AgdaModeVscode.$$Text.replace(ctx.state.document, new Vscode.Range(new Vscode.Position(9, 22), new Vscode.Position(9, 23)), ":D");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                      "#0 [92-99)",
                      "#1 [118-125)",
                      "#2 [145-153)",
                      "#3 [172-179)",
                      "#4 [180-184)"
                    ], undefined);
                return await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
              }));
        describe.skip("Restore hole damaged boundaries", (function () {
                it("should protect against a backspace on the right boundary", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                        await Editor$AgdaModeVscode.$$Text.$$delete(ctx.state.document, new Vscode.Range(new Vscode.Position(9, 25), new Vscode.Position(9, 26)));
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var range = new Vscode.Range(new Vscode.Position(9, 19), new Vscode.Position(9, 26));
                        var actual = Editor$AgdaModeVscode.$$Text.get(ctx.state.document, range);
                        Curry._3(Assert.deepStrictEqual, actual, "{!   !}", undefined);
                        return Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                                    "#0 [92-99)",
                                    "#1 [118-125)",
                                    "#2 [145-152)",
                                    "#3 [171-175)"
                                  ], undefined);
                      }));
                it("should protect against a deletion on the right boundary", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                        await Editor$AgdaModeVscode.$$Text.$$delete(ctx.state.document, new Vscode.Range(new Vscode.Position(9, 24), new Vscode.Position(9, 25)));
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var range = new Vscode.Range(new Vscode.Position(9, 19), new Vscode.Position(9, 26));
                        var actual = Editor$AgdaModeVscode.$$Text.get(ctx.state.document, range);
                        Curry._3(Assert.deepStrictEqual, actual, "{!   !}", undefined);
                        return Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                                    "#0 [92-99)",
                                    "#1 [118-125)",
                                    "#2 [145-152)",
                                    "#3 [171-175)"
                                  ], undefined);
                      }));
                it("should protect against a backspace on the left boundary", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                        await Editor$AgdaModeVscode.$$Text.$$delete(ctx.state.document, new Vscode.Range(new Vscode.Position(9, 20), new Vscode.Position(9, 21)));
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var range = new Vscode.Range(new Vscode.Position(9, 19), new Vscode.Position(9, 26));
                        var actual = Editor$AgdaModeVscode.$$Text.get(ctx.state.document, range);
                        Curry._3(Assert.deepStrictEqual, actual, "{!   !}", undefined);
                        return Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                                    "#0 [92-99)",
                                    "#1 [118-125)",
                                    "#2 [145-152)",
                                    "#3 [171-175)"
                                  ], undefined);
                      }));
                it("should protect against a deletion on the left boundary", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                        await Editor$AgdaModeVscode.$$Text.$$delete(ctx.state.document, new Vscode.Range(new Vscode.Position(9, 19), new Vscode.Position(9, 20)));
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var range = new Vscode.Range(new Vscode.Position(9, 19), new Vscode.Position(9, 26));
                        var actual = Editor$AgdaModeVscode.$$Text.get(ctx.state.document, range);
                        Curry._3(Assert.deepStrictEqual, actual, "{!   !}", undefined);
                        return Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                                    "#0 [92-99)",
                                    "#1 [118-125)",
                                    "#2 [145-152)",
                                    "#3 [171-175)"
                                  ], undefined);
                      }));
              }));
        describe("Jumping between goals", (function () {
                it("should jump to the next goal", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                        Editor$AgdaModeVscode.Cursor.set(ctx.state.editor, new Vscode.Position(0, 0));
                        await Test__Util$AgdaModeVscode.AgdaMode.nextGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(7, 14), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.nextGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(8, 21), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.nextGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(9, 22), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.nextGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(10, 21), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.nextGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(10, 28), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.nextGoal(ctx);
                        return Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(7, 14), undefined);
                      }));
                it("should jump to the previous goal", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                        Editor$AgdaModeVscode.Cursor.set(ctx.state.editor, new Vscode.Position(0, 0));
                        await Test__Util$AgdaModeVscode.AgdaMode.previousGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(10, 28), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.previousGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(10, 21), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.previousGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(9, 22), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.previousGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(8, 21), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.previousGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(7, 14), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.previousGoal(ctx);
                        return Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(10, 28), undefined);
                      }));
              }));
      }));

exports.Assult = Assult;
/*  Not a pure module */
