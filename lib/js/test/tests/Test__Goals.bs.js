// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Goals$AgdaModeVscode = require("../../src/Goals.bs.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");

describe("Goals", (function () {
        var fileContent = {
          contents: ""
        };
        before(async function () {
              fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Goals.agda"));
            });
        afterEach(async function () {
              return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset("Goals.agda"), fileContent.contents);
            });
        after(async function () {
              return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset("Goals.agda"), fileContent.contents);
            });
        describe("On document change", (function () {
                it("should instantiate all 4 goals with question marks expanded to holes", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Goals.agda"));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Goals.agda.out"));
                        Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                        return Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                                    "#0 [92-99)",
                                    "#1 [118-125)",
                                    "#2 [145-152)",
                                    "#3 [171-175)"
                                  ], undefined);
                      }));
              }));
        it("should destroy a goal after it has been completely deleted", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                await Editor$AgdaModeVscode.$$Text.$$delete(ctx.state.document, new Vscode.Range(new Vscode.Position(9, 19), new Vscode.Position(9, 26)));
                await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                return Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                            "#0 [92-99)",
                            "#1 [118-125)",
                            "#3 [164-168)"
                          ], undefined);
              }));
        it.skip("should destroy a goal after it has been completely replaced", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                await Editor$AgdaModeVscode.$$Text.replace(ctx.state.document, new Vscode.Range(new Vscode.Position(9, 19), new Vscode.Position(9, 26)), "       ");
                await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                return Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                            "#0 [92-99)",
                            "#1 [118-125)",
                            "#3 [164-168)"
                          ], undefined);
              }));
        it("should only resize a goal after its content has been edited", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                await Editor$AgdaModeVscode.$$Text.replace(ctx.state.document, new Vscode.Range(new Vscode.Position(9, 22), new Vscode.Position(9, 23)), ":D");
                await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                return Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                            "#0 [92-99)",
                            "#1 [118-125)",
                            "#2 [145-153)",
                            "#3 [172-176)"
                          ], undefined);
              }));
        describe.skip("Restore hole damanged boundaries", (function () {
                it("should protect against a backspace on the right boundary", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                        await Editor$AgdaModeVscode.$$Text.$$delete(ctx.state.document, new Vscode.Range(new Vscode.Position(9, 25), new Vscode.Position(9, 26)));
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var range = new Vscode.Range(new Vscode.Position(9, 19), new Vscode.Position(9, 26));
                        var actual = Editor$AgdaModeVscode.$$Text.get(ctx.state.document, range);
                        Curry._3(Assert.deepStrictEqual, actual, "{!   !}", undefined);
                        return Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                                    "#0 [92-99)",
                                    "#1 [118-125)",
                                    "#2 [145-152)",
                                    "#3 [171-175)"
                                  ], undefined);
                      }));
                it("should protect against a deletion on the right boundary", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                        await Editor$AgdaModeVscode.$$Text.$$delete(ctx.state.document, new Vscode.Range(new Vscode.Position(9, 24), new Vscode.Position(9, 25)));
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var range = new Vscode.Range(new Vscode.Position(9, 19), new Vscode.Position(9, 26));
                        var actual = Editor$AgdaModeVscode.$$Text.get(ctx.state.document, range);
                        Curry._3(Assert.deepStrictEqual, actual, "{!   !}", undefined);
                        return Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                                    "#0 [92-99)",
                                    "#1 [118-125)",
                                    "#2 [145-152)",
                                    "#3 [171-175)"
                                  ], undefined);
                      }));
                it("should protect against a backspace on the left boundary", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                        await Editor$AgdaModeVscode.$$Text.$$delete(ctx.state.document, new Vscode.Range(new Vscode.Position(9, 20), new Vscode.Position(9, 21)));
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var range = new Vscode.Range(new Vscode.Position(9, 19), new Vscode.Position(9, 26));
                        var actual = Editor$AgdaModeVscode.$$Text.get(ctx.state.document, range);
                        Curry._3(Assert.deepStrictEqual, actual, "{!   !}", undefined);
                        return Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                                    "#0 [92-99)",
                                    "#1 [118-125)",
                                    "#2 [145-152)",
                                    "#3 [171-175)"
                                  ], undefined);
                      }));
                it("should protect against a deletion on the left boundary", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                        await Editor$AgdaModeVscode.$$Text.$$delete(ctx.state.document, new Vscode.Range(new Vscode.Position(9, 19), new Vscode.Position(9, 20)));
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var range = new Vscode.Range(new Vscode.Position(9, 19), new Vscode.Position(9, 26));
                        var actual = Editor$AgdaModeVscode.$$Text.get(ctx.state.document, range);
                        Curry._3(Assert.deepStrictEqual, actual, "{!   !}", undefined);
                        return Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals2), [
                                    "#0 [92-99)",
                                    "#1 [118-125)",
                                    "#2 [145-152)",
                                    "#3 [171-175)"
                                  ], undefined);
                      }));
              }));
        describe("Jumping between goals", (function () {
                it("should jump to the next goal", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                        Editor$AgdaModeVscode.Cursor.set(ctx.state.editor, new Vscode.Position(0, 0));
                        await Test__Util$AgdaModeVscode.AgdaMode.nextGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(7, 14), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.nextGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(8, 21), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.nextGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(9, 22), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.nextGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(10, 20), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.nextGoal(ctx);
                        return Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(7, 14), undefined);
                      }));
                it("should jump to the previous goal", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Goals.agda");
                        Editor$AgdaModeVscode.Cursor.set(ctx.state.editor, new Vscode.Position(0, 0));
                        await Test__Util$AgdaModeVscode.AgdaMode.previousGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(10, 20), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.previousGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(9, 22), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.previousGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(8, 21), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.previousGoal(ctx);
                        Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(7, 14), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.previousGoal(ctx);
                        return Curry._3(Assert.deepStrictEqual, Editor$AgdaModeVscode.Cursor.get(ctx.state.editor), new Vscode.Position(10, 20), undefined);
                      }));
              }));
      }));

/*  Not a pure module */
