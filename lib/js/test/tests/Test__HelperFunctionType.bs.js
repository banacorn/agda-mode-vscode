// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var State__Connection$AgdaModeVscode = require("../../src/State/State__Connection.bs.js");

function run(normalization) {
  var filename = "HelperFunctionType.agda";
  var fileContent = {
    contents: ""
  };
  beforeEach(async function () {
        fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
      });
  afterEach(async function () {
        return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset(filename), fileContent.contents);
      });
  it("should be responded with correct responses (>= 2.7.0)", (async function () {
          var versionValid = await Test__Util$AgdaModeVscode.AgdaMode.versionGTE("agda", "2.7.0");
          if (!versionValid) {
            return ;
          }
          var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
          await Editor$AgdaModeVscode.$$Text.insert(ctx.state.editor, new Vscode.Position(7, 14), "y", undefined);
          var responses = await State__Connection$AgdaModeVscode.sendRequestAndCollectResponses(ctx.state, {
                TAG: "HelperFunctionType",
                _0: normalization,
                _1: "helper t'",
                _2: {
                  index: 0,
                  indexString: "0",
                  start: 316,
                  end: 329
                },
                [Symbol.for("name")]: "HelperFunctionType"
              });
          var filteredResponses = responses.filter(Test__Util$AgdaModeVscode.filteredResponse);
          return Curry._3(Assert.deepStrictEqual, filteredResponses, [{
                        TAG: "DisplayInfo",
                        _0: {
                          TAG: "HelperFunction",
                          _0: "helper : ∀ {m} {t : T m} → T (test m t .fst) → Σ ℕ T\n",
                          [Symbol.for("name")]: "HelperFunction"
                        },
                        [Symbol.for("name")]: "DisplayInfo"
                      }], undefined);
        }));
  it("should copy type to the pasteboard (>= 2.7.0)", (async function () {
          var versionValid = await Test__Util$AgdaModeVscode.AgdaMode.versionGTE("agda", "2.7.0");
          if (!versionValid) {
            return ;
          }
          var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
          await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, {
                TAG: "HelperFunctionType",
                _0: normalization,
                [Symbol.for("name")]: "HelperFunctionType"
              }, Caml_option.some(new Vscode.Position(15, 3)), undefined);
          var text = await Vscode.env.clipboard.readText();
          return Curry._3(Assert.deepStrictEqual, text, "helper : ∀ {m} {t : T m} → T (test m t .fst) → Σ ℕ T\n", undefined);
        }));
}

describe("agda-mode.helper-function-type", (function () {
        describe("Simplified", (function () {
                run("Simplified");
              }));
        describe("Instantiated", (function () {
                run("Instantiated");
              }));
        describe("Normalised", (function () {
                run("Normalised");
              }));
      }));

exports.run = run;
/*  Not a pure module */
