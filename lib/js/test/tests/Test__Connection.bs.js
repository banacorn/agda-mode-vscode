// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml = require("rescript/lib/js/caml.js");
var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Nodefs = require("node:fs");
var Nodeos = require("node:os");
var Nodepath = require("node:path");
var PervasivesU = require("rescript/lib/js/pervasivesU.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");
var Chan$AgdaModeVscode = require("../../src/Util/Chan.bs.js");
var Mock$AgdaModeVscode = require("../../src/Main/Mock.bs.js");
var Config$AgdaModeVscode = require("../../src/Config.bs.js");
var Desktop$AgdaModeVscode = require("../../src/Main/Desktop.bs.js");
var Memento$AgdaModeVscode = require("../../src/Memento.bs.js");
var Connection$AgdaModeVscode = require("../../src/Connection/Connection.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var Connection__Error$AgdaModeVscode = require("../../src/Connection/Shared/Connection__Error.bs.js");
var Connection__Command$AgdaModeVscode = require("../../src/Connection/Resolver/Connection__Command.bs.js");

async function getAgdaTarget() {
  var platformDeps = Desktop$AgdaModeVscode.make();
  var connection = await Connection$AgdaModeVscode.fromCommands(platformDeps, ["agda"]);
  if (connection.TAG === "Ok") {
    return connection._0;
  } else {
    return PervasivesU.failwith("expected to find `agda`");
  }
}

describe("Connection", (function () {
        this.timeout(10000);
        describe("Target", (function () {
                var agdaMockPath = {
                  contents: ""
                };
                var agdaMockEndpoint = {
                  contents: undefined
                };
                before(async function () {
                      agdaMockPath.contents = await Test__Util$AgdaModeVscode.Endpoint.Agda.mock("2.7.0.1", "agda-mock");
                      agdaMockEndpoint.contents = agdaMockPath.contents;
                    });
                after(async function () {
                      var target = agdaMockEndpoint.contents;
                      if (target !== undefined) {
                        await Test__Util$AgdaModeVscode.Endpoint.Agda.destroy(target);
                        agdaMockEndpoint.contents = undefined;
                        return ;
                      }
                      
                    });
              }));
        describe("Command searching", (function () {
                it("should return an error when the command is not found", (async function () {
                        var _output = await Connection__Command$AgdaModeVscode.search("non-existent-command", undefined);
                        if (_output.TAG === "Ok") {
                          return PervasivesU.failwith("expected to not find `non-existent-command`");
                        }
                        
                      }));
              }));
        describe("checkForPrebuiltDataDirectory", (function () {
                it("should return asset path when data directory exists", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "agda-test-" + String(Date.now() | 0));
                        var execPath = Nodepath.join(tempDir, "bin", "agda-language-server");
                        var dataDir = Nodepath.join(tempDir, "bin", "data");
                        await Nodefs.promises.mkdir(Nodepath.join(tempDir, "bin"), {
                              recursive: true,
                              mode: 511
                            });
                        await Nodefs.promises.mkdir(dataDir, {
                              recursive: true,
                              mode: 511
                            });
                        var result = await Connection$AgdaModeVscode.checkForPrebuiltDataDirectory(execPath);
                        var expectedAssetPath = Nodepath.join(execPath, "..", "data");
                        Curry._3(Assert.deepStrictEqual, result, expectedAssetPath, undefined);
                        Nodefs.rmdirSync(dataDir);
                        Nodefs.rmdirSync(Nodepath.join(tempDir, "bin"));
                        Nodefs.rmdirSync(tempDir);
                      }));
                it("should return None when data directory does not exist", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "agda-test-" + String(Date.now() | 0));
                        var execPath = Nodepath.join(tempDir, "bin", "agda-language-server");
                        await Nodefs.promises.mkdir(Nodepath.join(tempDir, "bin"), {
                              recursive: true,
                              mode: 511
                            });
                        var result = await Connection$AgdaModeVscode.checkForPrebuiltDataDirectory(execPath);
                        Curry._3(Assert.deepStrictEqual, result, undefined, undefined);
                        Nodefs.rmdirSync(Nodepath.join(tempDir, "bin"));
                        Nodefs.rmdirSync(tempDir);
                      }));
              }));
        describe("`fromDownloads`", (function () {
                var constructionError = Connection__Error$AgdaModeVscode.Construction.make();
                var agdaMockEndpoint = {
                  contents: undefined
                };
                before(async function () {
                      try {
                        var path = await Test__Util$AgdaModeVscode.Endpoint.Agda.mock("2.7.0.1", "agda-mock-2");
                        agdaMockEndpoint.contents = path;
                        return ;
                      }
                      catch (raw_msg){
                        var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
                        if (msg.RE_EXN_ID === "Failure") {
                          return PervasivesU.failwith(msg._1);
                        } else {
                          return PervasivesU.failwith("Got error when trying to construct target from mock Agda: unknown error");
                        }
                      }
                    });
                after(async function () {
                      await Config$AgdaModeVscode.Connection.setAgdaPaths([]);
                      await Memento$AgdaModeVscode.Module.PickedConnection.set(Memento$AgdaModeVscode.make(undefined), undefined);
                      var target = agdaMockEndpoint.contents;
                      if (target !== undefined) {
                        await Test__Util$AgdaModeVscode.Endpoint.Agda.destroy(target);
                        agdaMockEndpoint.contents = undefined;
                        return ;
                      }
                      
                    });
                it("should throw the `PlatformNotSupported` error when the platform is not supported", (async function () {
                        var platform = {
                          os: "non-existent-os",
                          dist: "non-existent-dist",
                          codename: "non-existent-codename",
                          release: "non-existent-release"
                        };
                        var mockPlatformDeps = Mock$AgdaModeVscode.Platform.makeWithPlatformError(platform);
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var actual = await Connection$AgdaModeVscode.fromDownloads(mockPlatformDeps, memento, globalStorageUri);
                        var expected = Connection__Error$AgdaModeVscode.Construction.merge(constructionError, Connection__Error$AgdaModeVscode.Construction.fromDownloadError({
                                  TAG: "PlatformNotSupported",
                                  _0: platform
                                }));
                        return Curry._3(Assert.deepStrictEqual, actual, {
                                    TAG: "Error",
                                    _0: expected
                                  }, undefined);
                      }));
                it("should throw the `NoDownloadALS` error when the initial download policy is `No`", (async function () {
                        await Config$AgdaModeVscode.Connection.DownloadPolicy.set("No");
                        var getDownloadPolicyCount = {
                          contents: 0
                        };
                        var mockPlatformDeps = Mock$AgdaModeVscode.Platform.makeWithDownloadPolicyCounter("No", getDownloadPolicyCount);
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var result = await Connection$AgdaModeVscode.fromDownloads(mockPlatformDeps, memento, globalStorageUri);
                        Curry._3(Assert.deepStrictEqual, result, {
                              TAG: "Error",
                              _0: constructionError
                            }, undefined);
                        var policy = Config$AgdaModeVscode.Connection.DownloadPolicy.get();
                        Curry._3(Assert.deepStrictEqual, policy, "No", undefined);
                        return Curry._3(Assert.deepStrictEqual, getDownloadPolicyCount.contents, 0, undefined);
                      }));
                it("should throw the `NoDownloadALS` error when the user clicked `cancel` on the download dialog", (async function () {
                        await Config$AgdaModeVscode.Connection.DownloadPolicy.set("Undecided");
                        var getDownloadPolicyCount = {
                          contents: 0
                        };
                        var mockPlatformDeps = Mock$AgdaModeVscode.Platform.makeWithDownloadPolicyCounter("Undecided", getDownloadPolicyCount);
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var result = await Connection$AgdaModeVscode.fromDownloads(mockPlatformDeps, memento, globalStorageUri);
                        Curry._3(Assert.deepStrictEqual, result, {
                              TAG: "Error",
                              _0: constructionError
                            }, undefined);
                        var policy = Config$AgdaModeVscode.Connection.DownloadPolicy.get();
                        Curry._3(Assert.deepStrictEqual, policy, "No", undefined);
                        return Curry._3(Assert.deepStrictEqual, getDownloadPolicyCount.contents, 1, undefined);
                      }));
                it("should check if the latest ALS is already downloaded when the download policy is `Yes`", (async function () {
                        var endpoint = agdaMockEndpoint.contents;
                        var mockEndpoint = endpoint !== undefined ? endpoint : PervasivesU.failwith("Unable to access the Agda mock endpoint");
                        await Config$AgdaModeVscode.Connection.DownloadPolicy.set("Undecided");
                        var checkedCache = {
                          contents: false
                        };
                        var mockPlatformDeps = Mock$AgdaModeVscode.Platform.makeWithCachedDownloadAndFlag(mockEndpoint, checkedCache);
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var result = await Connection$AgdaModeVscode.fromDownloads(mockPlatformDeps, memento, globalStorageUri);
                        Curry._3(Assert.deepStrictEqual, checkedCache.contents, true, undefined);
                        if (result.TAG === "Ok") {
                          var connection = result._0;
                          if (connection.TAG === "Agda") {
                            Curry._3(Assert.deepStrictEqual, connection._2, "2.7.0.1", undefined);
                          } else {
                            Assert.fail("Expected Agda connection");
                          }
                        } else {
                          Assert.fail("Expected successful cached download");
                        }
                        var policy = Config$AgdaModeVscode.Connection.DownloadPolicy.get();
                        Curry._3(Assert.deepStrictEqual, policy, "Yes", undefined);
                        var paths = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        Assert.ok(paths.includes(mockEndpoint));
                      }));
                it("should proceed to download the latest ALS when the download policy is `Yes` and the cached latest ALS is not found", (async function () {
                        var endpoint = agdaMockEndpoint.contents;
                        var mockEndpoint = endpoint !== undefined ? endpoint : PervasivesU.failwith("Unable to access the Agda mock endpoint");
                        await Config$AgdaModeVscode.Connection.DownloadPolicy.set("Undecided");
                        var checkedCache = {
                          contents: false
                        };
                        var checkedDownload = {
                          contents: false
                        };
                        var mockPlatformDeps = Mock$AgdaModeVscode.Platform.makeWithSuccessfulDownload2AndFlags(mockEndpoint, checkedCache, checkedDownload);
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var result = await Connection$AgdaModeVscode.fromDownloads(mockPlatformDeps, memento, globalStorageUri);
                        Curry._3(Assert.deepStrictEqual, checkedCache.contents, true, undefined);
                        Curry._3(Assert.deepStrictEqual, checkedDownload.contents, true, undefined);
                        if (result.TAG === "Ok") {
                          var connection = result._0;
                          if (connection.TAG === "Agda") {
                            Curry._3(Assert.deepStrictEqual, connection._2, "2.7.0.1", undefined);
                          } else {
                            Assert.fail("Expected Agda connection");
                          }
                        } else {
                          Assert.fail("Expected successful fresh download");
                        }
                        var policy = Config$AgdaModeVscode.Connection.DownloadPolicy.get();
                        Curry._3(Assert.deepStrictEqual, policy, "Yes", undefined);
                        var paths = Config$AgdaModeVscode.Connection.getAgdaPaths();
                        Assert.ok(paths.includes(mockEndpoint));
                      }));
                it("should throw the `DownloadALS` error when the download policy is `Yes` but the download fails", (async function () {
                        await Config$AgdaModeVscode.Connection.DownloadPolicy.set("Undecided");
                        var checkedCache = {
                          contents: false
                        };
                        var checkedDownload = {
                          contents: false
                        };
                        var mockPlatformDeps = Mock$AgdaModeVscode.Platform.makeWithDownloadFailureAndFlags(checkedCache, checkedDownload);
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var result = await Connection$AgdaModeVscode.fromDownloads(mockPlatformDeps, memento, globalStorageUri);
                        Curry._3(Assert.deepStrictEqual, checkedCache.contents, true, undefined);
                        Curry._3(Assert.deepStrictEqual, checkedDownload.contents, true, undefined);
                        var expected = Connection__Error$AgdaModeVscode.Construction.merge(constructionError, Connection__Error$AgdaModeVscode.Construction.fromDownloadError("CannotFindCompatibleALSRelease"));
                        Curry._3(Assert.deepStrictEqual, result, {
                              TAG: "Error",
                              _0: expected
                            }, undefined);
                        var policy = Config$AgdaModeVscode.Connection.DownloadPolicy.get();
                        return Curry._3(Assert.deepStrictEqual, policy, "Yes", undefined);
                      }));
              }));
        describe("`fromPaths`", (function () {
                var agdaMockEndpoint = {
                  contents: undefined
                };
                before(async function () {
                      try {
                        var path = await Test__Util$AgdaModeVscode.Endpoint.Agda.mock("2.7.0.1", "agda-mock-paths");
                        agdaMockEndpoint.contents = path;
                        return ;
                      }
                      catch (raw_error){
                        var error = Caml_js_exceptions.internalToOCamlException(raw_error);
                        return PervasivesU.failwith("Failed to create Agda mock: " + String(error));
                      }
                    });
                after(async function () {
                      var path = agdaMockEndpoint.contents;
                      if (path === undefined) {
                        return ;
                      }
                      try {
                        Nodefs.unlinkSync(path);
                        return ;
                      }
                      catch (exn){
                        return ;
                      }
                    });
                it("should connect successfully with valid path", (async function () {
                        var path = agdaMockEndpoint.contents;
                        var mockPath = path !== undefined ? path : PervasivesU.failwith("Mock endpoint not available");
                        var platformDeps = Desktop$AgdaModeVscode.make();
                        var paths = [mockPath];
                        var result = await Connection$AgdaModeVscode.fromPaths(platformDeps, paths);
                        if (result.TAG === "Ok") {
                          var connection = result._0;
                          if (connection.TAG === "Agda") {
                            Curry._3(Assert.deepStrictEqual, connection._1, mockPath, undefined);
                            return Curry._3(Assert.deepStrictEqual, connection._2, "2.7.0.1", undefined);
                          }
                          Assert.fail("Expected Agda connection");
                          return ;
                        }
                        Assert.fail("Expected successful connection");
                      }));
                it("should try multiple paths and use first valid one", (async function () {
                        var path = agdaMockEndpoint.contents;
                        var mockPath = path !== undefined ? path : PervasivesU.failwith("Mock endpoint not available");
                        var platformDeps = Desktop$AgdaModeVscode.make();
                        var paths = [
                          "invalid/path/1",
                          "invalid/path/2",
                          mockPath,
                          "invalid/path/3"
                        ];
                        var result = await Connection$AgdaModeVscode.fromPaths(platformDeps, paths);
                        if (result.TAG === "Ok") {
                          var connection = result._0;
                          if (connection.TAG === "Agda") {
                            Curry._3(Assert.deepStrictEqual, connection._1, mockPath, undefined);
                            return Curry._3(Assert.deepStrictEqual, connection._2, "2.7.0.1", undefined);
                          }
                          Assert.fail("Expected Agda connection");
                          return ;
                        }
                        Assert.fail("Expected successful connection to first valid path");
                      }));
                it("should return Construction error when all paths are invalid", (async function () {
                        var platformDeps = Desktop$AgdaModeVscode.make();
                        var paths = [
                          "invalid/path/1",
                          "invalid/path/2",
                          "invalid/path/3"
                        ];
                        var result = await Connection$AgdaModeVscode.fromPaths(platformDeps, paths);
                        if (result.TAG === "Ok") {
                          Assert.fail("Expected error with invalid paths");
                          return ;
                        }
                        var constructionError = result._0;
                        var endpointErrors = Object.entries(constructionError.endpoints);
                        Curry._3(Assert.deepStrictEqual, endpointErrors.length, 3, undefined);
                        var commandErrors = Object.entries(constructionError.commands);
                        Curry._3(Assert.deepStrictEqual, commandErrors.length, 0, undefined);
                        return Curry._3(Assert.deepStrictEqual, constructionError.download, undefined, undefined);
                      }));
                it("should return empty error when no paths provided", (async function () {
                        var platformDeps = Desktop$AgdaModeVscode.make();
                        var paths = [];
                        var result = await Connection$AgdaModeVscode.fromPaths(platformDeps, paths);
                        if (result.TAG === "Ok") {
                          Assert.fail("Expected error with empty paths");
                          return ;
                        }
                        var constructionError = result._0;
                        var endpointErrors = Object.entries(constructionError.endpoints);
                        Curry._3(Assert.deepStrictEqual, endpointErrors.length, 0, undefined);
                        var commandErrors = Object.entries(constructionError.commands);
                        Curry._3(Assert.deepStrictEqual, commandErrors.length, 0, undefined);
                        return Curry._3(Assert.deepStrictEqual, constructionError.download, undefined, undefined);
                      }));
              }));
        describe("`fromCommands`", (function () {
                it("should connect successfully with valid command", (async function () {
                        var platformDeps = Desktop$AgdaModeVscode.make();
                        var commands = [
                          "agda",
                          "als"
                        ];
                        var result = await Connection$AgdaModeVscode.fromCommands(platformDeps, commands);
                        if (result.TAG === "Ok") {
                          var connection = result._0;
                          if (connection.TAG === "Agda") {
                            Assert.ok(connection._1.length > 0);
                            Assert.ok(connection._2.length > 0);
                            return ;
                          }
                          Assert.ok(connection._1.length > 0);
                          Assert.ok(connection._2.length > 0);
                          Assert.ok(connection._3.length > 0);
                          return ;
                        }
                        Assert.fail("Expected successful connection via command");
                      }));
                it("should try multiple commands and use first valid one", (async function () {
                        var platformDeps = Desktop$AgdaModeVscode.make();
                        var commands = [
                          "non-existent-cmd",
                          "agda",
                          "als"
                        ];
                        var result = await Connection$AgdaModeVscode.fromCommands(platformDeps, commands);
                        if (result.TAG === "Ok") {
                          var connection = result._0;
                          if (connection.TAG === "Agda") {
                            Assert.ok(connection._1.length > 0);
                            Assert.ok(connection._2.length > 0);
                            return ;
                          }
                          Assert.ok(connection._1.length > 0);
                          Assert.ok(connection._2.length > 0);
                          Assert.ok(connection._3.length > 0);
                          return ;
                        }
                        Assert.fail("Expected successful connection to valid command");
                      }));
                it("should return Construction error when all commands are invalid", (async function () {
                        var platformDeps = Desktop$AgdaModeVscode.make();
                        var commands = [
                          "non-existent-cmd-1",
                          "non-existent-cmd-2",
                          "non-existent-cmd-3"
                        ];
                        var result = await Connection$AgdaModeVscode.fromCommands(platformDeps, commands);
                        if (result.TAG === "Ok") {
                          Assert.fail("Expected error with invalid commands");
                          return ;
                        }
                        var constructionError = result._0;
                        var endpointErrors = Object.entries(constructionError.endpoints);
                        Curry._3(Assert.deepStrictEqual, endpointErrors.length, 0, undefined);
                        var commandErrors = Object.entries(constructionError.commands);
                        Curry._3(Assert.deepStrictEqual, commandErrors.length, 3, undefined);
                        var commandNames = commandErrors.map(function (param) {
                                return param[0];
                              }).toSorted(Caml.string_compare);
                        Curry._3(Assert.deepStrictEqual, commandNames, [
                              "non-existent-cmd-1",
                              "non-existent-cmd-2",
                              "non-existent-cmd-3"
                            ], undefined);
                        return Curry._3(Assert.deepStrictEqual, constructionError.download, undefined, undefined);
                      }));
                it("should return empty error when no commands provided", (async function () {
                        var platformDeps = Desktop$AgdaModeVscode.make();
                        var commands = [];
                        var result = await Connection$AgdaModeVscode.fromCommands(platformDeps, commands);
                        if (result.TAG === "Ok") {
                          Assert.fail("Expected error with empty commands");
                          return ;
                        }
                        var constructionError = result._0;
                        var endpointErrors = Object.entries(constructionError.endpoints);
                        Curry._3(Assert.deepStrictEqual, endpointErrors.length, 0, undefined);
                        var commandErrors = Object.entries(constructionError.commands);
                        Curry._3(Assert.deepStrictEqual, commandErrors.length, 0, undefined);
                        return Curry._3(Assert.deepStrictEqual, constructionError.download, undefined, undefined);
                      }));
              }));
        describe("make with logging", (function () {
                it("should log ConnectedToAgda when Agda connection succeeds", (async function () {
                        var loggedEvents = [];
                        var logChannel = Chan$AgdaModeVscode.make();
                        Chan$AgdaModeVscode.on(logChannel, (function (logEvent) {
                                loggedEvents.push(logEvent);
                              }));
                        var agdaMockPath = await Test__Util$AgdaModeVscode.Endpoint.Agda.mock("2.6.4", "agda-mock-for-make");
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var platformDeps = Desktop$AgdaModeVscode.make();
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var connection = await Connection$AgdaModeVscode.make(platformDeps, memento, globalStorageUri, [agdaMockPath], [], logChannel);
                        if (connection.TAG === "Ok") {
                          var connection$1 = connection._0;
                          Curry._3(Assert.deepStrictEqual, loggedEvents, [{
                                  TAG: "Connection",
                                  _0: {
                                    TAG: "ConnectedToAgda",
                                    _0: agdaMockPath,
                                    _1: "2.6.4"
                                  }
                                }], undefined);
                          if (connection$1.TAG === "Agda") {
                            Curry._3(Assert.deepStrictEqual, connection$1._1, agdaMockPath, undefined);
                            Curry._3(Assert.deepStrictEqual, connection$1._2, "2.6.4", undefined);
                          } else {
                            Assert.fail("Expected Agda connection");
                          }
                        } else {
                          Assert.fail("Expected connection to succeed");
                        }
                        try {
                          Nodefs.unlinkSync(agdaMockPath);
                          return ;
                        }
                        catch (exn){
                          return ;
                        }
                      }));
                it("should log connection events when using real agda command", (async function () {
                        var loggedEvents = [];
                        var logChannel = Chan$AgdaModeVscode.make();
                        Chan$AgdaModeVscode.on(logChannel, (function (logEvent) {
                                loggedEvents.push(logEvent);
                              }));
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var platformDeps = Desktop$AgdaModeVscode.make();
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var connection = await Connection$AgdaModeVscode.make(platformDeps, memento, globalStorageUri, [], ["agda"], logChannel);
                        if (connection.TAG !== "Ok") {
                          return Curry._3(Assert.deepStrictEqual, loggedEvents, [], undefined);
                        }
                        var connection$1 = connection._0;
                        if (connection$1.TAG === "Agda") {
                          return Curry._3(Assert.deepStrictEqual, loggedEvents, [{
                                        TAG: "Connection",
                                        _0: {
                                          TAG: "ConnectedToAgda",
                                          _0: connection$1._1,
                                          _1: connection$1._2
                                        }
                                      }], undefined);
                        } else {
                          return Curry._3(Assert.deepStrictEqual, loggedEvents, [{
                                        TAG: "Connection",
                                        _0: {
                                          TAG: "ConnectedToALS",
                                          _0: connection$1._1,
                                          _1: connection$1._2,
                                          _2: connection$1._3
                                        }
                                      }], undefined);
                        }
                      }));
                it("should not log connection events when connection fails", (async function () {
                        var loggedEvents = [];
                        var logChannel = Chan$AgdaModeVscode.make();
                        Chan$AgdaModeVscode.on(logChannel, (function (logEvent) {
                                loggedEvents.push(logEvent);
                              }));
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var platformDeps = Mock$AgdaModeVscode.Platform.makeBasic();
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var match = await Connection$AgdaModeVscode.make(platformDeps, memento, globalStorageUri, ["/nonexistent/path"], ["nonexistent-command"], logChannel);
                        if (match.TAG !== "Ok") {
                          return Curry._3(Assert.deepStrictEqual, loggedEvents, [], undefined);
                        }
                        Assert.fail("Expected connection to fail");
                      }));
                it("should log connection events even when falling back to downloads", (async function () {
                        var loggedEvents = [];
                        var logChannel = Chan$AgdaModeVscode.make();
                        Chan$AgdaModeVscode.on(logChannel, (function (logEvent) {
                                loggedEvents.push(logEvent);
                              }));
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var platformDeps = Desktop$AgdaModeVscode.make();
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var match = await Connection$AgdaModeVscode.make(platformDeps, memento, globalStorageUri, ["/invalid/path"], ["invalid-command"], logChannel);
                        if (match.TAG !== "Ok") {
                          return Curry._3(Assert.deepStrictEqual, loggedEvents, [], undefined);
                        }
                        var len = loggedEvents.length;
                        if (len !== 1) {
                          if (len !== 0) {
                            Assert.fail("Expected exactly one connection event");
                          } else {
                            Assert.fail("Expected connection event to be logged");
                          }
                          return ;
                        }
                        var match$1 = loggedEvents[0];
                        if (match$1.TAG === "Connection") {
                          switch (match$1._0.TAG) {
                            case "ConnectedToAgda" :
                            case "ConnectedToALS" :
                                return ;
                            case "Disconnected" :
                                Assert.fail("Expected exactly one connection event");
                                return ;
                            
                          }
                        } else {
                          Assert.fail("Expected exactly one connection event");
                          return ;
                        }
                      }));
              }));
        describe("make fromPathsAndCommands scenarios", (function () {
                it("should find commands when no paths are given", (async function () {
                        var loggedEvents = [];
                        var logChannel = Chan$AgdaModeVscode.make();
                        Chan$AgdaModeVscode.on(logChannel, (function (logEvent) {
                                loggedEvents.push(logEvent);
                              }));
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var platformDeps = Desktop$AgdaModeVscode.make();
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var connection = await Connection$AgdaModeVscode.make(platformDeps, memento, globalStorageUri, [], [
                              "agda",
                              "als"
                            ], logChannel);
                        if (connection.TAG === "Ok") {
                          var len = loggedEvents.length;
                          if (len !== 1) {
                            if (len !== 0) {
                              Assert.fail("Expected exactly one connection event");
                            } else {
                              Assert.fail("Expected connection event to be logged");
                            }
                            return ;
                          }
                          var match = loggedEvents[0];
                          if (match.TAG === "Connection") {
                            switch (match._0.TAG) {
                              case "ConnectedToAgda" :
                              case "ConnectedToALS" :
                                  return ;
                              case "Disconnected" :
                                  Assert.fail("Expected exactly one connection event");
                                  return ;
                              
                            }
                          } else {
                            Assert.fail("Expected exactly one connection event");
                            return ;
                          }
                        } else {
                          Assert.fail("Expected to find agda or als");
                          return ;
                        }
                      }));
                it("should find commands even if all paths given are wrong", (async function () {
                        var loggedEvents = [];
                        var logChannel = Chan$AgdaModeVscode.make();
                        Chan$AgdaModeVscode.on(logChannel, (function (logEvent) {
                                loggedEvents.push(logEvent);
                              }));
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var platformDeps = Desktop$AgdaModeVscode.make();
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var connection = await Connection$AgdaModeVscode.make(platformDeps, memento, globalStorageUri, ["/some/invalid/path"], [
                              "agda",
                              "als"
                            ], logChannel);
                        if (connection.TAG === "Ok") {
                          var len = loggedEvents.length;
                          if (len !== 1) {
                            if (len !== 0) {
                              Assert.fail("Expected exactly one connection event");
                            } else {
                              Assert.fail("Expected connection event to be logged");
                            }
                            return ;
                          }
                          var match = loggedEvents[0];
                          if (match.TAG === "Connection") {
                            switch (match._0.TAG) {
                              case "ConnectedToAgda" :
                              case "ConnectedToALS" :
                                  return ;
                              case "Disconnected" :
                                  Assert.fail("Expected exactly one connection event");
                                  return ;
                              
                            }
                          } else {
                            Assert.fail("Expected exactly one connection event");
                            return ;
                          }
                        } else {
                          Assert.fail("Expected to find agda or als via commands");
                          return ;
                        }
                      }));
                it("should prioritize valid paths over commands", (async function () {
                        var loggedEvents = [];
                        var logChannel = Chan$AgdaModeVscode.make();
                        Chan$AgdaModeVscode.on(logChannel, (function (logEvent) {
                                loggedEvents.push(logEvent);
                              }));
                        var agdaMockPath = await Test__Util$AgdaModeVscode.Endpoint.Agda.mock("2.6.4", "agda-mock-for-path-priority");
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var platformDeps = Desktop$AgdaModeVscode.make();
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var connection = await Connection$AgdaModeVscode.make(platformDeps, memento, globalStorageUri, [agdaMockPath], ["invalid-command"], logChannel);
                        if (connection.TAG === "Ok") {
                          var connection$1 = connection._0;
                          Curry._3(Assert.deepStrictEqual, loggedEvents, [{
                                  TAG: "Connection",
                                  _0: {
                                    TAG: "ConnectedToAgda",
                                    _0: agdaMockPath,
                                    _1: "2.6.4"
                                  }
                                }], undefined);
                          if (connection$1.TAG === "Agda") {
                            Curry._3(Assert.deepStrictEqual, connection$1._1, agdaMockPath, undefined);
                            Curry._3(Assert.deepStrictEqual, connection$1._2, "2.6.4", undefined);
                          } else {
                            Assert.fail("Expected Agda connection");
                          }
                        } else {
                          Assert.fail("Expected connection to mock Agda path");
                        }
                        try {
                          Nodefs.unlinkSync(agdaMockPath);
                          return ;
                        }
                        catch (exn){
                          return ;
                        }
                      }));
                it("should respect memento picked path priority", (async function () {
                        var loggedEvents = [];
                        var logChannel = Chan$AgdaModeVscode.make();
                        Chan$AgdaModeVscode.on(logChannel, (function (logEvent) {
                                loggedEvents.push(logEvent);
                              }));
                        var agdaMockPath1 = await Test__Util$AgdaModeVscode.Endpoint.Agda.mock("2.6.3", "agda-mock-1");
                        var agdaMockPath2 = await Test__Util$AgdaModeVscode.Endpoint.Agda.mock("2.6.4", "agda-mock-2");
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        await Memento$AgdaModeVscode.Module.PickedConnection.set(memento, agdaMockPath2);
                        var platformDeps = Desktop$AgdaModeVscode.make();
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var connection = await Connection$AgdaModeVscode.make(platformDeps, memento, globalStorageUri, [
                              agdaMockPath1,
                              agdaMockPath2
                            ], [], logChannel);
                        if (connection.TAG === "Ok") {
                          Curry._3(Assert.deepStrictEqual, loggedEvents, [{
                                  TAG: "Connection",
                                  _0: {
                                    TAG: "ConnectedToAgda",
                                    _0: agdaMockPath2,
                                    _1: "2.6.4"
                                  }
                                }], undefined);
                        } else {
                          Assert.fail("Expected connection to picked mock path");
                        }
                        try {
                          Nodefs.unlinkSync(agdaMockPath1);
                          Nodefs.unlinkSync(agdaMockPath2);
                          return ;
                        }
                        catch (exn){
                          return ;
                        }
                      }));
              }));
        describe("make fromDownloads scenarios", (function () {
                it("should handle platform not supported error with logging", (async function () {
                        var loggedEvents = [];
                        var logChannel = Chan$AgdaModeVscode.make();
                        Chan$AgdaModeVscode.on(logChannel, (function (logEvent) {
                                loggedEvents.push(logEvent);
                              }));
                        var platform = {
                          os: "unsupported-os",
                          dist: "unsupported-dist",
                          codename: "unsupported-codename",
                          release: "unsupported-release"
                        };
                        var mockPlatformDeps = Mock$AgdaModeVscode.Platform.makeWithPlatformError(platform);
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var error = await Connection$AgdaModeVscode.make(mockPlatformDeps, memento, globalStorageUri, ["/invalid/path"], ["invalid-command"], logChannel);
                        if (error.TAG === "Ok") {
                          Assert.fail("Expected platform error");
                          return ;
                        }
                        var error$1 = error._0;
                        switch (error$1.TAG) {
                          case "Agda" :
                          case "ALS" :
                              Assert.fail("Expected Construction error");
                              break;
                          case "Construction" :
                              var match = error$1._0.download;
                              if (!(match !== undefined && !(typeof match !== "object" || match.TAG !== "PlatformNotSupported"))) {
                                Assert.fail("Expected PlatformNotSupported download error");
                              }
                              break;
                          
                        }
                        return Curry._3(Assert.deepStrictEqual, loggedEvents, [], undefined);
                      }));
                it("should handle download policy No with logging", (async function () {
                        var loggedEvents = [];
                        var logChannel = Chan$AgdaModeVscode.make();
                        Chan$AgdaModeVscode.on(logChannel, (function (logEvent) {
                                loggedEvents.push(logEvent);
                              }));
                        await Config$AgdaModeVscode.Connection.DownloadPolicy.set("No");
                        var getDownloadPolicyCount = {
                          contents: 0
                        };
                        var mockPlatformDeps = Mock$AgdaModeVscode.Platform.makeWithDownloadPolicyCounter("No", getDownloadPolicyCount);
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var error = await Connection$AgdaModeVscode.make(mockPlatformDeps, memento, globalStorageUri, ["/invalid/path"], ["invalid-command"], logChannel);
                        if (error.TAG === "Ok") {
                          Assert.fail("Expected error due to No download policy");
                          return ;
                        }
                        switch (error._0.TAG) {
                          case "Agda" :
                          case "ALS" :
                              Assert.fail("Expected Construction error");
                              break;
                          case "Construction" :
                              break;
                          
                        }
                        Curry._3(Assert.deepStrictEqual, getDownloadPolicyCount.contents, 0, undefined);
                        return Curry._3(Assert.deepStrictEqual, loggedEvents, [], undefined);
                      }));
                it("should handle download policy Undecided (user cancelled) with logging", (async function () {
                        var loggedEvents = [];
                        var logChannel = Chan$AgdaModeVscode.make();
                        Chan$AgdaModeVscode.on(logChannel, (function (logEvent) {
                                loggedEvents.push(logEvent);
                              }));
                        await Config$AgdaModeVscode.Connection.DownloadPolicy.set("Undecided");
                        var getDownloadPolicyCount = {
                          contents: 0
                        };
                        var mockPlatformDeps = Mock$AgdaModeVscode.Platform.makeWithDownloadPolicyCounter("Undecided", getDownloadPolicyCount);
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var error = await Connection$AgdaModeVscode.make(mockPlatformDeps, memento, globalStorageUri, ["/invalid/path"], ["invalid-command"], logChannel);
                        if (error.TAG === "Ok") {
                          Assert.fail("Expected error due to user cancelling download");
                          return ;
                        }
                        switch (error._0.TAG) {
                          case "Agda" :
                          case "ALS" :
                              Assert.fail("Expected Construction error");
                              break;
                          case "Construction" :
                              break;
                          
                        }
                        Curry._3(Assert.deepStrictEqual, getDownloadPolicyCount.contents, 1, undefined);
                        var policy = Config$AgdaModeVscode.Connection.DownloadPolicy.get();
                        Curry._3(Assert.deepStrictEqual, policy, "No", undefined);
                        return Curry._3(Assert.deepStrictEqual, loggedEvents, [], undefined);
                      }));
                it("should handle cached ALS download with logging", (async function () {
                        var loggedEvents = [];
                        var logChannel = Chan$AgdaModeVscode.make();
                        Chan$AgdaModeVscode.on(logChannel, (function (logEvent) {
                                loggedEvents.push(logEvent);
                              }));
                        var agdaMockPath = await Test__Util$AgdaModeVscode.Endpoint.Agda.mock("2.7.0.1", "agda-mock-cached");
                        await Config$AgdaModeVscode.Connection.DownloadPolicy.set("Undecided");
                        var checkedCache = {
                          contents: false
                        };
                        var mockPlatformDeps = Mock$AgdaModeVscode.Platform.makeWithCachedDownloadAndFlag(agdaMockPath, checkedCache);
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var connection = await Connection$AgdaModeVscode.make(mockPlatformDeps, memento, globalStorageUri, ["/invalid/path"], ["invalid-command"], logChannel);
                        if (connection.TAG === "Ok") {
                          var connection$1 = connection._0;
                          Curry._3(Assert.deepStrictEqual, checkedCache.contents, true, undefined);
                          if (loggedEvents.length !== 1) {
                            Assert.fail("Expected exactly one ConnectedToAgda event");
                          } else {
                            var match = loggedEvents[0];
                            if (match.TAG === "Connection") {
                              var match$1 = match._0;
                              switch (match$1.TAG) {
                                case "ConnectedToAgda" :
                                    Curry._3(Assert.deepStrictEqual, match$1._1, "2.7.0.1", undefined);
                                    break;
                                case "ConnectedToALS" :
                                case "Disconnected" :
                                    Assert.fail("Expected exactly one ConnectedToAgda event");
                                    break;
                                
                              }
                            } else {
                              Assert.fail("Expected exactly one ConnectedToAgda event");
                            }
                          }
                          if (connection$1.TAG === "Agda") {
                            Curry._3(Assert.deepStrictEqual, connection$1._1, agdaMockPath, undefined);
                            Curry._3(Assert.deepStrictEqual, connection$1._2, "2.7.0.1", undefined);
                          } else {
                            Assert.fail("Expected Agda connection");
                          }
                          var policy = Config$AgdaModeVscode.Connection.DownloadPolicy.get();
                          Curry._3(Assert.deepStrictEqual, policy, "Yes", undefined);
                        } else {
                          Assert.fail("Expected successful cached download");
                        }
                        try {
                          Nodefs.unlinkSync(agdaMockPath);
                          return ;
                        }
                        catch (exn){
                          return ;
                        }
                      }));
                it("should handle fresh ALS download with logging", (async function () {
                        var loggedEvents = [];
                        var logChannel = Chan$AgdaModeVscode.make();
                        Chan$AgdaModeVscode.on(logChannel, (function (logEvent) {
                                loggedEvents.push(logEvent);
                              }));
                        var agdaMockPath = await Test__Util$AgdaModeVscode.Endpoint.Agda.mock("2.7.0.1", "agda-mock-fresh-download");
                        await Config$AgdaModeVscode.Connection.DownloadPolicy.set("Undecided");
                        var checkedCache = {
                          contents: false
                        };
                        var checkedDownload = {
                          contents: false
                        };
                        var mockPlatformDeps = Mock$AgdaModeVscode.Platform.makeWithSuccessfulDownloadAndFlags(agdaMockPath, checkedCache, checkedDownload);
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var connection = await Connection$AgdaModeVscode.make(mockPlatformDeps, memento, globalStorageUri, ["/invalid/path"], ["invalid-command"], logChannel);
                        if (connection.TAG === "Ok") {
                          var connection$1 = connection._0;
                          Curry._3(Assert.deepStrictEqual, checkedCache.contents, true, undefined);
                          Curry._3(Assert.deepStrictEqual, checkedDownload.contents, true, undefined);
                          if (loggedEvents.length !== 1) {
                            Assert.fail("Expected exactly one ConnectedToAgda event");
                          } else {
                            var match = loggedEvents[0];
                            if (match.TAG === "Connection") {
                              var match$1 = match._0;
                              switch (match$1.TAG) {
                                case "ConnectedToAgda" :
                                    Curry._3(Assert.deepStrictEqual, match$1._1, "2.7.0.1", undefined);
                                    break;
                                case "ConnectedToALS" :
                                case "Disconnected" :
                                    Assert.fail("Expected exactly one ConnectedToAgda event");
                                    break;
                                
                              }
                            } else {
                              Assert.fail("Expected exactly one ConnectedToAgda event");
                            }
                          }
                          if (connection$1.TAG === "Agda") {
                            Curry._3(Assert.deepStrictEqual, connection$1._1, agdaMockPath, undefined);
                            Curry._3(Assert.deepStrictEqual, connection$1._2, "2.7.0.1", undefined);
                          } else {
                            Assert.fail("Expected Agda connection");
                          }
                          var policy = Config$AgdaModeVscode.Connection.DownloadPolicy.get();
                          Curry._3(Assert.deepStrictEqual, policy, "Yes", undefined);
                        } else {
                          Assert.fail("Expected successful fresh download");
                        }
                        try {
                          Nodefs.unlinkSync(agdaMockPath);
                          return ;
                        }
                        catch (exn){
                          return ;
                        }
                      }));
                it("should handle download failure with logging", (async function () {
                        var loggedEvents = [];
                        var logChannel = Chan$AgdaModeVscode.make();
                        Chan$AgdaModeVscode.on(logChannel, (function (logEvent) {
                                loggedEvents.push(logEvent);
                              }));
                        await Config$AgdaModeVscode.Connection.DownloadPolicy.set("Undecided");
                        var checkedCache = {
                          contents: false
                        };
                        var checkedDownload = {
                          contents: false
                        };
                        var mockPlatformDeps = Mock$AgdaModeVscode.Platform.makeWithDownloadFailureAndFlags(checkedCache, checkedDownload);
                        var memento = Memento$AgdaModeVscode.make(undefined);
                        var globalStorageUri = Vscode.Uri.file("/tmp/test-storage");
                        var error = await Connection$AgdaModeVscode.make(mockPlatformDeps, memento, globalStorageUri, ["/invalid/path"], ["invalid-command"], logChannel);
                        if (error.TAG === "Ok") {
                          Assert.fail("Expected download failure");
                          return ;
                        }
                        var error$1 = error._0;
                        Curry._3(Assert.deepStrictEqual, checkedCache.contents, true, undefined);
                        Curry._3(Assert.deepStrictEqual, checkedDownload.contents, true, undefined);
                        switch (error$1.TAG) {
                          case "Agda" :
                          case "ALS" :
                              Assert.fail("Expected Construction error");
                              break;
                          case "Construction" :
                              var match = error$1._0.download;
                              if (!(match !== undefined && typeof match !== "object")) {
                                Assert.fail("Expected CannotFindCompatibleALSRelease download error");
                              }
                              break;
                          
                        }
                        var policy = Config$AgdaModeVscode.Connection.DownloadPolicy.get();
                        Curry._3(Assert.deepStrictEqual, policy, "Yes", undefined);
                        return Curry._3(Assert.deepStrictEqual, loggedEvents, [], undefined);
                      }));
              }));
      }));

exports.getAgdaTarget = getAgdaTarget;
/*  Not a pure module */
