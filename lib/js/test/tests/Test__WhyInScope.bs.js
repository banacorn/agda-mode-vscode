// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Util$AgdaModeVscode = require("../../src/Util/Util.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var State__Connection$AgdaModeVscode = require("../../src/State/State__Connection.bs.js");

describe("agda-mode.why-in-scope", (function () {
        var filename = "ModuleContents.agda";
        var fileContent = {
          contents: ""
        };
        beforeEach(async function () {
              fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
            });
        afterEach(async function () {
              return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset(filename), fileContent.contents);
            });
        it("should be responded with correct responses (goal)", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                var responses = await State__Connection$AgdaModeVscode.sendRequestAndCollectResponses(ctx.state, {
                      TAG: "WhyInScope",
                      _0: "Lib.true",
                      _1: {
                        index: 0,
                        indexString: "0",
                        start: 48,
                        end: 55
                      }
                    });
                var filteredResponses = responses.filter(Test__Util$AgdaModeVscode.filteredResponse);
                var dependencyFilepath = Test__Util$AgdaModeVscode.Path.asset("Lib.agda");
                var version = ctx.state.agdaVersion;
                if (version !== undefined) {
                  var positionFormat = Util$AgdaModeVscode.Version.gte(version, "2.8.0") ? ":4.3-7" : ":4,3-7";
                  return Curry._3(Assert.deepStrictEqual, filteredResponses, [{
                                TAG: "DisplayInfo",
                                _0: {
                                  TAG: "WhyInScope",
                                  _0: "Lib.true is in scope as\n  * a constructor Lib.Bool.true brought into scope by\n    - its definition at " + dependencyFilepath + positionFormat
                                }
                              }], undefined);
                }
                Assert.fail("No Agda version found");
              }));
        it("should be responded with correct responses (global)", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                var responses = await State__Connection$AgdaModeVscode.sendRequestAndCollectResponses(ctx.state, {
                      TAG: "WhyInScopeGlobal",
                      _0: "Lib.true"
                    });
                var filteredResponses = responses.filter(Test__Util$AgdaModeVscode.filteredResponse);
                var dependencyFilepath = Test__Util$AgdaModeVscode.Path.asset("Lib.agda");
                var version = ctx.state.agdaVersion;
                if (version !== undefined) {
                  var positionFormat = Util$AgdaModeVscode.Version.gte(version, "2.8.0") ? ":4.3-7" : ":4,3-7";
                  return Curry._3(Assert.deepStrictEqual, filteredResponses, [{
                                TAG: "DisplayInfo",
                                _0: {
                                  TAG: "WhyInScope",
                                  _0: "Lib.true is in scope as\n  * a constructor Lib.Bool.true brought into scope by\n    - its definition at " + dependencyFilepath + positionFormat
                                }
                              }], undefined);
                }
                Assert.fail("No Agda version found");
              }));
      }));

/*  Not a pure module */
