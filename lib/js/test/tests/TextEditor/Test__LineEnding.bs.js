// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Agda$AgdaModeVscode = require("../../../src/Agda.bs.js");

async function openEditorWithContent(content) {
  var textDocument = await Vscode.workspace.openTextDocument({
        content: content,
        language: "agda"
      });
  return await Vscode.window.showTextDocument(textDocument, undefined);
}

describe("Conversion of offsets between LF and CRLF line endings", (function () {
        describe("Editor.computeCRLFIndices", (function () {
                it("should work", (function () {
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.OffsetConverter.computeCRLFIndices("1234\r\n78"), [4], undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.OffsetConverter.computeCRLFIndices("12\r\n56\r\n90"), [
                              2,
                              6
                            ], undefined);
                      }));
              }));
        describe("Editor.Indices.make", (function () {
                it("should work", (function () {
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(Agda$AgdaModeVscode.Indices.make(Agda$AgdaModeVscode.OffsetConverter.computeCRLFIndices("12\r\n56\r\n90")))[0], [
                              [
                                0,
                                2
                              ],
                              [
                                3,
                                5
                              ]
                            ], undefined);
                      }));
              }));
        describe("Editor.Indices.convert", (function () {
                it("should work", (function () {
                        var a = Agda$AgdaModeVscode.Indices.make(Agda$AgdaModeVscode.OffsetConverter.computeCRLFIndices("12\r\n56\r\n90"));
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 0), 0, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 0, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 1), 1, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 0, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 2), 2, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 0, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 3), 4, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 1, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 4), 5, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 1, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 5), 6, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 1, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 6), 8, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 2, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 7), 9, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 2, undefined);
                      }));
              }));
      }));

exports.openEditorWithContent = openEditorWithContent;
/*  Not a pure module */
