// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Agda$AgdaModeVscode = require("../../../src/Agda.bs.js");
var Editor$AgdaModeVscode = require("../../../src/Editor.bs.js");

var issue7 = "module Issue7 where\n-- 𝕁\na = {!   !}";

async function openEditorWithContent(content) {
  var textDocument = await Vscode.workspace.openTextDocument({
        content: content,
        language: "agda"
      });
  return await Vscode.window.showTextDocument(textDocument, undefined);
}

describe("Conversion between Agda Offsets and Editor Offsets", (function () {
        describe("Agda.OffsetConverter.characterWidth", (function () {
                it("should calculate the width of some grapheme cluster", (function () {
                        var actual = Agda$AgdaModeVscode.OffsetConverter.characterWidth("𝐀");
                        Curry._3(Assert.deepStrictEqual, actual, 1, undefined);
                      }));
                it("should calculate the width of some ordinary ASCII character", (function () {
                        var actual = Agda$AgdaModeVscode.OffsetConverter.characterWidth("a");
                        Curry._3(Assert.deepStrictEqual, actual, 1, undefined);
                      }));
              }));
        describe("Agda.OffsetConverter.computeUTF16SurrogatePairIndices", (function () {
                it("should work", (function () {
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices("𝐀𝐀𝐀𝐀\n𝐀𝐀𝐀𝐀"), [
                              0,
                              2,
                              4,
                              6,
                              9,
                              11,
                              13,
                              15
                            ], undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices("𝐀a𝐁bb𝐂c𝐃dd𝐄e𝐅𝐆𝐇\na"), [
                              0,
                              3,
                              7,
                              10,
                              14,
                              17,
                              19,
                              21
                            ], undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices(issue7), [23], undefined);
                      }));
              }));
        describe("Common.Indices.make", (function () {
                it("should work", (function () {
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(Agda$AgdaModeVscode.Indices.make(Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices("𝐀𝐀𝐀𝐀\n𝐀𝐀𝐀𝐀")))[0], [
                              [
                                0,
                                0
                              ],
                              [
                                1,
                                1
                              ],
                              [
                                2,
                                2
                              ],
                              [
                                3,
                                3
                              ],
                              [
                                4,
                                5
                              ],
                              [
                                6,
                                6
                              ],
                              [
                                7,
                                7
                              ],
                              [
                                8,
                                8
                              ]
                            ], undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(Agda$AgdaModeVscode.Indices.make(Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices("𝐀a𝐁bb𝐂c𝐃dd𝐄e𝐅𝐆𝐇\na")))[0], [
                              [
                                0,
                                0
                              ],
                              [
                                1,
                                2
                              ],
                              [
                                3,
                                5
                              ],
                              [
                                6,
                                7
                              ],
                              [
                                8,
                                10
                              ],
                              [
                                11,
                                12
                              ],
                              [
                                13,
                                13
                              ],
                              [
                                14,
                                14
                              ]
                            ], undefined);
                      }));
              }));
        describe("Common.Indices.convert", (function () {
                it("should work", (function () {
                        var a = Agda$AgdaModeVscode.Indices.make(Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices("𝐀𝐀𝐀𝐀\n𝐀𝐀𝐀𝐀"));
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 0), 0, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 0, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 1), 2, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 1, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 2), 4, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 2, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 3), 6, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 3, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 0), 0, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 0, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 4), 8, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 5), 9, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 6), 11, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 7), 13, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 8), 15, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 9), 17, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 8, undefined);
                      }));
                it("issue #7", (function () {
                        var a = Agda$AgdaModeVscode.Indices.make(Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices(issue7));
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 0), 0, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 6), 6, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 14), 14, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 19), 19, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 20), 20, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 0, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 24), 25, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 1, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 27), 28, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 28), 29, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 29), 30, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 36), 37, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 1, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 0), 0, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 0, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 6), 6, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 7), 7, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 14), 14, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 19), 19, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 20), 20, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 0, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 24), 25, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 1, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.convert(a, 0), 0, undefined);
                        Curry._3(Assert.deepStrictEqual, Agda$AgdaModeVscode.Indices.expose(a)[1], 0, undefined);
                      }));
              }));
        describe("Editor.toCodepointOffset", (function () {
                it("should do it right", (async function () {
                        var textEditor = await openEditorWithContent("𝐀a𝐁bb𝐂c\\na");
                        var f = function (n) {
                          return Editor$AgdaModeVscode.toCodepointOffset(textEditor.document, n);
                        };
                        Curry._3(Assert.equal, f(0), 0, undefined);
                        Curry._3(Assert.equal, f(1), 1, undefined);
                        Curry._3(Assert.equal, f(2), 1, undefined);
                        Curry._3(Assert.equal, f(3), 2, undefined);
                        Curry._3(Assert.equal, f(5), 3, undefined);
                        Curry._3(Assert.equal, f(6), 4, undefined);
                        Curry._3(Assert.equal, f(7), 5, undefined);
                        Curry._3(Assert.equal, f(9), 6, undefined);
                        Curry._3(Assert.equal, f(10), 7, undefined);
                        Curry._3(Assert.equal, f(11), 8, undefined);
                        return Curry._3(Assert.equal, f(12), 9, undefined);
                      }));
                it("should be a left inverse of Editor.fromCodepointOffset", (async function () {
                        var textEditor = await openEditorWithContent("𝐀a𝐁bb𝐂c\\na");
                        var f = function (n) {
                          return Editor$AgdaModeVscode.toCodepointOffset(textEditor.document, n);
                        };
                        var g = function (n) {
                          return Agda$AgdaModeVscode.Indices.convert(Agda$AgdaModeVscode.Indices.make(Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices("𝐀a𝐁bb𝐂c\\na")), n);
                        };
                        Curry._3(Assert.equal, f(g(0)), 0, undefined);
                        Curry._3(Assert.equal, f(g(1)), 1, undefined);
                        Curry._3(Assert.equal, f(g(2)), 2, undefined);
                        Curry._3(Assert.equal, f(g(3)), 3, undefined);
                        Curry._3(Assert.equal, f(g(4)), 4, undefined);
                        Curry._3(Assert.equal, f(g(5)), 5, undefined);
                        Curry._3(Assert.equal, f(g(6)), 6, undefined);
                        Curry._3(Assert.equal, f(g(7)), 7, undefined);
                        Curry._3(Assert.equal, f(g(8)), 8, undefined);
                        return Curry._3(Assert.equal, f(g(9)), 9, undefined);
                      }));
                it("should be a right inverse of Editor.fromCodepointOffset ()", (async function () {
                        var textEditor = await openEditorWithContent("𝐀a𝐁bb𝐂c\\na");
                        var f = function (n) {
                          return Agda$AgdaModeVscode.Indices.convert(Agda$AgdaModeVscode.Indices.make(Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices("𝐀a𝐁bb𝐂c\\na")), n);
                        };
                        var g = function (n) {
                          return Editor$AgdaModeVscode.toCodepointOffset(textEditor.document, n);
                        };
                        Curry._3(Assert.equal, f(g(0)), 0, undefined);
                        Curry._3(Assert.equal, f(g(2)), 2, undefined);
                        Curry._3(Assert.equal, f(g(3)), 3, undefined);
                        Curry._3(Assert.equal, f(g(5)), 5, undefined);
                        Curry._3(Assert.equal, f(g(6)), 6, undefined);
                        Curry._3(Assert.equal, f(g(7)), 7, undefined);
                        return Curry._3(Assert.equal, f(g(9)), 9, undefined);
                      }));
              }));
      }));

exports.issue7 = issue7;
exports.openEditorWithContent = openEditorWithContent;
/*  Not a pure module */
