// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Chan$AgdaModeVscode = require("../../src/Util/Chan.bs.js");
var State$AgdaModeVscode = require("../../src/State/State.bs.js");

async function determinePlatform() {
  return {
          TAG: "Ok",
          _0: "MacOS_Arm"
        };
}

async function askUserAboutDownloadPolicy() {
  return "No";
}

function alreadyDownloaded(_globalStorageUri) {
  return function () {
    return Promise.resolve(undefined);
  };
}

function downloadLatestALS(_logChannel, _memento, _globalStorageUri) {
  return function (_platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
}

function findCommand(_command, _timeoutOpt) {
  return Promise.resolve({
              TAG: "Error",
              _0: "NotFound"
            });
}

var Basic = {
  determinePlatform: determinePlatform,
  askUserAboutDownloadPolicy: askUserAboutDownloadPolicy,
  alreadyDownloaded: alreadyDownloaded,
  downloadLatestALS: downloadLatestALS,
  findCommand: findCommand
};

async function determinePlatform$1() {
  return {
          TAG: "Ok",
          _0: "MacOS_Arm"
        };
}

async function askUserAboutDownloadPolicy$1() {
  return "No";
}

function alreadyDownloaded$1(_globalStorageUri) {
  return function () {
    return Promise.resolve(undefined);
  };
}

function downloadLatestALS$1(_logChannel, _memento, _globalStorageUri) {
  return function (_platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
}

function findCommand$1(_command, _timeoutOpt) {
  return Promise.resolve({
              TAG: "Error",
              _0: "NotFound"
            });
}

var WithAgda = {
  determinePlatform: determinePlatform$1,
  askUserAboutDownloadPolicy: askUserAboutDownloadPolicy$1,
  alreadyDownloaded: alreadyDownloaded$1,
  downloadLatestALS: downloadLatestALS$1,
  findCommand: findCommand$1
};

function makeWithDownloadPolicy(policy) {
  var determinePlatform = async function () {
    return {
            TAG: "Ok",
            _0: "MacOS_Arm"
          };
  };
  var askUserAboutDownloadPolicy = async function () {
    return policy;
  };
  var alreadyDownloaded = function (_globalStorageUri) {
    return function () {
      return Promise.resolve(undefined);
    };
  };
  var downloadLatestALS = function (_logChannel, _memento, _globalStorageUri) {
    return function (_platform) {
      return Promise.resolve({
                  TAG: "Error",
                  _0: "CannotFindCompatibleALSRelease"
                });
    };
  };
  var findCommand = function (_command, _timeoutOpt) {
    return Promise.resolve({
                TAG: "Error",
                _0: "NotFound"
              });
  };
  return {
          determinePlatform: determinePlatform,
          findCommand: findCommand,
          alreadyDownloaded: alreadyDownloaded,
          downloadLatestALS: downloadLatestALS,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy
        };
}

function makeWithDownloadPolicyCounter(policy, counter) {
  var determinePlatform = async function () {
    return {
            TAG: "Ok",
            _0: "MacOS_Arm"
          };
  };
  var askUserAboutDownloadPolicy = async function () {
    counter.contents = counter.contents + 1 | 0;
    return policy;
  };
  var alreadyDownloaded = function (_globalStorageUri) {
    return function () {
      return Promise.resolve(undefined);
    };
  };
  var downloadLatestALS = function (_logChannel, _memento, _globalStorageUri) {
    return function (_platform) {
      return Promise.resolve({
                  TAG: "Error",
                  _0: "CannotFindCompatibleALSRelease"
                });
    };
  };
  var findCommand = function (_command, _timeoutOpt) {
    return Promise.resolve({
                TAG: "Error",
                _0: "NotFound"
              });
  };
  return {
          determinePlatform: determinePlatform,
          findCommand: findCommand,
          alreadyDownloaded: alreadyDownloaded,
          downloadLatestALS: downloadLatestALS,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy
        };
}

function makeWithSuccessfulDownload(downloadedPath) {
  var determinePlatform = async function () {
    return {
            TAG: "Ok",
            _0: "MacOS_Arm"
          };
  };
  var askUserAboutDownloadPolicy = async function () {
    return "Yes";
  };
  var alreadyDownloaded = function (_globalStorageUri) {
    return function () {
      return Promise.resolve(undefined);
    };
  };
  var downloadLatestALS = function (_logChannel, _memento, _globalStorageUri) {
    return function (_platform) {
      return Promise.resolve({
                  TAG: "Ok",
                  _0: downloadedPath
                });
    };
  };
  var findCommand = function (_command, _timeoutOpt) {
    return Promise.resolve({
                TAG: "Error",
                _0: "NotFound"
              });
  };
  return {
          determinePlatform: determinePlatform,
          findCommand: findCommand,
          alreadyDownloaded: alreadyDownloaded,
          downloadLatestALS: downloadLatestALS,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy
        };
}

function makeWithCachedDownload(cachedPath) {
  var determinePlatform = async function () {
    return {
            TAG: "Ok",
            _0: "MacOS_Arm"
          };
  };
  var askUserAboutDownloadPolicy = async function () {
    return "Yes";
  };
  var alreadyDownloaded = function (_globalStorageUri) {
    return function () {
      return Promise.resolve(cachedPath);
    };
  };
  var downloadLatestALS = function (_logChannel, _memento, _globalStorageUri) {
    return function (_platform) {
      return Promise.resolve({
                  TAG: "Error",
                  _0: "CannotFindCompatibleALSRelease"
                });
    };
  };
  var findCommand = function (_command, _timeoutOpt) {
    return Promise.resolve({
                TAG: "Error",
                _0: "NotFound"
              });
  };
  return {
          determinePlatform: determinePlatform,
          findCommand: findCommand,
          alreadyDownloaded: alreadyDownloaded,
          downloadLatestALS: downloadLatestALS,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy
        };
}

function makeBasic() {
  return {
          determinePlatform: determinePlatform,
          findCommand: findCommand,
          alreadyDownloaded: alreadyDownloaded,
          downloadLatestALS: downloadLatestALS,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy
        };
}

async function determinePlatform$2() {
  return {
          TAG: "Ok",
          _0: "MacOS_Arm"
        };
}

async function askUserAboutDownloadPolicy$2() {
  return "No";
}

function alreadyDownloaded$2(_globalStorageUri) {
  return function () {
    return Promise.resolve(undefined);
  };
}

function downloadLatestALS$2(_logChannel, _memento, _globalStorageUri) {
  return function (_platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
}

function findCommand$2(command, _timeoutOpt) {
  if (command === "agda") {
    return Promise.resolve({
                TAG: "Ok",
                _0: "/usr/bin/agda"
              });
  } else {
    return Promise.resolve({
                TAG: "Error",
                _0: "NotFound"
              });
  }
}

var WithAgdaInPath = {
  determinePlatform: determinePlatform$2,
  askUserAboutDownloadPolicy: askUserAboutDownloadPolicy$2,
  alreadyDownloaded: alreadyDownloaded$2,
  downloadLatestALS: downloadLatestALS$2,
  findCommand: findCommand$2
};

function makeWithAgda() {
  return {
          determinePlatform: determinePlatform$1,
          findCommand: findCommand$1,
          alreadyDownloaded: alreadyDownloaded$1,
          downloadLatestALS: downloadLatestALS$1,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy$1
        };
}

function makeWithAgdaInPath() {
  return {
          determinePlatform: determinePlatform$2,
          findCommand: findCommand$2,
          alreadyDownloaded: alreadyDownloaded$2,
          downloadLatestALS: downloadLatestALS$2,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy$2
        };
}

var Platform = {
  Basic: Basic,
  WithAgda: WithAgda,
  makeWithDownloadPolicy: makeWithDownloadPolicy,
  makeWithDownloadPolicyCounter: makeWithDownloadPolicyCounter,
  makeWithSuccessfulDownload: makeWithSuccessfulDownload,
  makeWithCachedDownload: makeWithCachedDownload,
  makeBasic: makeBasic,
  WithAgdaInPath: WithAgdaInPath,
  makeWithAgda: makeWithAgda,
  makeWithAgdaInPath: makeWithAgdaInPath
};

function make() {
  return {
          inputMethod: Chan$AgdaModeVscode.make(),
          responseHandled: Chan$AgdaModeVscode.make(),
          commandHandled: Chan$AgdaModeVscode.make(),
          log: Chan$AgdaModeVscode.make()
        };
}

var Channels = {
  make: make
};

function make$1(platformDeps, channels) {
  var mockEditor = {
      document: { fileName: "test.agda" }
    };
  var mockUri = Vscode.Uri.file("/test/path");
  return State$AgdaModeVscode.make(platformDeps, channels, mockUri, mockUri, undefined, mockEditor, undefined);
}

var State = {
  make: make$1
};

exports.Platform = Platform;
exports.Channels = Channels;
exports.State = State;
/* vscode Not a pure module */
