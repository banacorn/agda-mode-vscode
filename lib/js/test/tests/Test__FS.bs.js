// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Nodefs = require("node:fs");
var Nodeos = require("node:os");
var Nodepath = require("node:path");
var FS$AgdaModeVscode = require("../../src/FS.bs.js");

describe("FS", (function () {
        this.timeout(10000);
        describe("readDirectory", (function () {
                it("should return directory contents when directory exists", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "fs-test-" + String(Date.now() | 0));
                        await Nodefs.promises.mkdir(tempDir, {
                              recursive: true,
                              mode: 511
                            });
                        Nodefs.writeFileSync(Nodepath.join(tempDir, "test.txt"), Buffer.from("test"));
                        await Nodefs.promises.mkdir(Nodepath.join(tempDir, "subdir"), {
                              recursive: true,
                              mode: 511
                            });
                        var uri = Vscode.Uri.file(tempDir);
                        var result = await FS$AgdaModeVscode.readDirectory(uri);
                        if (result.TAG === "Ok") {
                          var entries = result._0;
                          var names = entries.map(function (param) {
                                return param[0];
                              });
                          Assert.ok(names.includes("test.txt"));
                          Assert.ok(names.includes("subdir"));
                          var testFileEntry = entries.find(function (param) {
                                return param[0] === "test.txt";
                              });
                          var subdirEntry = entries.find(function (param) {
                                return param[0] === "subdir";
                              });
                          if (testFileEntry !== undefined && subdirEntry !== undefined) {
                            Assert.ok(true);
                          } else {
                            Assert.fail("Expected to find both file and directory entries");
                          }
                        } else {
                          Assert.fail("Expected Ok, got Error: " + result._0);
                        }
                        Nodefs.unlinkSync(Nodepath.join(tempDir, "test.txt"));
                        Nodefs.rmdirSync(Nodepath.join(tempDir, "subdir"));
                        Nodefs.rmdirSync(tempDir);
                      }));
                it("should return Error when directory does not exist", (async function () {
                        var nonExistentPath = Nodepath.join(Nodeos.tmpdir(), "non-existent-" + String(Date.now() | 0));
                        var uri = Vscode.Uri.file(nonExistentPath);
                        var result = await FS$AgdaModeVscode.readDirectory(uri);
                        if (result.TAG === "Ok") {
                          Assert.fail("Expected Error for non-existent directory, got Ok");
                          return ;
                        }
                        Assert.ok(result._0.length > 0);
                      }));
                it("should return Error when path is a file, not directory", (async function () {
                        var tempFile = Nodepath.join(Nodeos.tmpdir(), "fs-test-file-" + String(Date.now() | 0) + ".txt");
                        Nodefs.writeFileSync(tempFile, Buffer.from("test content"));
                        var uri = Vscode.Uri.file(tempFile);
                        var result = await FS$AgdaModeVscode.readDirectory(uri);
                        if (result.TAG === "Ok") {
                          Assert.fail("Expected Error when trying to read file as directory, got Ok");
                        } else {
                          Assert.ok(result._0.length > 0);
                        }
                        Nodefs.unlinkSync(tempFile);
                      }));
              }));
        describe("copy", (function () {
                it("should copy file successfully when source exists", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "fs-copy-test-" + String(Date.now() | 0));
                        var sourceFile = Nodepath.join(tempDir, "source.txt");
                        var destFile = Nodepath.join(tempDir, "dest.txt");
                        await Nodefs.promises.mkdir(tempDir, {
                              recursive: true,
                              mode: 511
                            });
                        var content = "test file content";
                        Nodefs.writeFileSync(sourceFile, Buffer.from(content));
                        var sourceUri = Vscode.Uri.file(sourceFile);
                        var destUri = Vscode.Uri.file(destFile);
                        var result = await FS$AgdaModeVscode.copy(sourceUri, destUri);
                        if (result.TAG === "Ok") {
                          var exists = Nodefs.existsSync(destFile);
                          Assert.ok(exists);
                          var destContent = Nodefs.readFileSync(destFile).toString();
                          Curry._3(Assert.deepStrictEqual, destContent, content, undefined);
                        } else {
                          Assert.fail("Expected Ok, got Error: " + result._0);
                        }
                        Nodefs.unlinkSync(sourceFile);
                        Nodefs.unlinkSync(destFile);
                        Nodefs.rmdirSync(tempDir);
                      }));
                it("should return Error when source file does not exist", (async function () {
                        var nonExistentSource = Nodepath.join(Nodeos.tmpdir(), "non-existent-source-" + String(Date.now() | 0) + ".txt");
                        var destFile = Nodepath.join(Nodeos.tmpdir(), "dest-" + String(Date.now() | 0) + ".txt");
                        var sourceUri = Vscode.Uri.file(nonExistentSource);
                        var destUri = Vscode.Uri.file(destFile);
                        var result = await FS$AgdaModeVscode.copy(sourceUri, destUri);
                        if (result.TAG === "Ok") {
                          Assert.fail("Expected Error for non-existent source, got Ok");
                          return ;
                        }
                        Assert.ok(result._0.length > 0);
                      }));
                it("should create parent directories when copying to non-existent destination directory", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "fs-copy-test-" + String(Date.now() | 0));
                        var sourceFile = Nodepath.join(tempDir, "source.txt");
                        var destFile = Nodepath.join(tempDir, "nonexistent", "dest.txt");
                        await Nodefs.promises.mkdir(tempDir, {
                              recursive: true,
                              mode: 511
                            });
                        Nodefs.writeFileSync(sourceFile, Buffer.from("test content"));
                        var sourceUri = Vscode.Uri.file(sourceFile);
                        var destUri = Vscode.Uri.file(destFile);
                        var result = await FS$AgdaModeVscode.copy(sourceUri, destUri);
                        if (result.TAG === "Ok") {
                          var exists = Nodefs.existsSync(destFile);
                          Assert.ok(exists);
                          var content = Nodefs.readFileSync(destFile).toString();
                          Curry._3(Assert.deepStrictEqual, content, "test content", undefined);
                        } else {
                          Assert.fail("Expected Ok, got Error: " + result._0);
                        }
                        Nodefs.unlinkSync(sourceFile);
                        Nodefs.unlinkSync(destFile);
                        Nodefs.rmdirSync(Nodepath.join(tempDir, "nonexistent"));
                        Nodefs.rmdirSync(tempDir);
                      }));
              }));
        describe("createDirectory", (function () {
                it("should create directory successfully when parent exists", (async function () {
                        var parentDir = Nodepath.join(Nodeos.tmpdir(), "fs-mkdir-test-" + String(Date.now() | 0));
                        var newDir = Nodepath.join(parentDir, "newdir");
                        await Nodefs.promises.mkdir(parentDir, {
                              recursive: true,
                              mode: 511
                            });
                        var uri = Vscode.Uri.file(newDir);
                        var result = await FS$AgdaModeVscode.createDirectory(uri);
                        if (result.TAG === "Ok") {
                          var exists = Nodefs.existsSync(newDir);
                          Assert.ok(exists);
                        } else {
                          Assert.fail("Expected Ok, got Error: " + result._0);
                        }
                        Nodefs.rmdirSync(newDir);
                        Nodefs.rmdirSync(parentDir);
                      }));
                it("should create parent directories recursively when they don't exist", (async function () {
                        var nonExistentParent = Nodepath.join(Nodeos.tmpdir(), "non-existent-parent-" + String(Date.now() | 0));
                        var newDir = Nodepath.join(nonExistentParent, "newdir");
                        var uri = Vscode.Uri.file(newDir);
                        var result = await FS$AgdaModeVscode.createDirectory(uri);
                        if (result.TAG === "Ok") {
                          var exists = Nodefs.existsSync(newDir);
                          Assert.ok(exists);
                          var parentExists = Nodefs.existsSync(nonExistentParent);
                          Assert.ok(parentExists);
                        } else {
                          Assert.fail("Expected Ok, got Error: " + result._0);
                        }
                        Nodefs.rmdirSync(newDir);
                        Nodefs.rmdirSync(nonExistentParent);
                      }));
                it("should succeed when directory already exists (idempotent)", (async function () {
                        var tempDir = Nodepath.join(Nodeos.tmpdir(), "fs-mkdir-existing-" + String(Date.now() | 0));
                        await Nodefs.promises.mkdir(tempDir, {
                              recursive: true,
                              mode: 511
                            });
                        var uri = Vscode.Uri.file(tempDir);
                        var result = await FS$AgdaModeVscode.createDirectory(uri);
                        if (result.TAG === "Ok") {
                          var exists = Nodefs.existsSync(tempDir);
                          Assert.ok(exists);
                        } else {
                          Assert.fail("Expected Ok, got Error: " + result._0);
                        }
                        Nodefs.rmdirSync(tempDir);
                      }));
              }));
      }));

/*  Not a pure module */
