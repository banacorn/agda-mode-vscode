// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Goals$AgdaModeVscode = require("../../src/Goals.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var State__Connection$AgdaModeVscode = require("../../src/State/State__Connection.bs.js");

function run(normalization) {
  var fileContent = {
    contents: ""
  };
  beforeEach(async function () {
        fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Issue204.agda"));
      });
  afterEach(async function () {
        return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset("Issue204.agda"), fileContent.contents);
      });
  it("should be responded with correct responses", (async function () {
          var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Issue204.agda");
          var responses = await State__Connection$AgdaModeVscode.sendRequestAndCollectResponses(ctx.state, {
                TAG: "SolveConstraintsGlobal",
                _0: normalization
              });
          var filteredResponses = responses.filter(Test__Util$AgdaModeVscode.filteredResponse);
          Curry._3(Assert.deepStrictEqual, filteredResponses, [
                {
                  TAG: "InteractionPoints",
                  _0: [
                    0,
                    1
                  ]
                },
                {
                  TAG: "SolveAll",
                  _0: [
                    [
                      0,
                      "4"
                    ],
                    [
                      1,
                      "4"
                    ]
                  ]
                }
              ], undefined);
          return await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
        }));
  it("should solve all goals", (async function () {
          var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Issue204.agda");
          await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, {
                TAG: "SolveConstraints",
                _0: normalization
              }, undefined, undefined);
          Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.size(ctx.state.goals), 0, undefined);
          var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Issue204.agda"));
          var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Issue204.agda.out"));
          Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
          return await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
        }));
}

describe("agda-mode.solve-constraints", (function () {
        describe("AsIs", (function () {
                run("AsIs");
              }));
        describe("Simplified", (function () {
                run("Simplified");
              }));
        describe("Normalised", (function () {
                run("Normalised");
              }));
        describe("HeadNormal", (function () {
                run("HeadNormal");
              }));
      }));

exports.run = run;
/*  Not a pure module */
