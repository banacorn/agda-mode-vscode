// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var TokenChange$AgdaModeVscode = require("../../src/Tokens/TokenChange.bs.js");

describe("TokenChange", (function () {
        describe("TokenChange.toString", (function () {
                it("should format change with removal and insertion", (function () {
                        var result = TokenChange$AgdaModeVscode.toString({
                              offset: 10,
                              removed: 5,
                              inserted: 3
                            });
                        Curry._3(Assert.deepStrictEqual, result, "-5 +3 @ 10", undefined);
                      }));
                it("should format change with only removal", (function () {
                        var result = TokenChange$AgdaModeVscode.toString({
                              offset: 20,
                              removed: 8,
                              inserted: 0
                            });
                        Curry._3(Assert.deepStrictEqual, result, "-8 +0 @ 20", undefined);
                      }));
                it("should format change with only insertion", (function () {
                        var result = TokenChange$AgdaModeVscode.toString({
                              offset: 15,
                              removed: 0,
                              inserted: 7
                            });
                        Curry._3(Assert.deepStrictEqual, result, "-0 +7 @ 15", undefined);
                      }));
                it("should format change with no removal or insertion", (function () {
                        var result = TokenChange$AgdaModeVscode.toString({
                              offset: 5,
                              removed: 0,
                              inserted: 0
                            });
                        Curry._3(Assert.deepStrictEqual, result, "-0 +0 @ 5", undefined);
                      }));
              }));
        describe("TokenChange.fromTextDocumentContentChangeEvent", (function () {
                it("should convert VSCode text document change event", (function () {
                        var mockEvent = {
        rangeOffset: 25,
        rangeLength: 10,
        text: "hello world"
      };
                        var result = TokenChange$AgdaModeVscode.fromTextDocumentContentChangeEvent(mockEvent);
                        Curry._3(Assert.deepStrictEqual, result, {
                              offset: 25,
                              removed: 10,
                              inserted: 11
                            }, undefined);
                      }));
                it("should handle empty text insertion", (function () {
                        var mockEvent = {
        rangeOffset: 0,
        rangeLength: 5,
        text: ""
      };
                        var result = TokenChange$AgdaModeVscode.fromTextDocumentContentChangeEvent(mockEvent);
                        Curry._3(Assert.deepStrictEqual, result, {
                              offset: 0,
                              removed: 5,
                              inserted: 0
                            }, undefined);
                      }));
                it("should handle insertion at position with no removal", (function () {
                        var mockEvent = {
        rangeOffset: 15,
        rangeLength: 0,
        text: "new text"
      };
                        var result = TokenChange$AgdaModeVscode.fromTextDocumentContentChangeEvent(mockEvent);
                        Curry._3(Assert.deepStrictEqual, result, {
                              offset: 15,
                              removed: 0,
                              inserted: 8
                            }, undefined);
                      }));
              }));
        describe("TokenChange.delta", (function () {
                it("should calculate positive delta for more insertion than removal", (function () {
                        var result = TokenChange$AgdaModeVscode.delta({
                              offset: 10,
                              removed: 3,
                              inserted: 8
                            });
                        Curry._3(Assert.deepStrictEqual, result, 5, undefined);
                      }));
                it("should calculate negative delta for more removal than insertion", (function () {
                        var result = TokenChange$AgdaModeVscode.delta({
                              offset: 10,
                              removed: 10,
                              inserted: 3
                            });
                        Curry._3(Assert.deepStrictEqual, result, -7, undefined);
                      }));
                it("should calculate zero delta for equal removal and insertion", (function () {
                        var result = TokenChange$AgdaModeVscode.delta({
                              offset: 10,
                              removed: 5,
                              inserted: 5
                            });
                        Curry._3(Assert.deepStrictEqual, result, 0, undefined);
                      }));
                it("should calculate delta for only insertion", (function () {
                        var result = TokenChange$AgdaModeVscode.delta({
                              offset: 10,
                              removed: 0,
                              inserted: 7
                            });
                        Curry._3(Assert.deepStrictEqual, result, 7, undefined);
                      }));
                it("should calculate delta for only removal", (function () {
                        var result = TokenChange$AgdaModeVscode.delta({
                              offset: 10,
                              removed: 6,
                              inserted: 0
                            });
                        Curry._3(Assert.deepStrictEqual, result, -6, undefined);
                      }));
              }));
        describe("TokenChange.totalDelta", (function () {
                it("should calculate total delta for empty array", (function () {
                        var result = TokenChange$AgdaModeVscode.totalDelta([]);
                        Curry._3(Assert.deepStrictEqual, result, 0, undefined);
                      }));
                it("should calculate total delta for single change", (function () {
                        var changes = [{
                            offset: 10,
                            removed: 5,
                            inserted: 8
                          }];
                        var result = TokenChange$AgdaModeVscode.totalDelta(changes);
                        Curry._3(Assert.deepStrictEqual, result, 3, undefined);
                      }));
                it("should calculate total delta for multiple changes", (function () {
                        var changes = [
                          {
                            offset: 10,
                            removed: 5,
                            inserted: 8
                          },
                          {
                            offset: 20,
                            removed: 3,
                            inserted: 1
                          },
                          {
                            offset: 30,
                            removed: 0,
                            inserted: 4
                          }
                        ];
                        var result = TokenChange$AgdaModeVscode.totalDelta(changes);
                        Curry._3(Assert.deepStrictEqual, result, 5, undefined);
                      }));
                it("should handle negative total delta", (function () {
                        var changes = [
                          {
                            offset: 10,
                            removed: 10,
                            inserted: 2
                          },
                          {
                            offset: 30,
                            removed: 5,
                            inserted: 1
                          }
                        ];
                        var result = TokenChange$AgdaModeVscode.totalDelta(changes);
                        Curry._3(Assert.deepStrictEqual, result, -12, undefined);
                      }));
              }));
        describe("TokenChange.isUseless", (function () {
                it("should return true for change with no removal or insertion", (function () {
                        var result = TokenChange$AgdaModeVscode.isUseless({
                              offset: 10,
                              removed: 0,
                              inserted: 0
                            });
                        Curry._3(Assert.deepStrictEqual, result, true, undefined);
                      }));
                it("should return false for change with only removal", (function () {
                        var result = TokenChange$AgdaModeVscode.isUseless({
                              offset: 10,
                              removed: 5,
                              inserted: 0
                            });
                        Curry._3(Assert.deepStrictEqual, result, false, undefined);
                      }));
                it("should return false for change with only insertion", (function () {
                        var result = TokenChange$AgdaModeVscode.isUseless({
                              offset: 10,
                              removed: 0,
                              inserted: 3
                            });
                        Curry._3(Assert.deepStrictEqual, result, false, undefined);
                      }));
                it("should return false for change with both removal and insertion", (function () {
                        var result = TokenChange$AgdaModeVscode.isUseless({
                              offset: 10,
                              removed: 4,
                              inserted: 6
                            });
                        Curry._3(Assert.deepStrictEqual, result, false, undefined);
                      }));
              }));
        describe("TokenChange.removedInterval", (function () {
                it("should return None for change with no removal", (function () {
                        var result = TokenChange$AgdaModeVscode.removedInterval({
                              offset: 10,
                              removed: 0,
                              inserted: 5
                            });
                        Curry._3(Assert.deepStrictEqual, result, undefined, undefined);
                      }));
                it("should return interval for change with removal", (function () {
                        var result = TokenChange$AgdaModeVscode.removedInterval({
                              offset: 15,
                              removed: 8,
                              inserted: 3
                            });
                        Curry._3(Assert.deepStrictEqual, result, [
                              15,
                              23
                            ], undefined);
                      }));
                it("should return correct interval for removal at start", (function () {
                        var result = TokenChange$AgdaModeVscode.removedInterval({
                              offset: 0,
                              removed: 5,
                              inserted: 0
                            });
                        Curry._3(Assert.deepStrictEqual, result, [
                              0,
                              5
                            ], undefined);
                      }));
                it("should return correct interval for single character removal", (function () {
                        var result = TokenChange$AgdaModeVscode.removedInterval({
                              offset: 10,
                              removed: 1,
                              inserted: 2
                            });
                        Curry._3(Assert.deepStrictEqual, result, [
                              10,
                              11
                            ], undefined);
                      }));
              }));
        describe("TokenChange.areValid", (function () {
                it("should return true for empty array", (function () {
                        var result = TokenChange$AgdaModeVscode.areValid([]);
                        Curry._3(Assert.deepStrictEqual, result, true, undefined);
                      }));
                it("should return true for single change", (function () {
                        var changes = [{
                            offset: 10,
                            removed: 5,
                            inserted: 3
                          }];
                        var result = TokenChange$AgdaModeVscode.areValid(changes);
                        Curry._3(Assert.deepStrictEqual, result, true, undefined);
                      }));
                it("should return true for non-overlapping changes in ascending order", (function () {
                        var changes = [
                          {
                            offset: 5,
                            removed: 3,
                            inserted: 2
                          },
                          {
                            offset: 15,
                            removed: 4,
                            inserted: 6
                          },
                          {
                            offset: 25,
                            removed: 2,
                            inserted: 1
                          }
                        ];
                        var result = TokenChange$AgdaModeVscode.areValid(changes);
                        Curry._3(Assert.deepStrictEqual, result, true, undefined);
                      }));
                it("should return true for adjacent non-overlapping changes", (function () {
                        var changes = [
                          {
                            offset: 10,
                            removed: 5,
                            inserted: 3
                          },
                          {
                            offset: 15,
                            removed: 2,
                            inserted: 4
                          }
                        ];
                        var result = TokenChange$AgdaModeVscode.areValid(changes);
                        Curry._3(Assert.deepStrictEqual, result, true, undefined);
                      }));
                it("should return false for overlapping changes", (function () {
                        var changes = [
                          {
                            offset: 10,
                            removed: 8,
                            inserted: 3
                          },
                          {
                            offset: 15,
                            removed: 2,
                            inserted: 4
                          }
                        ];
                        var result = TokenChange$AgdaModeVscode.areValid(changes);
                        Curry._3(Assert.deepStrictEqual, result, false, undefined);
                      }));
                it("should return false for changes in wrong order", (function () {
                        var changes = [
                          {
                            offset: 20,
                            removed: 3,
                            inserted: 2
                          },
                          {
                            offset: 10,
                            removed: 4,
                            inserted: 1
                          }
                        ];
                        var result = TokenChange$AgdaModeVscode.areValid(changes);
                        Curry._3(Assert.deepStrictEqual, result, false, undefined);
                      }));
                it("should handle changes with zero removal", (function () {
                        var changes = [
                          {
                            offset: 10,
                            removed: 0,
                            inserted: 5
                          },
                          {
                            offset: 15,
                            removed: 3,
                            inserted: 2
                          }
                        ];
                        var result = TokenChange$AgdaModeVscode.areValid(changes);
                        Curry._3(Assert.deepStrictEqual, result, true, undefined);
                      }));
                it("should handle changes with zero insertion", (function () {
                        var changes = [
                          {
                            offset: 10,
                            removed: 5,
                            inserted: 0
                          },
                          {
                            offset: 20,
                            removed: 3,
                            inserted: 7
                          }
                        ];
                        var result = TokenChange$AgdaModeVscode.areValid(changes);
                        Curry._3(Assert.deepStrictEqual, result, true, undefined);
                      }));
              }));
        describe("TokenChange.translate", (function () {
                it("should translate change offset by positive delta", (function () {
                        var result = TokenChange$AgdaModeVscode.translate({
                              offset: 10,
                              removed: 5,
                              inserted: 3
                            }, 7);
                        Curry._3(Assert.deepStrictEqual, result, {
                              offset: 17,
                              removed: 5,
                              inserted: 3
                            }, undefined);
                      }));
                it("should translate change offset by negative delta", (function () {
                        var result = TokenChange$AgdaModeVscode.translate({
                              offset: 20,
                              removed: 3,
                              inserted: 8
                            }, -5);
                        Curry._3(Assert.deepStrictEqual, result, {
                              offset: 15,
                              removed: 3,
                              inserted: 8
                            }, undefined);
                      }));
                it("should translate change offset by zero delta", (function () {
                        var result = TokenChange$AgdaModeVscode.translate({
                              offset: 15,
                              removed: 4,
                              inserted: 2
                            }, 0);
                        Curry._3(Assert.deepStrictEqual, result, {
                              offset: 15,
                              removed: 4,
                              inserted: 2
                            }, undefined);
                      }));
                it("should preserve removed and inserted values", (function () {
                        var result = TokenChange$AgdaModeVscode.translate({
                              offset: 100,
                              removed: 25,
                              inserted: 40
                            }, 50);
                        Curry._3(Assert.deepStrictEqual, result, {
                              offset: 150,
                              removed: 25,
                              inserted: 40
                            }, undefined);
                      }));
              }));
      }));

/*  Not a pure module */
