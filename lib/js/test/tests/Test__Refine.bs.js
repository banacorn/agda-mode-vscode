// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Goals$AgdaModeVscode = require("../../src/Goals.bs.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");

describe("agda-mode.refine", (function () {
        this.timeout(4000);
        describe("On GiveString 1 (Issue #158)", (function () {
                var fileContent = {
                  contents: ""
                };
                var filename = "Refine.agda";
                beforeEach(async function () {
                      fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                    });
                afterEach(async function () {
                      return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset(filename), fileContent.contents);
                    });
                it("should result in the correct refinement", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(13, 9)), undefined);
                        var actual = Goals$AgdaModeVscode.serialize(ctx.state.goals);
                        Curry._3(Assert.deepStrictEqual, actual, [
                              "#1 [26:11-18)",
                              "#2 [26:19-26)",
                              "#3 [15:30-37)",
                              "#4 [16:30-37)",
                              "#5 [17:30-37)"
                            ], undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual$1 = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveString1.out"));
                        return Curry._3(Assert.deepStrictEqual, actual$1, expected, undefined);
                      }));
              }));
        describe("On GiveString 2", (function () {
                var fileContent = {
                  contents: ""
                };
                var filename = "Refine.agda";
                beforeEach(async function () {
                      fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                    });
                afterEach(async function () {
                      return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset(filename), fileContent.contents);
                    });
                it("should result in the correct refinement", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "fst");
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveString2.out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
              }));
        describe("On GiveParen", (function () {
                var fileContent = {
                  contents: ""
                };
                var filename = "Refine.agda";
                beforeEach(async function () {
                      fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                    });
                afterEach(async function () {
                      return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset(filename), fileContent.contents);
                    });
                it("should result in the correct refinement with simple expression", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "fst ? ?");
                        Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals), [
                              "#0 [14:7-14)",
                              "#2 [22:33-40)",
                              "#3 [22:16-23)",
                              "#4 [22:24-31)"
                            ], undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveString2.out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
                it("should handle payload with leading spaces and track goal positions correctly", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "  fst ? ?");
                        Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals), [
                              "#0 [14:7-14)",
                              "#2 [22:33-40)",
                              "#3 [22:16-23)",
                              "#4 [22:24-31)"
                            ], undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveString2.out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
                it("should handle payload with trailing spaces and track goal positions correctly", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "fst ? ?  ");
                        Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals), [
                              "#0 [14:7-14)",
                              "#2 [22:33-40)",
                              "#3 [22:16-23)",
                              "#4 [22:24-31)"
                            ], undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveString2.out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
                it("should handle payload with leading and trailing spaces and track goal positions correctly", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "  fst ? ?  ");
                        Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals), [
                              "#0 [14:7-14)",
                              "#2 [22:33-40)",
                              "#3 [22:16-23)",
                              "#4 [22:24-31)"
                            ], undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveString2.out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
                it("should handle payload with leading newline and track goal positions correctly", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "\nfst ? ?");
                        Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals), [
                              "#0 [14:7-14)",
                              "#2 [22:33-40)",
                              "#3 [22:16-23)",
                              "#4 [22:24-31)"
                            ], undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveString2.out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
                it("should handle payload with trailing newline and track goal positions correctly", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "fst ? ?\n");
                        Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals), [
                              "#0 [14:7-14)",
                              "#2 [22:33-40)",
                              "#3 [22:16-23)",
                              "#4 [22:24-31)"
                            ], undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveString2.out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
                it("should handle multiline payload with spaces and track goal positions correctly", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "  fst\n    ?\n    ?  ");
                        Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals), [
                              "#0 [14:7-14)",
                              "#2 [24:14-21)",
                              "#3 [23:5-12)",
                              "#4 [24:5-12)"
                            ], undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var $$document = ctx.state.editor.document;
                        var refinedContent = Editor$AgdaModeVscode.$$Text.get($$document, new Vscode.Range(new Vscode.Position(21, 10), new Vscode.Position(23, 12)));
                        return Curry._3(Assert.strictEqual, refinedContent, "(fst\n    {!   !}\n    {!   !})", undefined);
                      }));
                it("should handle payload with mixed whitespace and track goal positions correctly", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "\n  fst ? ?  \n");
                        Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals), [
                              "#0 [14:7-14)",
                              "#2 [22:33-40)",
                              "#3 [22:16-23)",
                              "#4 [22:24-31)"
                            ], undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveString2.out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
              }));
        describe("On GiveNoParen (Issue #236)", (function () {
                var fileContent = {
                  contents: ""
                };
                var filename = "Refine.agda";
                beforeEach(async function () {
                      fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                    });
                afterEach(async function () {
                      return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset(filename), fileContent.contents);
                    });
                it("should result in the correct refinement with simple expression", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "true");
                        Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals), [
                              "#0 [14:7-14)",
                              "#2 [22:16-23)"
                            ], undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveNoParen.out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
                it("should handle payload with leading spaces and track goal positions correctly", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "  true");
                        Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals), [
                              "#0 [14:7-14)",
                              "#2 [22:16-23)"
                            ], undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveNoParen.out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
                it("should handle payload with trailing spaces and track goal positions correctly", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "true  ");
                        Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals), [
                              "#0 [14:7-14)",
                              "#2 [22:16-23)"
                            ], undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveNoParen.out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
                it("should handle payload with leading and trailing spaces and track goal positions correctly", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "  true  ");
                        Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals), [
                              "#0 [14:7-14)",
                              "#2 [22:16-23)"
                            ], undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveNoParen.out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
                it("should handle payload with leading newline and track goal positions correctly", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "\ntrue");
                        Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals), [
                              "#0 [14:7-14)",
                              "#2 [22:16-23)"
                            ], undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveNoParen.out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
                it("should handle payload with trailing newline and track goal positions correctly", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "true\n");
                        Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals), [
                              "#0 [14:7-14)",
                              "#2 [22:16-23)"
                            ], undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveNoParen.out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
                it("should handle multiline payload with spaces and track goal positions correctly", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "  true\n    \n      ");
                        Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals), [
                              "#0 [14:7-14)",
                              "#2 [22:16-23)"
                            ], undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var $$document = ctx.state.editor.document;
                        var refinedContent = Editor$AgdaModeVscode.$$Text.get($$document, new Vscode.Range(new Vscode.Position(21, 10), new Vscode.Position(21, 14)));
                        return Curry._3(Assert.strictEqual, refinedContent, "true", undefined);
                      }));
                it("should handle payload with mixed whitespace and track goal positions correctly", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "\n  true  \n");
                        Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.serialize(ctx.state.goals), [
                              "#0 [14:7-14)",
                              "#2 [22:16-23)"
                            ], undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveNoParen.out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
              }));
      }));

/*  Not a pure module */
