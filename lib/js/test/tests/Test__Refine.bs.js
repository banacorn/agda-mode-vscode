// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");

describe.only("agda-mode.refine", (function () {
        this.timeout(4000);
        describe("On GiveString 1, Issue #158", (function () {
                var fileContent = {
                  contents: ""
                };
                var filename = "Refine.agda";
                beforeEach(async function () {
                      fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                    });
                afterEach(async function () {
                      return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset(filename), fileContent.contents);
                    });
                it("should result in the correct refinement", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(13, 9)), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveString1.out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
              }));
        describe.only("On GiveString 2", (function () {
                var fileContent = {
                  contents: ""
                };
                var filename = "Refine.agda";
                beforeEach(async function () {
                      fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                    });
                afterEach(async function () {
                      return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset(filename), fileContent.contents);
                    });
                it("should result in the correct refinement", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(21, 13)), "fst");
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".GiveString2.out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
              }));
        describe("On GiveNoParen, Issue #236", (function () {
                var fileContent = {
                  contents: ""
                };
                var filename = "RefineGiveNoParen.agda";
                beforeEach(async function () {
                      fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                    });
                afterEach(async function () {
                      return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset(filename), fileContent.contents);
                    });
                it("should result in the correct refinement", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(6, 9)), "?");
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
              }));
        describe("On GiveNoParen with multiline content", (function () {
                var fileContent = {
                  contents: ""
                };
                var filename = "RefineGiveNoParenMultiline.agda";
                beforeEach(async function () {
                      fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                    });
                afterEach(async function () {
                      return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset(filename), fileContent.contents);
                    });
                it("should handle multiline goal content correctly", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Refine", Caml_option.some(new Vscode.Position(6, 9)), undefined);
                        await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".out"));
                        return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                      }));
              }));
      }));

/*  Not a pure module */
