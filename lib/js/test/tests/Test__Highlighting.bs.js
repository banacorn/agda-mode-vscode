// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var Resource$AgdaModeVscode = require("../../src/Resource.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var Highlighting$AgdaModeVscode = require("../../src/Highlighting.bs.js");
var Highlighting__SemanticToken$AgdaModeVscode = require("../../src/Highlighting/Highlighting__SemanticToken.bs.js");

describe("Highlighting", (function () {
        var fileContent = {
          contents: ""
        };
        beforeEach(async function () {
              fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Issue180.agda"));
            });
        afterEach(async function () {
              return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset("Issue180.agda"), fileContent.contents);
            });
        it("should work after inserting a newline", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Issue180.agda");
                await Editor$AgdaModeVscode.$$Text.insert(ctx.state.document, new Vscode.Position(6, 0), "\n");
                var expected = [
                  Highlighting__SemanticToken$AgdaModeVscode.make(7, [
                        0,
                        3
                      ], "Function", []),
                  Highlighting__SemanticToken$AgdaModeVscode.make(7, [
                        6,
                        7
                      ], "Type", []),
                  Highlighting__SemanticToken$AgdaModeVscode.make(7, [
                        10,
                        11
                      ], "Type", []),
                  Highlighting__SemanticToken$AgdaModeVscode.make(7, [
                        14,
                        15
                      ], "Type", []),
                  Highlighting__SemanticToken$AgdaModeVscode.make(8, [
                        0,
                        1
                      ], "Variable", []),
                  Highlighting__SemanticToken$AgdaModeVscode.make(8, [
                        2,
                        3
                      ], "Function", []),
                  Highlighting__SemanticToken$AgdaModeVscode.make(8, [
                        4,
                        5
                      ], "Variable", [])
                ];
                var tokens = await Resource$AgdaModeVscode.get(Highlighting$AgdaModeVscode.getSemanticTokens(ctx.state.highlighting));
                var actual = tokens.slice(12);
                return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
              }));
        it("should work after deleting an empty line", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Issue180.agda");
                await Editor$AgdaModeVscode.$$Text.$$delete(ctx.state.document, new Vscode.Range(new Vscode.Position(5, 0), new Vscode.Position(6, 0)));
                var expected = [
                  Highlighting__SemanticToken$AgdaModeVscode.make(5, [
                        0,
                        3
                      ], "Function", []),
                  Highlighting__SemanticToken$AgdaModeVscode.make(5, [
                        6,
                        7
                      ], "Type", []),
                  Highlighting__SemanticToken$AgdaModeVscode.make(5, [
                        10,
                        11
                      ], "Type", []),
                  Highlighting__SemanticToken$AgdaModeVscode.make(5, [
                        14,
                        15
                      ], "Type", []),
                  Highlighting__SemanticToken$AgdaModeVscode.make(6, [
                        0,
                        1
                      ], "Variable", []),
                  Highlighting__SemanticToken$AgdaModeVscode.make(6, [
                        2,
                        3
                      ], "Function", []),
                  Highlighting__SemanticToken$AgdaModeVscode.make(6, [
                        4,
                        5
                      ], "Variable", [])
                ];
                var tokens = await Resource$AgdaModeVscode.get(Highlighting$AgdaModeVscode.getSemanticTokens(ctx.state.highlighting));
                var actual = tokens.slice(12);
                return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
              }));
        it("should work after deleting an existing line", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Issue180.agda");
                await Editor$AgdaModeVscode.$$Text.$$delete(ctx.state.document, new Vscode.Range(new Vscode.Position(5, 0), new Vscode.Position(7, 0)));
                var expected = [
                  Highlighting__SemanticToken$AgdaModeVscode.make(5, [
                        0,
                        1
                      ], "Variable", []),
                  Highlighting__SemanticToken$AgdaModeVscode.make(5, [
                        2,
                        3
                      ], "Function", []),
                  Highlighting__SemanticToken$AgdaModeVscode.make(5, [
                        4,
                        5
                      ], "Variable", [])
                ];
                var tokens = await Resource$AgdaModeVscode.get(Highlighting$AgdaModeVscode.getSemanticTokens(ctx.state.highlighting));
                var actual = tokens.slice(12);
                return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
              }));
      }));

/*  Not a pure module */
