// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Goals$AgdaModeVscode = require("../../src/Goals.bs.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var State__Connection$AgdaModeVscode = require("../../src/State/State__Connection.bs.js");

describe.only("agda-mode.give", (function () {
        var fileContent = {
          contents: ""
        };
        beforeEach(async function () {
              fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Give.agda"));
            });
        afterEach(async function () {
              return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset("Give.agda"), fileContent.contents);
            });
        it("should be responded with the correct responses", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Give.agda");
                await Editor$AgdaModeVscode.$$Text.insert(ctx.state.document, new Vscode.Position(7, 14), "y");
                var responses = await State__Connection$AgdaModeVscode.sendRequestAndCollectResponses(ctx.state, {
                      TAG: "Give2",
                      _0: {
                        index: 0,
                        indexString: "0",
                        start: 91,
                        end: 98
                      },
                      [Symbol.for("name")]: "Give2"
                    });
                var filteredResponses = responses.filter(Test__Util$AgdaModeVscode.filteredResponse);
                return Curry._3(Assert.deepStrictEqual, filteredResponses, [
                            {
                              TAG: "GiveAction",
                              _0: 0,
                              _1: "GiveNoParen",
                              [Symbol.for("name")]: "GiveAction"
                            },
                            {
                              TAG: "DisplayInfo",
                              _0: {
                                TAG: "AllGoalsWarnings",
                                _0: "*All Goals*",
                                _1: "?1 : â„•\n",
                                [Symbol.for("name")]: "AllGoalsWarnings"
                              },
                              [Symbol.for("name")]: "DisplayInfo"
                            },
                            {
                              TAG: "InteractionPoints",
                              _0: [1],
                              [Symbol.for("name")]: "InteractionPoints"
                            }
                          ], undefined);
              }));
        it("should remove the give goal", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Give.agda");
                await Test__Util$AgdaModeVscode.AgdaMode.give(ctx, Caml_option.some(new Vscode.Position(7, 14)), "y");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.size(ctx.state.goals2), 1, undefined);
                var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Give.agda"));
                var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Give.agda.out"));
                return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
              }));
      }));

/*  Not a pure module */
