// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Goals$AgdaModeVscode = require("../../src/Goals.bs.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var State__Connection$AgdaModeVscode = require("../../src/State/State__Connection.bs.js");

describe("agda-mode.give", (function () {
        var fileContent = {
          contents: ""
        };
        beforeEach(async function () {
              fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Give.agda"));
            });
        afterEach(async function () {
              return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset("Give.agda"), fileContent.contents);
            });
        it("should be responded with correct responses", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Give.agda");
                await Editor$AgdaModeVscode.$$Text.insert(ctx.state.document, new Vscode.Position(7, 14), "y");
                var responses = await State__Connection$AgdaModeVscode.sendRequestAndCollectResponses(ctx.state, {
                      TAG: "Give",
                      _0: {
                        index: 0,
                        indexString: "0",
                        start: 91,
                        end: 98
                      }
                    });
                var filteredResponses = responses.filter(Test__Util$AgdaModeVscode.filteredResponse);
                return Curry._3(Assert.deepStrictEqual, filteredResponses, [
                            {
                              TAG: "GiveAction",
                              _0: 0,
                              _1: "GiveNoParen"
                            },
                            {
                              TAG: "DisplayInfo",
                              _0: {
                                TAG: "AllGoalsWarnings",
                                _0: "*All Goals*",
                                _1: "?1 : â„•\n"
                              }
                            },
                            {
                              TAG: "InteractionPoints",
                              _0: [1]
                            }
                          ], undefined);
              }));
        it("should remove the given goal", (async function () {
                var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Give.agda");
                await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Give", Caml_option.some(new Vscode.Position(7, 14)), "y");
                Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.size(ctx.state.goals), 1, undefined);
                await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Give.agda"));
                var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Give.agda.out"));
                return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
              }));
        describe.only("Issue #249: consecutive give commands", (function () {
                var filename = "Issue249.agda";
                var fileContent = {
                  contents: ""
                };
                beforeEach(async function () {
                      fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                    });
                afterEach(async function () {
                      return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset(filename), fileContent.contents);
                    });
                it("should handle consecutive give commands without infinite loops or disabled goals", (async function () {
                        var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Give", Caml_option.some(new Vscode.Position(7, 9)), "? , ?");
                        Assert.ok(Goals$AgdaModeVscode.size(ctx.state.goals) >= 2);
                        await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, "Give", Caml_option.some(new Vscode.Position(7, 9)), "tt");
                        var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
                        var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename + ".out"));
                        Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
                        return await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
                      }));
              }));
      }));

/*  Not a pure module */
