// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Chan$AgdaModeVscode = require("../../src/Util/Chan.bs.js");
var State$AgdaModeVscode = require("../../src/State/State.bs.js");
var Memento$AgdaModeVscode = require("../../src/Memento.bs.js");
var State__SwitchVersion2$AgdaModeVscode = require("../../src/State/State__SwitchVersion2.bs.js");

function createMockEntry(endpoint, error, param) {
  return {
          endpoint: endpoint,
          timestamp: new Date(),
          error: error
        };
}

var agdaEntry = createMockEntry({
      TAG: "Agda",
      _0: "2.6.4"
    }, undefined, undefined);

var agdaUnknownEntry = createMockEntry({
      TAG: "Agda",
      _0: undefined
    }, undefined, undefined);

var alsEntry = createMockEntry({
      TAG: "ALS",
      _0: [
        "4.0.0",
        "2.6.4"
      ]
    }, undefined, undefined);

var unknownEntry = createMockEntry("Unknown", "Permission denied", undefined);

function createMockMemento() {
  return Memento$AgdaModeVscode.make(undefined);
}

function createMockExtensionUri() {
  return Vscode.Uri.file("/test/extension");
}

var TestData = {
  createMockEntry: createMockEntry,
  agdaEntry: agdaEntry,
  agdaUnknownEntry: agdaUnknownEntry,
  alsEntry: alsEntry,
  unknownEntry: unknownEntry,
  createMockMemento: createMockMemento,
  createMockExtensionUri: createMockExtensionUri
};

describe("State__SwitchVersion2", (function () {
        describe("Core", (function () {
                describe("getEndpointDisplayInfo", (function () {
                        it("should format Agda endpoint with version", (function () {
                                var match = State__SwitchVersion2$AgdaModeVscode.ItemData.getEndpointDisplayInfo("agda", agdaEntry);
                                Curry._3(Assert.deepStrictEqual, match[0], "Agda v2.6.4", undefined);
                                Curry._3(Assert.deepStrictEqual, match[1], undefined, undefined);
                              }));
                        it("should format Agda endpoint without version", (function () {
                                var match = State__SwitchVersion2$AgdaModeVscode.ItemData.getEndpointDisplayInfo("agda", agdaUnknownEntry);
                                Curry._3(Assert.deepStrictEqual, match[0], "Agda (version unknown)", undefined);
                                Curry._3(Assert.deepStrictEqual, match[1], undefined, undefined);
                              }));
                        it("should format ALS endpoint with versions", (function () {
                                var match = State__SwitchVersion2$AgdaModeVscode.ItemData.getEndpointDisplayInfo("als", alsEntry);
                                Curry._3(Assert.deepStrictEqual, match[0], "$(squirrel)  ALS v4.0.0, Agda v2.6.4", undefined);
                                Curry._3(Assert.deepStrictEqual, match[1], undefined, undefined);
                              }));
                        it("should format error endpoint", (function () {
                                var match = State__SwitchVersion2$AgdaModeVscode.ItemData.getEndpointDisplayInfo("broken-agda", unknownEntry);
                                Curry._3(Assert.deepStrictEqual, match[0], "$(error) broken-agda", undefined);
                                Curry._3(Assert.deepStrictEqual, match[1], "Error: Permission denied", undefined);
                              }));
                        it("should format unknown endpoint without error", (function () {
                                var entry = createMockEntry("Unknown", undefined, undefined);
                                var match = State__SwitchVersion2$AgdaModeVscode.ItemData.getEndpointDisplayInfo("mystery", entry);
                                Curry._3(Assert.deepStrictEqual, match[0], "$(question) mystery", undefined);
                                Curry._3(Assert.deepStrictEqual, match[1], "Unknown executable", undefined);
                              }));
                      }));
                describe("shouldEndpointHaveIcon", (function () {
                        it("should return true for Agda endpoints", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion2$AgdaModeVscode.ItemData.shouldEndpointHaveIcon({
                                          TAG: "Agda",
                                          _0: "2.6.4"
                                        }), true, undefined);
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion2$AgdaModeVscode.ItemData.shouldEndpointHaveIcon({
                                          TAG: "Agda",
                                          _0: undefined
                                        }), true, undefined);
                              }));
                        it("should return false for ALS endpoints", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion2$AgdaModeVscode.ItemData.shouldEndpointHaveIcon({
                                          TAG: "ALS",
                                          _0: [
                                            "4.0.0",
                                            "2.6.4"
                                          ]
                                        }), false, undefined);
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion2$AgdaModeVscode.ItemData.shouldEndpointHaveIcon({
                                          TAG: "ALS",
                                          _0: undefined
                                        }), false, undefined);
                              }));
                        it("should return false for unknown endpoints", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion2$AgdaModeVscode.ItemData.shouldEndpointHaveIcon("Unknown"), false, undefined);
                              }));
                      }));
              }));
        describe("QuickPick", (function () {
                var extensionUri = Vscode.Uri.file("/test/extension");
                describe("fromItemData", (function () {
                        it("should create quickpick item from endpoint data with correct properties", (function () {
                                var itemData_itemType = {
                                  TAG: "Endpoint",
                                  _0: "/usr/bin/agda",
                                  _1: agdaEntry
                                };
                                var itemData = {
                                  itemType: itemData_itemType,
                                  isSelected: false
                                };
                                var item = State__SwitchVersion2$AgdaModeVscode.Item.fromItemData(itemData, extensionUri);
                                Curry._3(Assert.deepStrictEqual, item.label, "Agda v2.6.4", undefined);
                                Curry._3(Assert.deepStrictEqual, item.description, "", undefined);
                                Curry._3(Assert.deepStrictEqual, item.detail, "/usr/bin/agda", undefined);
                              }));
                        it("should include icon for Agda endpoints", (function () {
                                var itemData_itemType = {
                                  TAG: "Endpoint",
                                  _0: "/usr/bin/agda",
                                  _1: agdaEntry
                                };
                                var itemData = {
                                  itemType: itemData_itemType,
                                  isSelected: false
                                };
                                var item = State__SwitchVersion2$AgdaModeVscode.Item.fromItemData(itemData, extensionUri);
                                var match = item.iconPath;
                                if (match !== undefined) {
                                  return ;
                                } else {
                                  Assert.fail("Expected iconPath for Agda endpoint");
                                  return ;
                                }
                              }));
                        it("should not include icon for ALS endpoints", (function () {
                                var itemData_itemType = {
                                  TAG: "Endpoint",
                                  _0: "/usr/bin/als",
                                  _1: alsEntry
                                };
                                var itemData = {
                                  itemType: itemData_itemType,
                                  isSelected: false
                                };
                                var item = State__SwitchVersion2$AgdaModeVscode.Item.fromItemData(itemData, extensionUri);
                                var match = item.iconPath;
                                if (match !== undefined) {
                                  Assert.fail("Did not expect iconPath for ALS endpoint");
                                  return ;
                                }
                                
                              }));
                      }));
                describe("separator items", (function () {
                        it("should create separator with correct kind", (function () {
                                var item = State__SwitchVersion2$AgdaModeVscode.Item.fromItemData({
                                      itemType: {
                                        TAG: "Separator",
                                        _0: "Test Section"
                                      },
                                      isSelected: false
                                    }, extensionUri);
                                Curry._3(Assert.deepStrictEqual, item.label, "Test Section", undefined);
                                Curry._3(Assert.deepStrictEqual, item.kind, -1, undefined);
                              }));
                      }));
                describe("no installations item", (function () {
                        it("should create placeholder item", (function () {
                                var item = State__SwitchVersion2$AgdaModeVscode.Item.fromItemData({
                                      itemType: "NoInstallations",
                                      isSelected: false
                                    }, extensionUri);
                                Curry._3(Assert.deepStrictEqual, item.label, "$(info) No installations found", undefined);
                                Curry._3(Assert.deepStrictEqual, item.description, "Try installing Agda or ALS first", undefined);
                                Curry._3(Assert.deepStrictEqual, item.detail, "No executable paths detected", undefined);
                              }));
                      }));
                describe("open folder item", (function () {
                        it("should create open folder item", (function () {
                                var item = State__SwitchVersion2$AgdaModeVscode.Item.fromItemData({
                                      itemType: {
                                        TAG: "OpenFolder",
                                        _0: "/test/global/storage"
                                      },
                                      isSelected: false
                                    }, extensionUri);
                                Curry._3(Assert.deepStrictEqual, item.label, "$(folder-opened)  Open download folder", undefined);
                                Curry._3(Assert.deepStrictEqual, item.description, "Where the language servers are downloaded to", undefined);
                                Curry._3(Assert.deepStrictEqual, item.detail, "/test/global/storage", undefined);
                              }));
                      }));
                describe("download items", (function () {
                        it("should create download item when not downloaded", (function () {
                                var item = State__SwitchVersion2$AgdaModeVscode.Item.fromItemData({
                                      itemType: {
                                        TAG: "DownloadAction",
                                        _0: false,
                                        _1: "ALS v1.0.0"
                                      },
                                      isSelected: false
                                    }, extensionUri);
                                Curry._3(Assert.deepStrictEqual, item.label, "$(cloud-download)  Download the latest Agda Language Server", undefined);
                                Curry._3(Assert.deepStrictEqual, item.description, "", undefined);
                                Curry._3(Assert.deepStrictEqual, item.detail, "ALS v1.0.0", undefined);
                              }));
                        it("should create download item when already downloaded", (function () {
                                var item = State__SwitchVersion2$AgdaModeVscode.Item.fromItemData({
                                      itemType: {
                                        TAG: "DownloadAction",
                                        _0: true,
                                        _1: "ALS v1.0.0"
                                      },
                                      isSelected: false
                                    }, extensionUri);
                                Curry._3(Assert.deepStrictEqual, item.label, "$(cloud-download)  Download the latest Agda Language Server", undefined);
                                Curry._3(Assert.deepStrictEqual, item.description, "Downloaded and installed", undefined);
                                Curry._3(Assert.deepStrictEqual, item.detail, "ALS v1.0.0", undefined);
                              }));
                      }));
              }));
        describe("View", (function () {
                it("should create quickpick with correct initial state", (function () {
                        var qp = State__SwitchVersion2$AgdaModeVscode.View.make();
                        Curry._3(Assert.deepStrictEqual, qp.items.length, 0, undefined);
                        Curry._3(Assert.deepStrictEqual, qp.subscriptions.length, 0, undefined);
                      }));
                it("should update items correctly", (function () {
                        var qp = State__SwitchVersion2$AgdaModeVscode.View.make();
                        var items = [State__SwitchVersion2$AgdaModeVscode.Item.fromItemData({
                                itemType: "NoInstallations",
                                isSelected: false
                              }, Vscode.Uri.file("/test/extension"))];
                        State__SwitchVersion2$AgdaModeVscode.View.updateItems(qp, items);
                        Curry._3(Assert.deepStrictEqual, qp.items.length, 1, undefined);
                        Curry._3(Assert.deepStrictEqual, Core__Option.map(qp.items[0], (function (item) {
                                    return item.label;
                                  })), "$(info) No installations found", undefined);
                      }));
              }));
        describe("Core Integration Tests", (function () {
                describe("entriesToItemData", (function () {
                        it("should return no installations item when no entries", (function () {
                                var entries = {};
                                var itemData = State__SwitchVersion2$AgdaModeVscode.ItemData.entriesToItemData(entries, undefined, undefined, "/test/global/storage");
                                Curry._3(Assert.deepStrictEqual, itemData.length, 3, undefined);
                                Curry._3(Assert.deepStrictEqual, Core__Option.map(itemData[0], (function (item) {
                                            return item.itemType;
                                          })), "NoInstallations", undefined);
                                var match = Core__Option.map(itemData[1], (function (item) {
                                        return item.itemType;
                                      }));
                                if (!(match !== undefined && !(typeof match !== "object" || !(match.TAG === "Separator" && match._0 === "Misc")))) {
                                  Assert.fail("Expected Misc separator");
                                }
                                var match$1 = Core__Option.map(itemData[2], (function (item) {
                                        return item.itemType;
                                      }));
                                if (match$1 !== undefined) {
                                  if (typeof match$1 !== "object") {
                                    Assert.fail("Expected OpenFolder item");
                                    return ;
                                  }
                                  if (match$1.TAG === "OpenFolder") {
                                    if (match$1._0 === "/test/global/storage") {
                                      return ;
                                    }
                                    Assert.fail("Expected OpenFolder item");
                                    return ;
                                  }
                                  Assert.fail("Expected OpenFolder item");
                                  return ;
                                } else {
                                  Assert.fail("Expected OpenFolder item");
                                  return ;
                                }
                              }));
                        it("should create items with separator when entries exist", (function () {
                                var entries = {};
                                entries["/usr/bin/agda"] = agdaEntry;
                                entries["/usr/bin/als"] = alsEntry;
                                var itemData = State__SwitchVersion2$AgdaModeVscode.ItemData.entriesToItemData(entries, undefined, undefined, "/test/global/storage");
                                Curry._3(Assert.deepStrictEqual, itemData.length, 5, undefined);
                                var match = Core__Option.map(itemData[0], (function (item) {
                                        return item.itemType;
                                      }));
                                if (!(match !== undefined && !(typeof match !== "object" || !(match.TAG === "Separator" && match._0 === "Installed")))) {
                                  Assert.fail("Expected Installed separator");
                                }
                                var match$1 = Core__Option.map(itemData[3], (function (item) {
                                        return item.itemType;
                                      }));
                                if (!(match$1 !== undefined && !(typeof match$1 !== "object" || !(match$1.TAG === "Separator" && match$1._0 === "Misc")))) {
                                  Assert.fail("Expected Misc separator");
                                }
                                var match$2 = Core__Option.map(itemData[4], (function (item) {
                                        return item.itemType;
                                      }));
                                if (match$2 !== undefined) {
                                  if (typeof match$2 !== "object") {
                                    Assert.fail("Expected OpenFolder item");
                                    return ;
                                  }
                                  if (match$2.TAG === "OpenFolder") {
                                    if (match$2._0 === "/test/global/storage") {
                                      return ;
                                    }
                                    Assert.fail("Expected OpenFolder item");
                                    return ;
                                  }
                                  Assert.fail("Expected OpenFolder item");
                                  return ;
                                } else {
                                  Assert.fail("Expected OpenFolder item");
                                  return ;
                                }
                              }));
                        it("should include download section when download info is provided", (function () {
                                var entries = {};
                                entries["/usr/bin/agda"] = agdaEntry;
                                var itemData = State__SwitchVersion2$AgdaModeVscode.ItemData.entriesToItemData(entries, undefined, [
                                      false,
                                      "ALS v1.0.0"
                                    ], "/test/global/storage");
                                Curry._3(Assert.deepStrictEqual, itemData.length, 6, undefined);
                                var downloadSeparator = itemData.find(function (data) {
                                      var match = data.itemType;
                                      if (typeof match !== "object" || !(match.TAG === "Separator" && match._0 === "Download")) {
                                        return false;
                                      } else {
                                        return true;
                                      }
                                    });
                                var downloadAction = itemData.find(function (data) {
                                      var match = data.itemType;
                                      if (typeof match !== "object" || !(match.TAG === "DownloadAction" && !(match._0 || match._1 !== "ALS v1.0.0"))) {
                                        return false;
                                      } else {
                                        return true;
                                      }
                                    });
                                Assert.ok(Core__Option.isSome(downloadSeparator));
                                Assert.ok(Core__Option.isSome(downloadAction));
                              }));
                      }));
              }));
        describe("Events", (function () {
                var makeMockPlatform = function () {
                  var determinePlatform = async function () {
                    return {
                            TAG: "Ok",
                            _0: "MacOS_Arm"
                          };
                  };
                  var askUserAboutDownloadPolicy = async function () {
                    return "No";
                  };
                  var alreadyDownloaded = function (param) {
                    return function () {
                      return Promise.resolve(undefined);
                    };
                  };
                  var alreadyDownloaded2 = function (param) {
                    return function () {
                      return Promise.resolve(undefined);
                    };
                  };
                  var downloadLatestALS = function (param, param$1) {
                    return function (param) {
                      return Promise.resolve({
                                  TAG: "Error",
                                  _0: "CannotFindCompatibleALSRelease"
                                });
                    };
                  };
                  var downloadLatestALS2 = function (param, param$1) {
                    return function (param) {
                      return Promise.resolve({
                                  TAG: "Error",
                                  _0: "CannotFindCompatibleALSRelease"
                                });
                    };
                  };
                  var getInstalledEndpointsAndPersistThem = function (param) {
                    var endpoints = {};
                    endpoints["/usr/bin/agda"] = {
                      TAG: "Ok",
                      _0: {
                        TAG: "Agda",
                        _0: "2.6.4",
                        _1: "/usr/bin/agda"
                      }
                    };
                    return Promise.resolve(endpoints);
                  };
                  var getInstalledEndpointsAndPersistThem2 = function (param) {
                    var endpoints = {};
                    endpoints["/usr/bin/agda"] = {
                      TAG: "Agda",
                      _0: "2.6.4"
                    };
                    return Promise.resolve(endpoints);
                  };
                  var findCommand = function (_command, _timeoutOpt) {
                    return Promise.resolve({
                                TAG: "Error",
                                _0: {
                                  TAG: "NotFound",
                                  _0: "test"
                                }
                              });
                  };
                  var findCommands = function (param) {
                    return Promise.resolve({
                                TAG: "Error",
                                _0: [{
                                    TAG: "NotFound",
                                    _0: "test"
                                  }]
                              });
                  };
                  return {
                          determinePlatform: determinePlatform,
                          findCommands: findCommands,
                          findCommand: findCommand,
                          alreadyDownloaded: alreadyDownloaded,
                          alreadyDownloaded2: alreadyDownloaded2,
                          downloadLatestALS: downloadLatestALS,
                          downloadLatestALS2: downloadLatestALS2,
                          getInstalledEndpointsAndPersistThem: getInstalledEndpointsAndPersistThem,
                          getInstalledEndpointsAndPersistThem2: getInstalledEndpointsAndPersistThem2,
                          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy
                        };
                };
                var createTestState = function () {
                  var channels_inputMethod = Chan$AgdaModeVscode.make();
                  var channels_responseHandled = Chan$AgdaModeVscode.make();
                  var channels_commandHandled = Chan$AgdaModeVscode.make();
                  var channels_log = Chan$AgdaModeVscode.make();
                  var channels = {
                    inputMethod: channels_inputMethod,
                    responseHandled: channels_responseHandled,
                    commandHandled: channels_commandHandled,
                    log: channels_log
                  };
                  var mockEditor = {
        document: { fileName: "test.agda" }
      };
                  var mockUri = Vscode.Uri.file("/test/path");
                  return State$AgdaModeVscode.make(makeMockPlatform(), channels, mockUri, mockUri, undefined, mockEditor, undefined);
                };
                it("should have an endpoint marked as selected onActivation", (async function () {
                        var state = createTestState();
                        var loggedEvents = [];
                        Chan$AgdaModeVscode.on(state.channels.log, (function (logEvent) {
                                if (logEvent.TAG !== "SwitchVersionUI") {
                                  return ;
                                }
                                var endpoints = logEvent._0;
                                if (endpoints.TAG !== "UpdateEndpoints") {
                                  return ;
                                }
                                loggedEvents.push(endpoints._0);
                              }));
                        await Memento$AgdaModeVscode.Module.PickedConnection.set(state.memento, undefined);
                        var discoveredEndpoints = {};
                        discoveredEndpoints["/usr/bin/agda"] = {
                          TAG: "Agda",
                          _0: "2.6.4"
                        };
                        await Memento$AgdaModeVscode.Module.Endpoints.syncWithPaths(state.memento, discoveredEndpoints);
                        var mockConnection = { TAG: "Agda", _0: null, _1: "/usr/bin/agda", _2: "2.6.4" };
                        state.connection = mockConnection;
                        await State__SwitchVersion2$AgdaModeVscode.Handler.onActivate(state, makeMockPlatform());
                        var allEndpointsFromLogs = loggedEvents.flat();
                        var anyEndpointSelected = allEndpointsFromLogs.some(function (param) {
                              return param[3];
                            });
                        Assert.ok(anyEndpointSelected);
                      }));
                it("should prefer memento selection over active connection inference", (async function () {
                        var state = createTestState();
                        var loggedEvents = [];
                        Chan$AgdaModeVscode.on(state.channels.log, (function (logEvent) {
                                if (logEvent.TAG !== "SwitchVersionUI") {
                                  return ;
                                }
                                var endpoints = logEvent._0;
                                if (endpoints.TAG !== "UpdateEndpoints") {
                                  return ;
                                }
                                loggedEvents.push(endpoints._0);
                              }));
                        var discoveredEndpoints = {};
                        discoveredEndpoints["/usr/bin/agda"] = {
                          TAG: "Agda",
                          _0: "2.6.4"
                        };
                        discoveredEndpoints["/opt/homebrew/bin/agda"] = {
                          TAG: "Agda",
                          _0: "2.6.3"
                        };
                        await Memento$AgdaModeVscode.Module.Endpoints.syncWithPaths(state.memento, discoveredEndpoints);
                        await Memento$AgdaModeVscode.Module.PickedConnection.set(state.memento, "/usr/bin/agda");
                        var mockConnection = { TAG: "Agda", _0: null, _1: "/opt/homebrew/bin/agda", _2: "2.6.3" };
                        state.connection = mockConnection;
                        await State__SwitchVersion2$AgdaModeVscode.Handler.onActivate(state, makeMockPlatform());
                        var allEndpointsFromLogs = loggedEvents.flat();
                        var selectedEndpoint = allEndpointsFromLogs.find(function (param) {
                              return param[3];
                            });
                        if (selectedEndpoint !== undefined) {
                          Curry._3(Assert.deepStrictEqual, selectedEndpoint[0], "/usr/bin/agda", undefined);
                        } else {
                          Assert.fail("Expected one endpoint to be marked as selected");
                        }
                        var selectedCount = allEndpointsFromLogs.filter(function (param) {
                              return param[3];
                            }).length;
                        return Curry._3(Assert.deepStrictEqual, selectedCount, 1, undefined);
                      }));
                it("should handle download workflow correctly", (async function () {
                        var state = createTestState();
                        var loggedEvents = [];
                        Chan$AgdaModeVscode.on(state.channels.log, (function (logEvent) {
                                if (logEvent.TAG !== "SwitchVersionUI") {
                                  return ;
                                }
                                var endpoints = logEvent._0;
                                if (endpoints.TAG !== "UpdateEndpoints") {
                                  return ;
                                }
                                loggedEvents.push(endpoints._0);
                              }));
                        var discoveredEndpoints = {};
                        discoveredEndpoints["/usr/bin/agda"] = {
                          TAG: "Agda",
                          _0: "2.6.4"
                        };
                        await Memento$AgdaModeVscode.Module.Endpoints.syncWithPaths(state.memento, discoveredEndpoints);
                        await Memento$AgdaModeVscode.Module.PickedConnection.set(state.memento, undefined);
                        var mockConnection = { TAG: "Agda", _0: null, _1: "/usr/bin/agda", _2: "2.6.4" };
                        state.connection = mockConnection;
                        var makeMockPlatformWithDownload = function () {
                          var determinePlatform = async function () {
                            return {
                                    TAG: "Ok",
                                    _0: "MacOS_Arm"
                                  };
                          };
                          var askUserAboutDownloadPolicy = async function () {
                            return "No";
                          };
                          var alreadyDownloaded = function (param) {
                            return function () {
                              return Promise.resolve(undefined);
                            };
                          };
                          var alreadyDownloaded2 = function (param) {
                            return function () {
                              return Promise.resolve(undefined);
                            };
                          };
                          var downloadLatestALS = function (param, param$1) {
                            return function (param) {
                              return Promise.resolve({
                                          TAG: "Error",
                                          _0: "CannotFindCompatibleALSRelease"
                                        });
                            };
                          };
                          var downloadLatestALS2 = function (param, param$1) {
                            return function (param) {
                              return Promise.resolve({
                                          TAG: "Ok",
                                          _0: "/test/downloaded/als"
                                        });
                            };
                          };
                          var getInstalledEndpointsAndPersistThem = function (param) {
                            var endpoints = {};
                            endpoints["/usr/bin/agda"] = {
                              TAG: "Ok",
                              _0: {
                                TAG: "Agda",
                                _0: "2.6.4",
                                _1: "/usr/bin/agda"
                              }
                            };
                            return Promise.resolve(endpoints);
                          };
                          var getInstalledEndpointsAndPersistThem2 = function (param) {
                            var endpoints = {};
                            endpoints["/usr/bin/agda"] = {
                              TAG: "Agda",
                              _0: "2.6.4"
                            };
                            return Promise.resolve(endpoints);
                          };
                          var findCommand = function (_command, _timeoutOpt) {
                            return Promise.resolve({
                                        TAG: "Error",
                                        _0: {
                                          TAG: "NotFound",
                                          _0: "test"
                                        }
                                      });
                          };
                          var findCommands = function (param) {
                            return Promise.resolve({
                                        TAG: "Error",
                                        _0: [{
                                            TAG: "NotFound",
                                            _0: "test"
                                          }]
                                      });
                          };
                          return {
                                  determinePlatform: determinePlatform,
                                  findCommands: findCommands,
                                  findCommand: findCommand,
                                  alreadyDownloaded: alreadyDownloaded,
                                  alreadyDownloaded2: alreadyDownloaded2,
                                  downloadLatestALS: downloadLatestALS,
                                  downloadLatestALS2: downloadLatestALS2,
                                  getInstalledEndpointsAndPersistThem: getInstalledEndpointsAndPersistThem,
                                  getInstalledEndpointsAndPersistThem2: getInstalledEndpointsAndPersistThem2,
                                  askUserAboutDownloadPolicy: askUserAboutDownloadPolicy
                                };
                        };
                        await State__SwitchVersion2$AgdaModeVscode.Handler.onActivate(state, makeMockPlatformWithDownload());
                        var allEndpointsFromLogs = loggedEvents.flat();
                        var selectedEndpoints = allEndpointsFromLogs.filter(function (param) {
                              return param[3];
                            });
                        Curry._3(Assert.deepStrictEqual, selectedEndpoints.length, 1, undefined);
                        var match = selectedEndpoints[0];
                        if (match !== undefined) {
                          Curry._3(Assert.deepStrictEqual, match[0], "/usr/bin/agda", undefined);
                        } else {
                          Assert.fail("Expected one endpoint to be selected");
                        }
                        Assert.ok(allEndpointsFromLogs.length > 0);
                        var hasErrors = allEndpointsFromLogs.some(function (param) {
                              return param[2] !== undefined;
                            });
                        Assert.ok(!hasErrors);
                      }));
              }));
      }));

exports.TestData = TestData;
/* agdaEntry Not a pure module */
