// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Memento$AgdaModeVscode = require("../../src/Memento.bs.js");
var State__SwitchVersion2$AgdaModeVscode = require("../../src/State/State__SwitchVersion2.bs.js");

function createMockEntry(endpoint, error, param) {
  return {
          endpoint: endpoint,
          timestamp: new Date(),
          error: error
        };
}

var agdaEntry = createMockEntry({
      TAG: "Agda",
      _0: "2.6.4"
    }, undefined, undefined);

var agdaUnknownEntry = createMockEntry({
      TAG: "Agda",
      _0: undefined
    }, undefined, undefined);

var alsEntry = createMockEntry({
      TAG: "ALS",
      _0: [
        "4.0.0",
        "2.6.4"
      ]
    }, undefined, undefined);

var errorEntry = createMockEntry("Unknown", "Permission denied", undefined);

function createMockEndpointInfo(endpoint, error, param) {
  return {
          endpoint: endpoint,
          error: error
        };
}

var agdaEndpointInfo_endpoint = {
  TAG: "Agda",
  _0: "2.6.4"
};

var agdaEndpointInfo = {
  endpoint: agdaEndpointInfo_endpoint,
  error: undefined
};

var alsEndpointInfo_endpoint = {
  TAG: "ALS",
  _0: [
    "4.0.0",
    "2.6.4"
  ]
};

var alsEndpointInfo = {
  endpoint: alsEndpointInfo_endpoint,
  error: undefined
};

var unknownEndpointInfo_error = "Permission denied";

var unknownEndpointInfo = {
  endpoint: "Unknown",
  error: unknownEndpointInfo_error
};

function createMockMemento() {
  return Memento$AgdaModeVscode.make(undefined);
}

function createMockExtensionUri() {
  return Vscode.Uri.file("/test/extension");
}

var TestData = {
  createMockEntry: createMockEntry,
  agdaEntry: agdaEntry,
  agdaUnknownEntry: agdaUnknownEntry,
  alsEntry: alsEntry,
  errorEntry: errorEntry,
  createMockEndpointInfo: createMockEndpointInfo,
  agdaEndpointInfo: agdaEndpointInfo,
  alsEndpointInfo: alsEndpointInfo,
  unknownEndpointInfo: unknownEndpointInfo,
  createMockMemento: createMockMemento,
  createMockExtensionUri: createMockExtensionUri
};

describe("State__SwitchVersion2", (function () {
        describe("ItemFormatting", (function () {
                describe("formatEndpointInfo", (function () {
                        it("should format Agda endpoint with version", (function () {
                                var match = State__SwitchVersion2$AgdaModeVscode.ItemFormatting.formatEndpointInfo("agda", agdaEndpointInfo, false);
                                Curry._3(Assert.deepStrictEqual, match[0], "Agda v2.6.4", undefined);
                                Curry._3(Assert.deepStrictEqual, match[1], "", undefined);
                              }));
                        it("should format Agda endpoint without version", (function () {
                                var endpointInfo_endpoint = {
                                  TAG: "Agda",
                                  _0: undefined
                                };
                                var endpointInfo = {
                                  endpoint: endpointInfo_endpoint,
                                  error: undefined
                                };
                                var match = State__SwitchVersion2$AgdaModeVscode.ItemFormatting.formatEndpointInfo("agda", endpointInfo, false);
                                Curry._3(Assert.deepStrictEqual, match[0], "Agda (version unknown)", undefined);
                                Curry._3(Assert.deepStrictEqual, match[1], "", undefined);
                              }));
                        it("should format ALS endpoint with versions", (function () {
                                var match = State__SwitchVersion2$AgdaModeVscode.ItemFormatting.formatEndpointInfo("als", alsEndpointInfo, false);
                                Curry._3(Assert.deepStrictEqual, match[0], "$(squirrel)  ALS v4.0.0, Agda v2.6.4", undefined);
                                Curry._3(Assert.deepStrictEqual, match[1], "", undefined);
                              }));
                        it("should add Selected when picked", (function () {
                                var match = State__SwitchVersion2$AgdaModeVscode.ItemFormatting.formatEndpointInfo("agda", agdaEndpointInfo, true);
                                Curry._3(Assert.deepStrictEqual, match[0], "Agda v2.6.4", undefined);
                                Curry._3(Assert.deepStrictEqual, match[1], "Selected", undefined);
                              }));
                        it("should format error endpoint", (function () {
                                var match = State__SwitchVersion2$AgdaModeVscode.ItemFormatting.formatEndpointInfo("broken-agda", unknownEndpointInfo, false);
                                Curry._3(Assert.deepStrictEqual, match[0], "$(error) broken-agda", undefined);
                                Curry._3(Assert.deepStrictEqual, match[1], "Error: Permission denied", undefined);
                              }));
                        it("should format unknown endpoint without error", (function () {
                                var endpointInfo = {
                                  endpoint: "Unknown",
                                  error: undefined
                                };
                                var match = State__SwitchVersion2$AgdaModeVscode.ItemFormatting.formatEndpointInfo("mystery", endpointInfo, false);
                                Curry._3(Assert.deepStrictEqual, match[0], "$(question) mystery", undefined);
                                Curry._3(Assert.deepStrictEqual, match[1], "Unknown executable", undefined);
                              }));
                      }));
                describe("shouldHaveIcon", (function () {
                        it("should return true for Agda endpoints", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion2$AgdaModeVscode.ItemFormatting.shouldHaveIcon({
                                          TAG: "Agda",
                                          _0: "2.6.4"
                                        }), true, undefined);
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion2$AgdaModeVscode.ItemFormatting.shouldHaveIcon({
                                          TAG: "Agda",
                                          _0: undefined
                                        }), true, undefined);
                              }));
                        it("should return false for ALS endpoints", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion2$AgdaModeVscode.ItemFormatting.shouldHaveIcon({
                                          TAG: "ALS",
                                          _0: [
                                            "4.0.0",
                                            "2.6.4"
                                          ]
                                        }), false, undefined);
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion2$AgdaModeVscode.ItemFormatting.shouldHaveIcon({
                                          TAG: "ALS",
                                          _0: undefined
                                        }), false, undefined);
                              }));
                        it("should return false for unknown endpoints", (function () {
                                Curry._3(Assert.deepStrictEqual, State__SwitchVersion2$AgdaModeVscode.ItemFormatting.shouldHaveIcon("Unknown"), false, undefined);
                              }));
                      }));
                describe("formatEndpoint", (function () {
                        it("should format endpoint from entry", (function () {
                                var match = State__SwitchVersion2$AgdaModeVscode.ItemFormatting.formatEndpoint("agda", agdaEntry, true);
                                Curry._3(Assert.deepStrictEqual, match[0], "Agda v2.6.4", undefined);
                                Curry._3(Assert.deepStrictEqual, match[1], "Selected", undefined);
                              }));
                      }));
              }));
        describe("ItemCreation", (function () {
                var extensionUri = Vscode.Uri.file("/test/extension");
                describe("createEndpointItem", (function () {
                        it("should create quickpick item with correct properties", (function () {
                                var item = State__SwitchVersion2$AgdaModeVscode.ItemCreation.createEndpointItem("/usr/bin/agda", agdaEntry, extensionUri, false);
                                Curry._3(Assert.deepStrictEqual, item.label, "Agda v2.6.4", undefined);
                                Curry._3(Assert.deepStrictEqual, item.description, "", undefined);
                                Curry._3(Assert.deepStrictEqual, item.detail, "/usr/bin/agda", undefined);
                              }));
                        it("should include icon for Agda endpoints", (function () {
                                var item = State__SwitchVersion2$AgdaModeVscode.ItemCreation.createEndpointItem("/usr/bin/agda", agdaEntry, extensionUri, false);
                                var match = item.iconPath;
                                if (match !== undefined) {
                                  return ;
                                } else {
                                  Assert.fail("Expected iconPath for Agda endpoint");
                                  return ;
                                }
                              }));
                        it("should not include icon for ALS endpoints", (function () {
                                var item = State__SwitchVersion2$AgdaModeVscode.ItemCreation.createEndpointItem("/usr/bin/als", alsEntry, extensionUri, false);
                                var match = item.iconPath;
                                if (match !== undefined) {
                                  Assert.fail("Did not expect iconPath for ALS endpoint");
                                  return ;
                                }
                                
                              }));
                      }));
                describe("createSeparatorItem", (function () {
                        it("should create separator with correct kind", (function () {
                                var item = State__SwitchVersion2$AgdaModeVscode.ItemCreation.createSeparatorItem("Test Section");
                                Curry._3(Assert.deepStrictEqual, item.label, "Test Section", undefined);
                                Curry._3(Assert.deepStrictEqual, item.kind, -1, undefined);
                              }));
                      }));
                describe("createNoInstallationsItem", (function () {
                        it("should create placeholder item", (function () {
                                var item = State__SwitchVersion2$AgdaModeVscode.ItemCreation.createNoInstallationsItem();
                                Curry._3(Assert.deepStrictEqual, item.label, "$(info) No installations found", undefined);
                                Curry._3(Assert.deepStrictEqual, item.description, "Try installing Agda or ALS first", undefined);
                                Curry._3(Assert.deepStrictEqual, item.detail, "No executable paths detected", undefined);
                              }));
                      }));
                describe("createOpenFolderItem", (function () {
                        it("should create open folder item", (function () {
                                var globalStorageUri = Vscode.Uri.file("/test/global/storage");
                                var item = State__SwitchVersion2$AgdaModeVscode.ItemCreation.createOpenFolderItem(globalStorageUri);
                                Curry._3(Assert.deepStrictEqual, item.label, "$(folder-opened)  Open download folder", undefined);
                                Curry._3(Assert.deepStrictEqual, item.description, "Where the language servers are downloaded to", undefined);
                                Curry._3(Assert.deepStrictEqual, item.detail, "/test/global/storage", undefined);
                              }));
                      }));
                describe("createDownloadItem", (function () {
                        it("should create download item when not downloaded", (function () {
                                var item = State__SwitchVersion2$AgdaModeVscode.ItemCreation.createDownloadItem(false, "ALS v1.0.0");
                                Curry._3(Assert.deepStrictEqual, item.label, "$(cloud-download)  Download the latest Agda Language Server", undefined);
                                Curry._3(Assert.deepStrictEqual, item.description, "", undefined);
                                Curry._3(Assert.deepStrictEqual, item.detail, "ALS v1.0.0", undefined);
                              }));
                        it("should create download item when already downloaded", (function () {
                                var item = State__SwitchVersion2$AgdaModeVscode.ItemCreation.createDownloadItem(true, "ALS v1.0.0");
                                Curry._3(Assert.deepStrictEqual, item.label, "$(cloud-download)  Download the latest Agda Language Server", undefined);
                                Curry._3(Assert.deepStrictEqual, item.description, "Downloaded and installed", undefined);
                                Curry._3(Assert.deepStrictEqual, item.detail, "ALS v1.0.0", undefined);
                              }));
                      }));
              }));
        describe("QuickPickManager", (function () {
                it("should create quickpick with correct initial state", (function () {
                        var qp = State__SwitchVersion2$AgdaModeVscode.QuickPickManager.make();
                        Curry._3(Assert.deepStrictEqual, qp.items.length, 0, undefined);
                        Curry._3(Assert.deepStrictEqual, qp.subscriptions.length, 0, undefined);
                      }));
                it("should update items correctly", (function () {
                        var qp = State__SwitchVersion2$AgdaModeVscode.QuickPickManager.make();
                        var items = [State__SwitchVersion2$AgdaModeVscode.ItemCreation.createNoInstallationsItem()];
                        State__SwitchVersion2$AgdaModeVscode.QuickPickManager.updateItems(qp, items);
                        Curry._3(Assert.deepStrictEqual, qp.items.length, 1, undefined);
                        Curry._3(Assert.deepStrictEqual, Core__Option.map(qp.items[0], (function (item) {
                                    return item.label;
                                  })), "$(info) No installations found", undefined);
                      }));
              }));
        describe("EndpointLogic", (function () {
                describe("getPickedPath", (function () {
                        it("should return picked path from memento", (async function () {
                                var memento = Memento$AgdaModeVscode.make(undefined);
                                await Memento$AgdaModeVscode.Module.PickedConnection.set(memento, "/usr/bin/agda");
                                var pickedPath = State__SwitchVersion2$AgdaModeVscode.EndpointLogic.getPickedPath(memento);
                                return Curry._3(Assert.deepStrictEqual, pickedPath, "/usr/bin/agda", undefined);
                              }));
                        it("should return None when no picked path", (function () {
                                var memento = Memento$AgdaModeVscode.make(undefined);
                                var pickedPath = State__SwitchVersion2$AgdaModeVscode.EndpointLogic.getPickedPath(memento);
                                Curry._3(Assert.deepStrictEqual, pickedPath, undefined, undefined);
                              }));
                      }));
                describe("entriesToItems", (function () {
                        var extensionUri = Vscode.Uri.file("/test/extension");
                        var globalStorageUri = Vscode.Uri.file("/test/global/storage");
                        it("should return no installations item and misc section when no entries", (function () {
                                var entries = {};
                                var items = State__SwitchVersion2$AgdaModeVscode.EndpointLogic.entriesToItems(entries, extensionUri, globalStorageUri, undefined, undefined, undefined);
                                Curry._3(Assert.deepStrictEqual, items.length, 3, undefined);
                                Curry._3(Assert.deepStrictEqual, Core__Option.map(items[0], (function (item) {
                                            return item.label;
                                          })), "$(info) No installations found", undefined);
                                Curry._3(Assert.deepStrictEqual, Core__Option.map(items[1], (function (item) {
                                            return item.label;
                                          })), "Misc", undefined);
                                Curry._3(Assert.deepStrictEqual, Core__Option.map(items[2], (function (item) {
                                            return item.label;
                                          })), "$(folder-opened)  Open download folder", undefined);
                              }));
                        it("should create items with separator when entries exist", (function () {
                                var entries = {};
                                entries["/usr/bin/agda"] = agdaEntry;
                                entries["/usr/bin/als"] = alsEntry;
                                var items = State__SwitchVersion2$AgdaModeVscode.EndpointLogic.entriesToItems(entries, extensionUri, globalStorageUri, undefined, undefined, undefined);
                                Curry._3(Assert.deepStrictEqual, items.length, 5, undefined);
                                Curry._3(Assert.deepStrictEqual, Core__Option.map(items[0], (function (item) {
                                            return item.label;
                                          })), "Installed", undefined);
                                Curry._3(Assert.deepStrictEqual, Core__Option.flatMap(items[0], (function (item) {
                                            return item.kind;
                                          })), -1, undefined);
                                Curry._3(Assert.deepStrictEqual, Core__Option.map(items[3], (function (item) {
                                            return item.label;
                                          })), "Misc", undefined);
                                Curry._3(Assert.deepStrictEqual, Core__Option.map(items[4], (function (item) {
                                            return item.label;
                                          })), "$(folder-opened)  Open download folder", undefined);
                              }));
                        it("should mark picked connection correctly", (function () {
                                var entries = {};
                                entries["/usr/bin/agda"] = agdaEntry;
                                entries["/usr/bin/als"] = alsEntry;
                                var items = State__SwitchVersion2$AgdaModeVscode.EndpointLogic.entriesToItems(entries, extensionUri, globalStorageUri, "/usr/bin/agda", undefined, undefined);
                                var agdaItem = items.find(function (item) {
                                      var match = item.detail;
                                      if (match === "/usr/bin/agda") {
                                        return true;
                                      } else {
                                        return false;
                                      }
                                    });
                                if (agdaItem !== undefined) {
                                  var desc = agdaItem.description;
                                  if (desc !== undefined) {
                                    Assert.ok(desc.includes("Selected"));
                                  } else {
                                    Assert.fail("Expected description to be present");
                                  }
                                  return ;
                                }
                                Assert.fail("Could not find Agda item");
                              }));
                        it("should not mark any item when no picked path", (function () {
                                var entries = {};
                                entries["/usr/bin/agda"] = agdaEntry;
                                var items = State__SwitchVersion2$AgdaModeVscode.EndpointLogic.entriesToItems(entries, extensionUri, globalStorageUri, undefined, undefined, undefined);
                                var agdaItem = items.find(function (item) {
                                      var match = item.detail;
                                      if (match === "/usr/bin/agda") {
                                        return true;
                                      } else {
                                        return false;
                                      }
                                    });
                                if (agdaItem !== undefined) {
                                  var desc = agdaItem.description;
                                  if (desc !== undefined) {
                                    Assert.ok(!desc.includes("Selected"));
                                  } else {
                                    Assert.fail("Expected description to be present");
                                  }
                                  return ;
                                }
                                Assert.fail("Could not find Agda item");
                              }));
                        it("should include download section when download item is provided", (function () {
                                var entries = {};
                                entries["/usr/bin/agda"] = agdaEntry;
                                var downloadItem = State__SwitchVersion2$AgdaModeVscode.ItemCreation.createDownloadItem(false, "ALS v1.0.0");
                                var items = State__SwitchVersion2$AgdaModeVscode.EndpointLogic.entriesToItems(entries, extensionUri, globalStorageUri, undefined, downloadItem, undefined);
                                Curry._3(Assert.deepStrictEqual, items.length, 6, undefined);
                                var downloadSeparator = items.find(function (item) {
                                      return item.label === "Download";
                                    });
                                var downloadItemFound = items.find(function (item) {
                                      return item.label === "$(cloud-download)  Download the latest Agda Language Server";
                                    });
                                Assert.ok(Core__Option.isSome(downloadSeparator));
                                Assert.ok(Core__Option.isSome(downloadItemFound));
                              }));
                      }));
                describe("getPathsNeedingProbe", (function () {
                        it("should return paths with unknown versions", (function () {
                                var entries = {};
                                entries["/usr/bin/agda"] = agdaEntry;
                                entries["/usr/bin/agda-unknown"] = agdaUnknownEntry;
                                entries["/usr/bin/als-unknown"] = createMockEntry({
                                      TAG: "ALS",
                                      _0: undefined
                                    }, undefined, undefined);
                                var pathsToProbe = State__SwitchVersion2$AgdaModeVscode.EndpointLogic.getPathsNeedingProbe(entries);
                                Curry._3(Assert.deepStrictEqual, pathsToProbe.length, 2, undefined);
                                Assert.ok(pathsToProbe.includes("/usr/bin/agda-unknown"));
                                Assert.ok(pathsToProbe.includes("/usr/bin/als-unknown"));
                                Assert.ok(!pathsToProbe.includes("/usr/bin/agda"));
                              }));
                        it("should return empty array when no paths need probing", (function () {
                                var entries = {};
                                entries["/usr/bin/agda"] = agdaEntry;
                                entries["/usr/bin/als"] = alsEntry;
                                var pathsToProbe = State__SwitchVersion2$AgdaModeVscode.EndpointLogic.getPathsNeedingProbe(entries);
                                Curry._3(Assert.deepStrictEqual, pathsToProbe.length, 0, undefined);
                              }));
                      }));
                describe("entriesChanged", (function () {
                        it("should detect when entries are different objects", (function () {
                                var entries1 = {};
                                var entries2 = {};
                                var changed = State__SwitchVersion2$AgdaModeVscode.EndpointLogic.entriesChanged(entries1, entries2);
                                Curry._3(Assert.deepStrictEqual, changed, true, undefined);
                              }));
                        it("should return false when entries are same object", (function () {
                                var entries = {};
                                var changed = State__SwitchVersion2$AgdaModeVscode.EndpointLogic.entriesChanged(entries, entries);
                                Curry._3(Assert.deepStrictEqual, changed, false, undefined);
                              }));
                      }));
              }));
        describe("EndpointManager Integration", (function () {
                describe("toItems", (function () {
                        it("should delegate to EndpointLogic.entriesToItems", (async function () {
                                var entries = {};
                                entries["/usr/bin/agda"] = agdaEntry;
                                var memento = Memento$AgdaModeVscode.make(undefined);
                                var extensionUri = Vscode.Uri.file("/test/extension");
                                await Memento$AgdaModeVscode.Module.PickedConnection.set(memento, "/usr/bin/agda");
                                var manager = {
                                  entries: entries,
                                  extensionUri: extensionUri
                                };
                                var items = State__SwitchVersion2$AgdaModeVscode.EndpointManager.toItems(manager, memento, extensionUri, undefined, undefined);
                                Curry._3(Assert.deepStrictEqual, items.length, 4, undefined);
                                var agdaItem = items.find(function (item) {
                                      var match = item.detail;
                                      if (match === "/usr/bin/agda") {
                                        return true;
                                      } else {
                                        return false;
                                      }
                                    });
                                if (agdaItem !== undefined) {
                                  var desc = agdaItem.description;
                                  if (desc !== undefined) {
                                    Assert.ok(desc.includes("Selected"));
                                  } else {
                                    Assert.fail("Expected description to be present");
                                  }
                                  return ;
                                }
                                Assert.fail("Could not find Agda item");
                              }));
                      }));
              }));
        describe("End-to-End Download Integration", (function () {
                describe("Download Item Creation", (function () {
                        it("should create download item with correct description based on download status", (function () {
                                var item1 = State__SwitchVersion2$AgdaModeVscode.ItemCreation.createDownloadItem(false, "ALS v1.0.0");
                                Curry._3(Assert.deepStrictEqual, item1.description, "", undefined);
                                var item2 = State__SwitchVersion2$AgdaModeVscode.ItemCreation.createDownloadItem(true, "ALS v1.0.0");
                                Curry._3(Assert.deepStrictEqual, item2.description, "Downloaded and installed", undefined);
                              }));
                      }));
                describe("Download Status Logic", (function () {
                        it("should correctly determine download status from description", (function () {
                                var notDownloadedItem = State__SwitchVersion2$AgdaModeVscode.ItemCreation.createDownloadItem(false, "ALS v1.0.0");
                                var downloadedItem = State__SwitchVersion2$AgdaModeVscode.ItemCreation.createDownloadItem(true, "ALS v1.0.0");
                                var match = notDownloadedItem.description;
                                var isNotDownloaded = match === "Downloaded and installed" ? false : true;
                                var match$1 = downloadedItem.description;
                                var isDownloaded = match$1 === "Downloaded and installed" ? true : false;
                                Curry._3(Assert.deepStrictEqual, isNotDownloaded, true, undefined);
                                Curry._3(Assert.deepStrictEqual, isDownloaded, true, undefined);
                              }));
                      }));
                describe("UI Section Layout", (function () {
                        it("should include download section when download item is provided", (function () {
                                var entries = {};
                                entries["/usr/bin/agda"] = agdaEntry;
                                var extensionUri = Vscode.Uri.file("/test/extension");
                                var globalStorageUri = Vscode.Uri.file("/test/global/storage");
                                var downloadItem = State__SwitchVersion2$AgdaModeVscode.ItemCreation.createDownloadItem(false, "ALS v1.0.0");
                                var items = State__SwitchVersion2$AgdaModeVscode.EndpointLogic.entriesToItems(entries, extensionUri, globalStorageUri, undefined, downloadItem, undefined);
                                Curry._3(Assert.deepStrictEqual, items.length, 6, undefined);
                                var downloadSeparator = items.find(function (item) {
                                      return item.label === "Download";
                                    });
                                var downloadItemFound = items.find(function (item) {
                                      return item.label === "$(cloud-download)  Download the latest Agda Language Server";
                                    });
                                Assert.ok(Core__Option.isSome(downloadSeparator));
                                Assert.ok(Core__Option.isSome(downloadItemFound));
                              }));
                        it("should not include download section when no download item is provided", (function () {
                                var entries = {};
                                entries["/usr/bin/agda"] = agdaEntry;
                                var extensionUri = Vscode.Uri.file("/test/extension");
                                var globalStorageUri = Vscode.Uri.file("/test/global/storage");
                                var items = State__SwitchVersion2$AgdaModeVscode.EndpointLogic.entriesToItems(entries, extensionUri, globalStorageUri, undefined, undefined, undefined);
                                Curry._3(Assert.deepStrictEqual, items.length, 4, undefined);
                                var downloadSeparator = items.find(function (item) {
                                      return item.label === "Download";
                                    });
                                var downloadItemFound = items.find(function (item) {
                                      return item.label === "$(cloud-download)  Download the latest Agda Language Server";
                                    });
                                Assert.ok(Core__Option.isNone(downloadSeparator));
                                Assert.ok(Core__Option.isNone(downloadItemFound));
                              }));
                      }));
                describe("Message Formatting", (function () {
                        it("should format already downloaded message correctly", (function () {
                                var downloadItem = State__SwitchVersion2$AgdaModeVscode.ItemCreation.createDownloadItem(true, "Agda v2.6.4 Language Server v1.0.0");
                                var message = Core__Option.getOr(downloadItem.detail, "ALS") + " is already downloaded";
                                Assert.ok(message.includes("is already downloaded"));
                                Assert.ok(message.includes("Agda v2.6.4 Language Server v1.0.0"));
                              }));
                        it("should format successfully downloaded message correctly", (function () {
                                var downloadItem = State__SwitchVersion2$AgdaModeVscode.ItemCreation.createDownloadItem(false, "Agda v2.6.4 Language Server v1.0.0");
                                var message = Core__Option.getOr(downloadItem.detail, "ALS") + " successfully downloaded";
                                Assert.ok(message.includes("successfully downloaded"));
                                Assert.ok(message.includes("Agda v2.6.4 Language Server v1.0.0"));
                              }));
                      }));
              }));
      }));

exports.TestData = TestData;
/* agdaEntry Not a pure module */
