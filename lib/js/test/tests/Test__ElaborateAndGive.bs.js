// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Vscode = require("vscode");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Goals$AgdaModeVscode = require("../../src/Goals.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");

function run(normalization) {
  var fileContent = {
    contents: ""
  };
  beforeEach(async function () {
        fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Give.agda"));
      });
  afterEach(async function () {
        return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset("Give.agda"), fileContent.contents);
      });
  it("should remove the given goal", (async function () {
          var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad("Give.agda");
          await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, {
                TAG: "ElaborateAndGive",
                _0: normalization
              }, Caml_option.some(new Vscode.Position(7, 14)), "y");
          Curry._3(Assert.deepStrictEqual, Goals$AgdaModeVscode.size(ctx.state.goals), 1, undefined);
          await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
          var actual = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Give.agda"));
          var expected = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset("Give.agda.out"));
          return Curry._3(Assert.deepStrictEqual, actual, expected, undefined);
        }));
}

describe("agda-mode.elaborate-and-give", (function () {
        describe("Simplified", (function () {
                run("Simplified");
              }));
        describe("Instantiated", (function () {
                run("Instantiated");
              }));
        describe("Normalised", (function () {
                run("Normalised");
              }));
      }));

exports.run = run;
/*  Not a pure module */
