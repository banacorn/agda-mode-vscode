// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var State__Connection$AgdaModeVscode = require("../../src/State/State__Connection.bs.js");

function run(normalization) {
  var filename = "SearchAbout.agda";
  var fileContent = {
    contents: ""
  };
  beforeEach(async function () {
        fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
      });
  afterEach(async function () {
        return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset(filename), fileContent.contents);
      });
  it("should be responded with correct responses", (async function () {
          var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
          var responses = await State__Connection$AgdaModeVscode.sendRequestAndCollectResponses(ctx.state, {
                TAG: "SearchAbout",
                _0: normalization,
                _1: "ℕ"
              });
          var filteredResponses = responses.filter(Test__Util$AgdaModeVscode.filteredResponse);
          return Curry._3(Assert.deepStrictEqual, filteredResponses, [{
                        TAG: "DisplayInfo",
                        _0: {
                          TAG: "SearchAbout",
                          _0: "Definitions about ℕ\n  _+_     : ℕ → ℕ → ℕ\n  isZero  : ℕ → Bool\n  suc     : ℕ → ℕ\n  testNat : ℕ\n  zero    : ℕ"
                        }
                      }], undefined);
        }));
  it("should handle empty search terms gracefully", (async function () {
          var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
          var responses = await State__Connection$AgdaModeVscode.sendRequestAndCollectResponses(ctx.state, {
                TAG: "SearchAbout",
                _0: normalization,
                _1: ""
              });
          var filteredResponses = responses.filter(Test__Util$AgdaModeVscode.filteredResponse);
          Curry._3(Assert.deepStrictEqual, filteredResponses, [], undefined);
          return await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
        }));
  it("should handle non-existent identifiers", (async function () {
          var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
          var responses = await State__Connection$AgdaModeVscode.sendRequestAndCollectResponses(ctx.state, {
                TAG: "SearchAbout",
                _0: normalization,
                _1: "NonExistentIdentifier"
              });
          var filteredResponses = responses.filter(Test__Util$AgdaModeVscode.filteredResponse);
          Curry._3(Assert.deepStrictEqual, filteredResponses, [{
                  TAG: "DisplayInfo",
                  _0: {
                    TAG: "SearchAbout",
                    _0: "Definitions about NonExistentIdentifier"
                  }
                }], undefined);
          return await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
        }));
}

describe("agda-mode.search-about", (function () {
        describe("Simplified", (function () {
                run("Simplified");
              }));
        describe("Instantiated", (function () {
                run("Instantiated");
              }));
        describe("Normalised", (function () {
                run("Normalised");
              }));
        describe("HeadNormal", (function () {
                run("HeadNormal");
              }));
      }));

exports.run = run;
/*  Not a pure module */
