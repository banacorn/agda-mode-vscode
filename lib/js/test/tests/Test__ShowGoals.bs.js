// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Assert = require("assert");
var Util$AgdaModeVscode = require("../../src/Util/Util.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var State__Connection$AgdaModeVscode = require("../../src/State/State__Connection.bs.js");

function run(normalization) {
  var filename = "Goals.agda";
  var fileContent = {
    contents: ""
  };
  beforeEach(async function () {
        fileContent.contents = await Test__Util$AgdaModeVscode.$$File.read(Test__Util$AgdaModeVscode.Path.asset(filename));
      });
  afterEach(async function () {
        return await Test__Util$AgdaModeVscode.$$File.write(Test__Util$AgdaModeVscode.Path.asset(filename), fileContent.contents);
      });
  it("should be responded with correct responses", (async function () {
          var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
          var responses = await State__Connection$AgdaModeVscode.sendRequestAndCollectResponses(ctx.state, {
                TAG: "ShowGoals",
                _0: normalization
              });
          var filteredResponses = responses.filter(Test__Util$AgdaModeVscode.filteredResponse);
          var filepath = Test__Util$AgdaModeVscode.Path.asset(filename);
          var version = ctx.state.agdaVersion;
          if (version !== undefined) {
            var expectedAllGoalsWarningsBody = Util$AgdaModeVscode.Version.gte(version, "2.7.0") ? "?0 : ℕ\n?1 : ℕ\n?2 : ℕ\n?3 : _11\nSort _10  [ at " + filepath + ":11,19-31 ]\n_11 : _10  [ at " + filepath + ":11,19-31 ]\n_14 : ℕ  [ at " + filepath + ":11,19-31 ]\n\n———— Error —————————————————————————————————————————————————\nUnsolved constraints" : "?0 : ℕ\n?1 : ℕ\n?2 : ℕ\n?3 : _11\nSort _10  [ at " + filepath + ":11,19-31 ]\n_11 : _10  [ at " + filepath + ":11,19-31 ]\n_14 : ℕ  [ at " + filepath + ":11,19-31 ]\n\n———— Errors ————————————————————————————————————————————————\nUnsolved constraints\n";
            return Curry._3(Assert.deepStrictEqual, filteredResponses, [{
                          TAG: "DisplayInfo",
                          _0: {
                            TAG: "AllGoalsWarnings",
                            _0: "*All Goals, Errors*",
                            _1: expectedAllGoalsWarningsBody
                          }
                        }], undefined);
          }
          Assert.fail("No Agda version found");
        }));
  it("should work", (async function () {
          var ctx = await Test__Util$AgdaModeVscode.AgdaMode.makeAndLoad(filename);
          await Test__Util$AgdaModeVscode.AgdaMode.execute(ctx, {
                TAG: "ShowGoals",
                _0: normalization
              }, undefined, undefined);
          return await Test__Util$AgdaModeVscode.AgdaMode.quit(ctx);
        }));
}

describe("agda-mode.show-goals", (function () {
        describe("AsIs", (function () {
                run("AsIs");
              }));
        describe("Simplified", (function () {
                run("Simplified");
              }));
        describe("Normalised", (function () {
                run("Normalised");
              }));
        describe("HeadNormal", (function () {
                run("HeadNormal");
              }));
      }));

exports.run = run;
/*  Not a pure module */
