// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Core__Dict = require("@rescript/core/lib/js/src/Core__Dict.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var State$AgdaModeVscode = require("./State/State.bs.js");
var Tokens$AgdaModeVscode = require("./Tokens.bs.js");
var Resource$AgdaModeVscode = require("./Resource.bs.js");

function make(state) {
  if (state === undefined) {
    return {
            state: undefined,
            semanticTokens: Resource$AgdaModeVscode.make()
          };
  }
  var semanticTokens = Tokens$AgdaModeVscode.getVSCodeTokens(state.tokens);
  return {
          state: state,
          semanticTokens: semanticTokens
        };
}

var dict = {};

function get($$document) {
  return dict[$$document.fileName];
}

function getAll() {
  return Object.values(dict);
}

function add($$document, state) {
  var entry = dict[$$document.fileName];
  if (entry !== undefined) {
    var state$1 = entry.state;
    if (state$1 !== undefined) {
      entry.state = state$1;
      return ;
    }
    var newEntry = make(state);
    dict[$$document.fileName] = newEntry;
    return ;
  }
  var entry$1 = make(state);
  dict[$$document.fileName] = entry$1;
}

function remove($$document) {
  Core__Dict.$$delete(dict, $$document.fileName);
}

async function removeAndDestroyPrim(filepath) {
  var entry = dict[filepath];
  if (entry === undefined) {
    return ;
  }
  Core__Dict.$$delete(dict, filepath);
  var state = entry.state;
  if (state !== undefined) {
    await State$AgdaModeVscode.destroy(state, false);
    return ;
  }
  
}

function removeAndDestroy($$document) {
  return removeAndDestroyPrim($$document.fileName);
}

async function removeAndDestroyAll() {
  await Util$AgdaModeVscode.Promise_.oneByOne(Object.keys(dict).map(function (filepath) {
            return function () {
              return removeAndDestroyPrim(filepath);
            };
          }));
}

function isEmpty() {
  return Object.keys(dict).length === 0;
}

async function requestSemanticTokens($$document) {
  var entry = dict[$$document.fileName];
  if (entry !== undefined) {
    return await Resource$AgdaModeVscode.get(entry.semanticTokens);
  }
  var entry$1 = make(undefined);
  dict[$$document.fileName] = entry$1;
  return await Resource$AgdaModeVscode.get(entry$1.semanticTokens);
}

var Module_Entry = {};

var Module = {
  Entry: Module_Entry,
  get: get,
  getAll: getAll,
  add: add,
  remove: remove,
  removeAndDestroy: removeAndDestroy,
  removeAndDestroyAll: removeAndDestroyAll,
  isEmpty: isEmpty,
  requestSemanticTokens: requestSemanticTokens
};

var Entry = Module_Entry;

exports.Module = Module;
exports.Entry = Entry;
exports.get = get;
exports.getAll = getAll;
exports.add = add;
exports.remove = remove;
exports.removeAndDestroy = removeAndDestroy;
exports.removeAndDestroyAll = removeAndDestroyAll;
exports.isEmpty = isEmpty;
exports.requestSemanticTokens = requestSemanticTokens;
/* Util-AgdaModeVscode Not a pure module */
