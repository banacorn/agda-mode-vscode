// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Core__Dict = require("@rescript/core/lib/js/src/Core__Dict.bs.js");
var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var State$AgdaModeVscode = require("./State/State.bs.js");
var Resource$AgdaModeVscode = require("./Resource.bs.js");
var Highlighting$AgdaModeVscode = require("./Highlighting.bs.js");

function make(state) {
  if (state === undefined) {
    return {
            state: undefined,
            semanticTokens: Resource$AgdaModeVscode.make()
          };
  }
  var semanticTokens = Highlighting$AgdaModeVscode.getSemanticTokens(state.highlighting);
  return {
          state: state,
          semanticTokens: semanticTokens
        };
}

var dict = {};

function getEntry(fileName) {
  return dict[fileName];
}

function getState(fileName) {
  return Core__Option.flatMap(dict[fileName], (function (x) {
                return x.state;
              }));
}

function getAllStates() {
  return Core__Array.filterMap(Object.values(dict), (function (getEntry) {
                return getEntry.state;
              }));
}

function add(fileName, state) {
  var entry = dict[fileName];
  if (entry !== undefined) {
    var state$1 = entry.state;
    if (state$1 !== undefined) {
      entry.state = state$1;
    } else {
      dict[fileName] = make(state);
    }
    return ;
  }
  dict[fileName] = make(state);
}

function remove(fileName) {
  Core__Dict.$$delete(dict, fileName);
}

async function removeAndDestroy(fileName) {
  var entry = dict[fileName];
  if (entry !== undefined) {
    Core__Dict.$$delete(dict, fileName);
    return Core__Option.forEach(entry.state, (function (state) {
                  State$AgdaModeVscode.destroy(state, false);
                }));
  }
  
}

async function removeAndDestroyAll() {
  await Util$AgdaModeVscode.Promise_.oneByOne(Object.keys(dict).map(function (pair) {
            return function () {
              return removeAndDestroy(pair);
            };
          }));
}

function isEmpty() {
  return Object.keys(dict).length === 0;
}

async function requestSemanticTokens(fileName) {
  var entry = dict[fileName];
  if (entry !== undefined) {
    return await Resource$AgdaModeVscode.get(entry.semanticTokens);
  }
  var entry$1 = make(undefined);
  dict[fileName] = entry$1;
  return await Resource$AgdaModeVscode.get(entry$1.semanticTokens);
}

var Module_Entry = {};

var Module = {
  Entry: Module_Entry,
  getState: getState,
  getEntry: getEntry,
  getAllStates: getAllStates,
  add: add,
  remove: remove,
  removeAndDestroy: removeAndDestroy,
  removeAndDestroyAll: removeAndDestroyAll,
  isEmpty: isEmpty,
  requestSemanticTokens: requestSemanticTokens
};

var Entry = Module_Entry;

exports.Module = Module;
exports.Entry = Entry;
exports.getState = getState;
exports.getEntry = getEntry;
exports.getAllStates = getAllStates;
exports.add = add;
exports.remove = remove;
exports.removeAndDestroy = removeAndDestroy;
exports.removeAndDestroyAll = removeAndDestroyAll;
exports.isEmpty = isEmpty;
exports.requestSemanticTokens = requestSemanticTokens;
/* Util-AgdaModeVscode Not a pure module */
