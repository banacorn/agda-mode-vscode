// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Core__Dict = require("@rescript/core/lib/js/src/Core__Dict.bs.js");
var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var State$AgdaModeVscode = require("./State/State.bs.js");
var Tokens$AgdaModeVscode = require("./Tokens.bs.js");
var Resource$AgdaModeVscode = require("./Resource.bs.js");

function make(state) {
  if (state === undefined) {
    return {
            state: undefined,
            semanticTokens: Resource$AgdaModeVscode.make()
          };
  }
  var semanticTokens = Tokens$AgdaModeVscode.getVSCodeTokens(state.tokens);
  return {
          state: state,
          semanticTokens: semanticTokens
        };
}

var dict = {};

function getEntry(fileName) {
  console.log("Registry.getEntry: Looking up entry for " + fileName);
  var result = dict[fileName];
  if (result !== undefined) {
    console.log("Registry.getEntry: Found entry for " + fileName);
  } else {
    console.log("Registry.getEntry: No entry found for " + fileName);
    var allKeys = Object.keys(dict);
    console.log("Registry.getEntry: All existing keys: " + allKeys.join(", "));
  }
  return result;
}

function getState(fileName) {
  return Core__Option.flatMap(getEntry(fileName), (function (x) {
                return x.state;
              }));
}

function getAllStates() {
  return Core__Array.filterMap(Object.values(dict), (function (getEntry) {
                return getEntry.state;
              }));
}

function add(fileName, state) {
  console.log("Registry.add: Adding entry for " + fileName);
  var entry = getEntry(fileName);
  if (entry !== undefined) {
    console.log("Registry.add: Updating existing entry for " + fileName);
    var state$1 = entry.state;
    if (state$1 !== undefined) {
      entry.state = state$1;
    } else {
      dict[fileName] = make(state);
    }
    return ;
  }
  console.log("Registry.add: Creating new entry for " + fileName);
  dict[fileName] = make(state);
}

function remove(fileName) {
  Core__Dict.$$delete(dict, fileName);
}

async function removeAndDestroy(fileName) {
  console.log("Registry.removeAndDestroy: Starting for " + fileName);
  var entry = getEntry(fileName);
  if (entry !== undefined) {
    console.log("Registry.removeAndDestroy: Found entry for " + fileName);
    Core__Dict.$$delete(dict, fileName);
    console.log("Registry.removeAndDestroy: Removed entry for " + fileName);
    var state = entry.state;
    if (state !== undefined) {
      console.log("Registry.removeAndDestroy: Destroying state for " + fileName);
      await State$AgdaModeVscode.destroy(state, false);
      console.log("Registry.removeAndDestroy: Completed state destruction for " + fileName);
    } else {
      console.log("Registry.removeAndDestroy: No state to destroy for " + fileName);
    }
  } else {
    console.log("Registry.removeAndDestroy: No entry found for " + fileName);
  }
  console.log("Registry.removeAndDestroy: Completed for " + fileName);
}

async function removeAndDestroyAll() {
  await Util$AgdaModeVscode.Promise_.oneByOne(Object.keys(dict).map(function (pair) {
            return function () {
              return removeAndDestroy(pair);
            };
          }));
}

function isEmpty() {
  return Object.keys(dict).length === 0;
}

async function requestSemanticTokens(fileName) {
  console.log("Registry.requestSemanticTokens: Starting request for " + fileName);
  var entry = getEntry(fileName);
  if (entry !== undefined) {
    console.log("Registry.requestSemanticTokens: Found existing entry for " + fileName);
    var tokens = await Resource$AgdaModeVscode.get(entry.semanticTokens);
    console.log("Registry.requestSemanticTokens: Got " + String(tokens.length) + " tokens from existing entry");
    return tokens;
  }
  console.log("Registry.requestSemanticTokens: No entry found, creating new one for " + fileName);
  var entry$1 = make(undefined);
  dict[fileName] = entry$1;
  var tokens$1 = await Resource$AgdaModeVscode.get(entry$1.semanticTokens);
  console.log("Registry.requestSemanticTokens: Got " + String(tokens$1.length) + " tokens from new entry");
  return tokens$1;
}

var Module_Entry = {};

var Module = {
  Entry: Module_Entry,
  getState: getState,
  getEntry: getEntry,
  getAllStates: getAllStates,
  add: add,
  remove: remove,
  removeAndDestroy: removeAndDestroy,
  removeAndDestroyAll: removeAndDestroyAll,
  isEmpty: isEmpty,
  requestSemanticTokens: requestSemanticTokens
};

var Entry = Module_Entry;

exports.Module = Module;
exports.Entry = Entry;
exports.getState = getState;
exports.getEntry = getEntry;
exports.getAllStates = getAllStates;
exports.add = add;
exports.remove = remove;
exports.removeAndDestroy = removeAndDestroy;
exports.removeAndDestroyAll = removeAndDestroyAll;
exports.isEmpty = isEmpty;
exports.requestSemanticTokens = requestSemanticTokens;
/* Util-AgdaModeVscode Not a pure module */
