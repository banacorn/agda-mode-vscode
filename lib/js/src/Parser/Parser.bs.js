// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Nodepath = require("node:path");
var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Caml_splice_call = require("rescript/lib/js/caml_splice_call.js");
var OS$AgdaModeVscode = require("../Util/OS.bs.js");

function splitToLines(s) {
  return Core__Array.filterMap(s.split(/\r\n|\n/).map(function (x) {
                  if (x !== undefined) {
                    return x;
                  }
                  
                }), (function (x) {
                return x;
              }));
}

function map(f, x) {
  if (typeof x !== "object") {
    return "Stop";
  } else {
    return {
            TAG: "Yield",
            _0: f(x._0),
            [Symbol.for("name")]: "Yield"
          };
  }
}

function tap(f, x) {
  if (typeof x !== "object") {
    return "Stop";
  }
  var x$1 = x._0;
  f(x$1);
  return {
          TAG: "Yield",
          _0: x$1,
          [Symbol.for("name")]: "Yield"
        };
}

function flatMap(f, x) {
  if (typeof x !== "object") {
    return "Stop";
  } else {
    return f(x._0);
  }
}

var Gen = {
  map: map,
  tap: tap,
  flatMap: flatMap
};

function make(initialContinuation, callback) {
  return {
          initialContinuation: initialContinuation,
          continuation: {
            contents: undefined
          },
          callback: callback
        };
}

function feed(self, input) {
  var $$continue = Core__Option.getOr(self.continuation.contents, self.initialContinuation);
  var err = $$continue(input);
  switch (err.TAG) {
    case "Error" :
        return self.callback({
                    TAG: "Yield",
                    _0: {
                      TAG: "Error",
                      _0: err._0,
                      [Symbol.for("name")]: "Error"
                    },
                    [Symbol.for("name")]: "Yield"
                  });
    case "Continue" :
        self.continuation.contents = err._0;
        return ;
    case "Done" :
        self.callback({
              TAG: "Yield",
              _0: {
                TAG: "Ok",
                _0: err._0,
                [Symbol.for("name")]: "Ok"
              },
              [Symbol.for("name")]: "Yield"
            });
        self.continuation.contents = undefined;
        return ;
    
  }
}

function stop(self) {
  self.callback("Stop");
}

var Incr = {
  Gen: Gen,
  make: make,
  feed: feed,
  stop: stop
};

function toString(x) {
  switch (x) {
    case "StackEmpty" :
        return "StackEmpty";
    case "StackElementNullReference" :
        return "StackElementNullReference";
    case "PreprocessError" :
        return "PreprocessError";
    
  }
}

var SExprParseError = {
  toString: toString
};

function toString$1(x) {
  if (x.TAG === "A") {
    return "\"" + (x._0 + "\"");
  } else {
    return "[" + (x._0.map(toString$1).join(", ") + "]");
  }
}

function preprocess(string) {
  if (string.substring(0, 13) === "cannot read: ") {
    return {
            TAG: "Error",
            _0: string.slice(12),
            [Symbol.for("name")]: "Error"
          };
  } else {
    return {
            TAG: "Ok",
            _0: string,
            [Symbol.for("name")]: "Ok"
          };
  }
}

function flatten(x) {
  if (x.TAG === "A") {
    return [x._0];
  } else {
    return x._0.map(flatten).flat();
  }
}

function parseWithContinuation(string) {
  var parseSExpression = function (state, string) {
    var in_str = state.in_str;
    var escaped = state.escaped;
    var word = state.word;
    var stack = state.stack;
    var pushToTheTop = function (elem) {
      var index = stack.length - 1 | 0;
      var expr = stack[index];
      if (expr === undefined) {
        return ;
      }
      var xs = expr.contents;
      if (xs.TAG === "A") {
        expr.contents = {
          TAG: "L",
          _0: [
            expr.contents,
            elem
          ],
          [Symbol.for("name")]: "L"
        };
        return ;
      }
      xs._0.push(elem);
    };
    var totalLength = string.length;
    for(var i = 0; i < totalLength; ++i){
      var $$char = string.charAt(i);
      if (escaped.contents) {
        if ($$char === "n") {
          word.contents = word.contents + "\\";
        }
        word.contents = word.contents + $$char;
        escaped.contents = false;
      } else if (!($$char === "\'" && !in_str.contents)) {
        if ($$char === "(" && !in_str.contents) {
          stack.push({
                contents: {
                  TAG: "L",
                  _0: [],
                  [Symbol.for("name")]: "L"
                }
              });
        } else if ($$char === ")" && !in_str.contents) {
          if (word.contents !== "") {
            pushToTheTop({
                  TAG: "A",
                  _0: word.contents,
                  [Symbol.for("name")]: "A"
                });
            word.contents = "";
          }
          var expr = stack.pop();
          if (expr !== undefined) {
            pushToTheTop(expr.contents);
          }
          
        } else if ($$char === " " && !in_str.contents) {
          if (word.contents !== "") {
            pushToTheTop({
                  TAG: "A",
                  _0: word.contents,
                  [Symbol.for("name")]: "A"
                });
            word.contents = "";
          }
          
        } else if ($$char === "\"") {
          in_str.contents = !in_str.contents;
        } else if ($$char === "\\" && in_str.contents) {
          escaped.contents = true;
        } else {
          word.contents = word.contents + $$char;
        }
      }
      
    }
    var match = stack.length;
    if (match === 0) {
      return {
              TAG: "Error",
              _0: [
                "StackEmpty",
                string
              ],
              [Symbol.for("name")]: "Error"
            };
    }
    if (match !== 1) {
      return {
              TAG: "Continue",
              _0: (function (extra) {
                  return parseSExpression(state, extra);
                }),
              [Symbol.for("name")]: "Continue"
            };
    }
    var v = stack[0];
    if (v === undefined) {
      return {
              TAG: "Error",
              _0: [
                "StackEmpty",
                string
              ],
              [Symbol.for("name")]: "Error"
            };
    }
    var xs = v.contents;
    if (xs.TAG === "A") {
      return {
              TAG: "Error",
              _0: [
                "StackElementNullReference",
                string
              ],
              [Symbol.for("name")]: "Error"
            };
    }
    var w = xs._0[0];
    if (w !== undefined) {
      return {
              TAG: "Done",
              _0: w,
              [Symbol.for("name")]: "Done"
            };
    } else {
      return {
              TAG: "Continue",
              _0: (function (extra) {
                  return parseSExpression(state, extra);
                }),
              [Symbol.for("name")]: "Continue"
            };
    }
  };
  var initialState = function () {
    return {
            stack: [{
                contents: {
                  TAG: "L",
                  _0: [],
                  [Symbol.for("name")]: "L"
                }
              }],
            word: {
              contents: ""
            },
            escaped: {
              contents: false
            },
            in_str: {
              contents: false
            }
          };
  };
  var processed = preprocess(string);
  if (processed.TAG === "Ok") {
    return parseSExpression(initialState(), processed._0);
  } else {
    return {
            TAG: "Error",
            _0: [
              "PreprocessError",
              string
            ],
            [Symbol.for("name")]: "Error"
          };
  }
}

function parse(input) {
  var resultAccum = {
    contents: []
  };
  var continuation = {
    contents: undefined
  };
  splitToLines(input).forEach(function (line) {
        var $$continue = Core__Option.getOr(continuation.contents, parseWithContinuation);
        var err = $$continue(line);
        switch (err.TAG) {
          case "Error" :
              resultAccum.contents.push({
                    TAG: "Error",
                    _0: err._0,
                    [Symbol.for("name")]: "Error"
                  });
              return ;
          case "Continue" :
              continuation.contents = err._0;
              return ;
          case "Done" :
              resultAccum.contents.push({
                    TAG: "Ok",
                    _0: err._0,
                    [Symbol.for("name")]: "Ok"
                  });
              continuation.contents = undefined;
              return ;
          
        }
      });
  return resultAccum.contents;
}

function makeIncr(callback) {
  return make(parseWithContinuation, callback);
}

var SExpression = {
  toString: toString$1,
  preprocess: preprocess,
  flatten: flatten,
  parseWithContinuation: parseWithContinuation,
  parse: parse,
  makeIncr: makeIncr
};

function toString$2(x) {
  if (x.TAG === "SExpression") {
    return "Something went wrong when parsing S-expressions. Error code " + (toString(x._0) + (" \"" + (x._1 + "\"")));
  } else {
    return "Perhaps the underlying protocol used by Agda for communicating with agda-mode has changed.\nPlease report which version of Agda you are using.\nError code: R" + (String(x._0) + (" \"" + (toString$1(x._1) + "\"")));
  }
}

var $$Error = {
  toString: toString$2
};

function removedBidi(raw) {
  if (raw.charCodeAt(0) === 8234.0) {
    return raw.slice(1);
  } else {
    return raw;
  }
}

function make$1(raw) {
  return Nodepath.parse(Nodepath.normalize(removedBidi(raw)));
}

function toString$3(x) {
  var reconstituted;
  if (OS$AgdaModeVscode.onUnix) {
    reconstituted = x;
  } else {
    var rootLength = x.root.length;
    var oldRoot = x.dir.slice(0, rootLength);
    var newRoot = oldRoot.toUpperCase();
    reconstituted = {
      dir: x.dir,
      root: newRoot,
      base: x.base,
      name: x.name,
      ext: x.ext
    };
  }
  var s = Nodepath.format(reconstituted);
  return Caml_splice_call.spliceApply(Nodepath.join, [Core__Array.filterMap(s.split(/[\\/]/g), (function (x) {
                      return x;
                    }))]);
}

function equal(x, y) {
  return toString$3(x) === toString$3(y);
}

var Filepath = {
  make: make$1,
  toString: toString$3,
  equal: equal
};

function filepath(s) {
  var removedBidi = s.charCodeAt(0) === 8234.0 ? s.slice(1) : s;
  var normalized = Nodepath.normalize(removedBidi);
  var makeRootsUpperCaseOnWindows = function (path) {
    var obj = Nodepath.parse(path);
    var rootLength = obj.root.length;
    var oldRoot = path.slice(0, rootLength);
    var rest = path.slice(rootLength);
    var newRoot = oldRoot.toUpperCase();
    return newRoot + rest;
  };
  var upperCased = OS$AgdaModeVscode.onUnix ? normalized : makeRootsUpperCaseOnWindows(normalized);
  return upperCased.replace(/\\/g, "/");
}

function $$escape(s) {
  return s.replace(/\\/g, "\\\\").replace(/\"/g, "\\\"").replace(/\r\n/g, "\\r\\n").replace(/\n/g, "\\n");
}

function unescapeEOL(s) {
  return s.replace(/\\r\\n/g, "\r\n").replace(/\\n/g, "\n");
}

exports.splitToLines = splitToLines;
exports.Incr = Incr;
exports.SExprParseError = SExprParseError;
exports.SExpression = SExpression;
exports.$$Error = $$Error;
exports.Filepath = Filepath;
exports.filepath = filepath;
exports.$$escape = $$escape;
exports.unescapeEOL = unescapeEOL;
/* node:path Not a pure module */
