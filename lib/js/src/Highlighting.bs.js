// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("rescript/lib/js/caml_option.js");
var Common$AgdaModeVscode = require("./View/Common.bs.js");
var Config$AgdaModeVscode = require("./Config.bs.js");
var Editor$AgdaModeVscode = require("./Editor.bs.js");
var Parser$AgdaModeVscode = require("./Parser/Parser.bs.js");
var Tokens$AgdaModeVscode = require("./Tokens.bs.js");
var Resource$AgdaModeVscode = require("./Resource.bs.js");
var Highlighting__SemanticToken$AgdaModeVscode = require("./Highlighting/Highlighting__SemanticToken.bs.js");

function decorateHole(editor, interval, index) {
  var $$document = editor.document;
  var backgroundRange = Common$AgdaModeVscode.Interval.toVSCodeRange($$document, interval);
  var background = Editor$AgdaModeVscode.Decoration.highlightBackground(editor, "editor.selectionHighlightBackground", [backgroundRange]);
  var indexText = String(index);
  var innerInterval_0 = interval[0];
  var innerInterval_1 = interval[1] - 2 | 0;
  var innerInterval = [
    innerInterval_0,
    innerInterval_1
  ];
  var indexRange = Common$AgdaModeVscode.Interval.toVSCodeRange($$document, innerInterval);
  var index$1 = Editor$AgdaModeVscode.Decoration.overlayText(editor, "editorLightBulb.foreground", indexText, indexRange);
  return [
          background,
          index$1
        ];
}

function make(semanticTokens) {
  return {
          decorations: [],
          semanticTokens: semanticTokens !== undefined ? Caml_option.valFromOption(semanticTokens) : Resource$AgdaModeVscode.make()
        };
}

function clear(self) {
  self.decorations.forEach(function (param) {
        Editor$AgdaModeVscode.Decoration.destroy(param[0]);
      });
  self.decorations = [];
}

function destroy(self) {
  clear(self);
}

function redecorate(self, editor) {
  self.decorations.forEach(function (param) {
        Editor$AgdaModeVscode.Decoration.decorate(editor, param[0], param[1]);
      });
}

function getSemanticTokens(self) {
  return self.semanticTokens;
}

async function apply(self, tokens, editor) {
  if (Config$AgdaModeVscode.Highlighting.getHighlightWithThemeColors()) {
    var match = Tokens$AgdaModeVscode.toDecorationsAndSemanticTokens(tokens, editor);
    Resource$AgdaModeVscode.set(self.semanticTokens, match[1]);
    self.decorations = self.decorations.concat(match[0]);
    return ;
  }
  var decorations = Tokens$AgdaModeVscode.toDecorations(tokens, editor);
  self.decorations = self.decorations.concat(decorations);
}

var Module = {
  make: make,
  destroy: destroy,
  decorateHole: decorateHole,
  apply: apply,
  clear: clear,
  redecorate: redecorate,
  getSemanticTokens: getSemanticTokens
};

var Decoration;

var SemanticToken;

exports.Decoration = Decoration;
exports.SemanticToken = SemanticToken;
exports.Module = Module;
exports.make = make;
exports.destroy = destroy;
exports.decorateHole = decorateHole;
exports.apply = apply;
exports.clear = clear;
exports.redecorate = redecorate;
exports.getSemanticTokens = getSemanticTokens;
/* Common-AgdaModeVscode Not a pure module */
