// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("rescript/lib/js/js_exn.js");
var Vscode = require("vscode");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

async function copy(source, destination) {
  try {
    await Vscode.workspace.fs.copy(source, destination);
    return {
            TAG: "Ok",
            _0: undefined
          };
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID === Js_exn.$$Error) {
      return {
              TAG: "Error",
              _0: Core__Option.getOr(obj._1.message, "Unknown file system error")
            };
    } else {
      return {
              TAG: "Error",
              _0: "Unknown file system error"
            };
    }
  }
}

async function createDirectory(uri) {
  try {
    await Vscode.workspace.fs.createDirectory(uri);
    return {
            TAG: "Ok",
            _0: undefined
          };
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID === Js_exn.$$Error) {
      return {
              TAG: "Error",
              _0: Core__Option.getOr(obj._1.message, "Unknown file system error")
            };
    } else {
      return {
              TAG: "Error",
              _0: "Unknown file system error"
            };
    }
  }
}

async function $$delete(uri) {
  try {
    await Vscode.workspace.fs.delete(uri);
    return {
            TAG: "Ok",
            _0: undefined
          };
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID === Js_exn.$$Error) {
      return {
              TAG: "Error",
              _0: Core__Option.getOr(obj._1.message, "Unknown file system error")
            };
    } else {
      return {
              TAG: "Error",
              _0: "Unknown file system error"
            };
    }
  }
}

function isWritableFileSystem(uri) {
  try {
    var isWritable = Vscode.workspace.fs.isWritableFileSystem(uri.scheme);
    return {
            TAG: "Ok",
            _0: isWritable
          };
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID === Js_exn.$$Error) {
      return {
              TAG: "Error",
              _0: Core__Option.getOr(obj._1.message, "Unknown file system error")
            };
    } else {
      return {
              TAG: "Error",
              _0: "Unknown file system error"
            };
    }
  }
}

async function readDirectory(uri) {
  try {
    var entries = await Vscode.workspace.fs.readDirectory(uri);
    return {
            TAG: "Ok",
            _0: entries
          };
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID === Js_exn.$$Error) {
      return {
              TAG: "Error",
              _0: Core__Option.getOr(obj._1.message, "Unknown file system error")
            };
    } else {
      return {
              TAG: "Error",
              _0: "Unknown file system error"
            };
    }
  }
}

async function readFile(uri) {
  try {
    var content = await Vscode.workspace.fs.readFile(uri);
    return {
            TAG: "Ok",
            _0: content
          };
  }
  catch (raw_obj){
    var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
    if (obj.RE_EXN_ID === Js_exn.$$Error) {
      return {
              TAG: "Error",
              _0: Core__Option.getOr(obj._1.message, "Unknown file system error")
            };
    } else {
      return {
              TAG: "Error",
              _0: "Unknown file system error"
            };
    }
  }
}

exports.copy = copy;
exports.createDirectory = createDirectory;
exports.$$delete = $$delete;
exports.isWritableFileSystem = isWritableFileSystem;
exports.readDirectory = readDirectory;
exports.readFile = readFile;
/* vscode Not a pure module */
