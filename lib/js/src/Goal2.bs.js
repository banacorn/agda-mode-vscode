// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Editor$AgdaModeVscode = require("./Editor.bs.js");

function makeHaskellRange(goalInfo, $$document, version, filepath) {
  var startPoint = $$document.positionAt(goalInfo.start);
  var endPoint = $$document.positionAt(goalInfo.end);
  var startIndex = String(goalInfo.start + 3 | 0);
  var startRow = String(startPoint.line + 1 | 0);
  var startColumn = String(startPoint.character + 3 | 0);
  var startPart = startIndex + " " + startRow + " " + startColumn;
  var endIndex$p = String(goalInfo.end - 3 | 0);
  var endRow = String(endPoint.line + 1 | 0);
  var endColumn = String(endPoint.character - 1 | 0);
  var endPart = endIndex$p + " " + endRow + " " + endColumn;
  if (Util$AgdaModeVscode.Version.gte(version, "2.8.0")) {
    return "(intervalsToRange (Just (mkAbsolute \"" + filepath + "\")) [Interval () (Pn () " + startPart + ") (Pn () " + endPart + ")])";
  } else if (Util$AgdaModeVscode.Version.gte(version, "2.5.1")) {
    return "(intervalsToRange (Just (mkAbsolute \"" + filepath + "\")) [Interval (Pn () " + startPart + ") (Pn () " + endPart + ")])";
  } else {
    return "(Range [Interval (Pn (Just (mkAbsolute \"" + filepath + "\")) " + startPart + ") (Pn (Just (mkAbsolute \"" + filepath + "\")) " + endPart + ")])";
  }
}

function read(goal, $$document) {
  var innerRange = new Vscode.Range($$document.positionAt(goal.start + 2 | 0), $$document.positionAt(goal.end - 2 | 0));
  return Editor$AgdaModeVscode.$$Text.get($$document, innerRange).trim();
}

function indentationWidth(goal, $$document) {
  var goalStart = $$document.positionAt(goal.start);
  var lineNo = goalStart.line;
  var range = new Vscode.Range(new Vscode.Position(lineNo, 0), goalStart);
  var textBeforeGoal = Editor$AgdaModeVscode.$$Text.get($$document, range);
  var indentedBy = function (s) {
    var n = 0;
    for(var i = 0 ,i_finish = s.length; i < i_finish; ++i){
      var match = s.charAt(i);
      var exit = 0;
      switch (match) {
        case "	" :
        case "" :
        case " " :
        case "\n" :
            exit = 1;
            break;
        default:
          
      }
      if (exit === 1 && i === n) {
        n = n + 1 | 0;
      }
      
    }
    return n;
  };
  return [
          indentedBy(textBeforeGoal),
          textBeforeGoal,
          range
        ];
}

var Module = {
  read: read,
  makeHaskellRange: makeHaskellRange,
  indentationWidth: indentationWidth
};

exports.Module = Module;
exports.read = read;
exports.makeHaskellRange = makeHaskellRange;
exports.indentationWidth = indentationWidth;
/* vscode Not a pure module */
