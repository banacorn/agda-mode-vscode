// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Core__List = require("@rescript/core/lib/js/src/Core__List.bs.js");
var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");
var Core__Ordering = require("@rescript/core/lib/js/src/Core__Ordering.bs.js");
var Caml_splice_call = require("rescript/lib/js/caml_splice_call.js");
var CompareVersions = require("compare-versions");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");
var Json_Decode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Decode.bs.js");

function add(disposables, disposable) {
  disposable.push(disposables);
}

var Disposable = {
  add: add
};

function mapError(x, f) {
  if (x.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: x._0
          };
  } else {
    return {
            TAG: "Error",
            _0: f(x._0)
          };
  }
}

function partition(xs) {
  var errors = [];
  var oks = [];
  xs.forEach(function (x) {
        if (x.TAG === "Ok") {
          oks.push(x._0);
          return ;
        }
        errors.push(x._0);
      });
  return [
          oks,
          errors
        ];
}

var Result = {
  mapError: mapError,
  partition: partition
};

function sum(decoder) {
  return Json_Decode$JsonCombinators.flatMap(Json_Decode$JsonCombinators.field("tag", Json_Decode$JsonCombinators.string), (function (tag) {
                var d = decoder(tag);
                if (d.TAG === "Payload") {
                  return Json_Decode$JsonCombinators.field("contents", d._0);
                }
                var d$1 = d._0;
                return Json_Decode$JsonCombinators.custom(function (param) {
                            return d$1;
                          });
              }));
}

function tuple5(decodeA, decodeB, decodeC, decodeD, decodeE) {
  return Json_Decode$JsonCombinators.custom(function (json) {
              if (!Array.isArray(json)) {
                Json_Decode$JsonCombinators.$$Error.expected("array", json);
              }
              if (json.length !== 5) {
                throw {
                      RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                      _1: "Expected array of length 5, got array of length " + String(json.length),
                      Error: new Error()
                    };
              }
              var run = function (decoder, xs, i) {
                var x = xs[i];
                if (x !== undefined) {
                  var x$1 = Json_Decode$JsonCombinators.decode(x, decoder);
                  if (x$1.TAG === "Ok") {
                    return x$1._0;
                  }
                  throw {
                        RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                        _1: x$1._0,
                        Error: new Error()
                      };
                }
                throw {
                      RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                      _1: "Unable to get index " + String(i),
                      Error: new Error()
                    };
              };
              try {
                return [
                        run(decodeA, json, 0),
                        run(decodeB, json, 1),
                        run(decodeC, json, 2),
                        run(decodeD, json, 3),
                        run(decodeE, json, 4)
                      ];
              }
              catch (raw_msg){
                var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
                if (msg.RE_EXN_ID === Json_Decode$JsonCombinators.DecodeError) {
                  throw {
                        RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                        _1: msg._1 + "\n\tin tuple5",
                        Error: new Error()
                      };
                }
                throw msg;
              }
            });
}

function tuple6(decodeA, decodeB, decodeC, decodeD, decodeE, decodeF) {
  return Json_Decode$JsonCombinators.custom(function (json) {
              if (!Array.isArray(json)) {
                Json_Decode$JsonCombinators.$$Error.expected("array", json);
              }
              if (json.length !== 6) {
                throw {
                      RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                      _1: "Expected array of length 6, got array of length " + String(json.length),
                      Error: new Error()
                    };
              }
              var run = function (decoder, xs, i) {
                var x = xs[i];
                if (x !== undefined) {
                  var x$1 = Json_Decode$JsonCombinators.decode(x, decoder);
                  if (x$1.TAG === "Ok") {
                    return x$1._0;
                  }
                  throw {
                        RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                        _1: x$1._0,
                        Error: new Error()
                      };
                }
                throw {
                      RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                      _1: "Unable to get index " + String(i),
                      Error: new Error()
                    };
              };
              try {
                return [
                        run(decodeA, json, 0),
                        run(decodeB, json, 1),
                        run(decodeC, json, 2),
                        run(decodeD, json, 3),
                        run(decodeE, json, 4),
                        run(decodeF, json, 5)
                      ];
              }
              catch (raw_msg){
                var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
                if (msg.RE_EXN_ID === Json_Decode$JsonCombinators.DecodeError) {
                  throw {
                        RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                        _1: msg._1 + "\n\tin tuple6",
                        Error: new Error()
                      };
                }
                throw msg;
              }
            });
}

var Decode = {
  sum: sum,
  tuple5: tuple5,
  tuple6: tuple6
};

function sum$1(f) {
  return function (x) {
    var tag = f(x);
    if (tag.TAG === "Payload") {
      return {
              tag: tag._0,
              contents: tag._1
            };
    } else {
      return {
              tag: tag._0
            };
    }
  };
}

function tuple5$1(encodeA, encodeB, encodeC, encodeD, encodeE, param) {
  return [
          encodeA(param[0]),
          encodeB(param[1]),
          encodeC(param[2]),
          encodeD(param[3]),
          encodeE(param[4])
        ];
}

function tuple6$1(encodeA, encodeB, encodeC, encodeD, encodeE, encodeF, param) {
  return [
          encodeA(param[0]),
          encodeB(param[1]),
          encodeC(param[2]),
          encodeD(param[3]),
          encodeE(param[4]),
          encodeF(param[5])
        ];
}

var Encode = {
  sum: sum$1,
  tuple5: tuple5$1,
  tuple6: tuple6$1
};

function manyIn(elems, elem) {
  return Caml_splice_call.spliceApply(React.createElement, [
              elem,
              {},
              elems
            ]);
}

function manyIn2(elems, elem, props) {
  return Caml_splice_call.spliceApply(React.createElement, [
              elem,
              props,
              elems
            ]);
}

function sepBy$p(item, sep) {
  if (!item) {
    return React.createElement(React.Fragment, {});
  }
  var xs = item.tl;
  var x = item.hd;
  if (xs) {
    return manyIn(Core__List.toArray({
                    hd: x,
                    tl: Core__List.map(xs, (function (i) {
                            return React.createElement(React.Fragment, {}, sep, i);
                          }))
                  }), "span");
  } else {
    return x;
  }
}

function sepBy(sep, xs) {
  return sepBy$p(Core__List.fromArray(xs), sep);
}

function enclosedBy(front, back, item) {
  return React.createElement(React.Fragment, {}, front, " ", item, " ", back);
}

function when_(p, className) {
  if (p) {
    return " " + className;
  } else {
    return "";
  }
}

function showWhen(x) {
  if (x) {
    return "";
  } else {
    return " hidden";
  }
}

var React$1 = {
  manyIn: manyIn,
  manyIn2: manyIn2,
  sepBy$p: sepBy$p,
  sepBy: sepBy,
  enclosedBy: enclosedBy,
  when_: when_,
  showWhen: showWhen
};

function trim(s) {
  return s.replace(/-.*/, "");
}

function compare(a, b) {
  var match = CompareVersions(trim(a), trim(b));
  if (match !== -1) {
    if (match !== 0) {
      return 1;
    } else {
      return 0;
    }
  } else {
    return -1;
  }
}

function gte(a, b) {
  var result = compare(a, b);
  if (Core__Ordering.isGreater(result)) {
    return true;
  } else {
    return Core__Ordering.isEqual(result);
  }
}

var Version = {
  compare: compare,
  gte: gte
};

function array(xs, f) {
  return "[" + (xs.map(f).join(", ") + "]");
}

function list(xs, f) {
  return array(Core__List.toArray(xs), f);
}

function map(xs, f, g) {
  var xs$1 = Array.from(xs.entries()).map(function (param) {
        return f(param[0]) + ": " + g(param[1]);
      });
  return "[" + (xs$1.join(", ") + "]");
}

var Pretty = {
  array: array,
  list: list,
  map: map
};

function toString(e) {
  return ((function(error) {
        // Handle null/undefined
        if (!error) {
          return 'Unknown error (null/undefined)';
        }
        
        // If it's a proper Error object with stack, prefer stack trace
        if (error.stack && typeof error.stack === 'string') {
          return error.stack;
        }
        
        // Build error string from name and message
        let name = error.name || 'Error';
        let message = error.message || '';
        
        if (message) {
          return name + ': ' + message;
        }
        
        // Try toString() method
        if (typeof error.toString === 'function') {
          try {
            let stringified = error.toString();
            if (stringified !== '[object Object]' && stringified !== 'Error') {
              return stringified;
            }
          } catch (_) {
            // toString() failed, continue to next approach
          }
        }
        
        // Handle primitive values that were converted to Error objects
        if (typeof error.valueOf === 'function') {
          try {
            let value = error.valueOf();
            if (value !== error) {
              return String(value);
            }
          } catch (_) {
            // valueOf() failed, continue
          }
        }
        
        // Try to extract meaningful properties for structured errors
        if (typeof error === 'object') {
          try {
            // Common error properties to check
            let parts = [];
            if (error.code) parts.push('Code: ' + error.code);
            if (error.errno) parts.push('Errno: ' + error.errno);
            if (error.syscall) parts.push('Syscall: ' + error.syscall);
            if (error.path) parts.push('Path: ' + error.path);
            if (error.address) parts.push('Address: ' + error.address);
            if (error.port) parts.push('Port: ' + error.port);
            
            if (parts.length > 0) {
              return (name === 'Error' ? 'SystemError' : name) + ': ' + parts.join(', ');
            }
            
            // Last resort: JSON stringify
            return name + ': ' + JSON.stringify(error, null, 2);
          } catch (_) {
            // JSON.stringify failed
            return name + ': [Object (cannot serialize)]';
          }
        }
        
        // Final fallback for primitive values
        return name + ': ' + String(error);
      }))(e);
}

var JsError = {
  toString: toString
};

function pending() {
  var resolve = {
    contents: undefined
  };
  var reject = {
    contents: undefined
  };
  var promise = new Promise((function (res, rej) {
          resolve.contents = res;
          reject.contents = rej;
        }));
  var match = resolve.contents;
  var match$1 = reject.contents;
  if (match !== undefined) {
    if (match$1 !== undefined) {
      return [
              promise,
              match,
              match$1
            ];
    }
    throw {
          RE_EXN_ID: "Failure",
          _1: "Promise is not initialized",
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: "Failure",
        _1: "Promise is not initialized",
        Error: new Error()
      };
}

async function $$catch(f) {
  var result;
  try {
    result = await f();
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    if (e.RE_EXN_ID === Js_exn.$$Error) {
      return {
              TAG: "Error",
              _0: e._1
            };
    }
    throw e;
  }
  return {
          TAG: "Ok",
          _0: result
        };
}

async function $$setTimeout$1(time) {
  var match = pending();
  var id = setTimeout(match[1], time);
  await match[0];
  clearTimeout(id);
}

async function oneByOne$p(xs) {
  if (!xs) {
    return /* [] */0;
  }
  var x$p = await xs.hd();
  var result = await oneByOne$p(xs.tl);
  return {
          hd: x$p,
          tl: result
        };
}

async function oneByOne(xs) {
  var xs$p = await oneByOne$p(Core__List.fromArray(xs));
  return Core__List.toArray(xs$p);
}

var Promise_ = {
  pending: pending,
  $$catch: $$catch,
  $$setTimeout: $$setTimeout$1,
  oneByOne$p: oneByOne$p,
  oneByOne: oneByOne
};

function span(p, xs) {
  if (!xs) {
    return [
            /* [] */0,
            /* [] */0
          ];
  }
  var xs$1 = xs.tl;
  var x = xs.hd;
  if (!p(x)) {
    return [
            /* [] */0,
            xs$1
          ];
  }
  var match = span(p, xs$1);
  return [
          {
            hd: x,
            tl: match[0]
          },
          match[1]
        ];
}

function dropWhile(p, _xs) {
  while(true) {
    var xs = _xs;
    if (!xs) {
      return /* [] */0;
    }
    var xs$1 = xs.tl;
    var x = xs.hd;
    if (!p(x)) {
      return {
              hd: x,
              tl: xs$1
            };
    }
    _xs = xs$1;
    continue ;
  };
}

var List = {
  span: span,
  dropWhile: dropWhile
};

function lines(s) {
  return Core__Array.filterMap(s.split(/\r\n|\n/g), (function (x) {
                return x;
              }));
}

function unlines(xs) {
  return xs.join("\n");
}

var $$String$1 = {
  lines: lines,
  unlines: unlines
};

function includes(xs, x) {
  return Core__Array.reduce(xs, false, (function (acc, y) {
                if (acc) {
                  return true;
                } else {
                  return Caml_obj.equal(x, y);
                }
              }));
}

var $$Array = {
  includes: includes
};

var React$p;

exports.Disposable = Disposable;
exports.Result = Result;
exports.Decode = Decode;
exports.Encode = Encode;
exports.React$p = React$p;
exports.React = React$1;
exports.Version = Version;
exports.Pretty = Pretty;
exports.JsError = JsError;
exports.Promise_ = Promise_;
exports.List = List;
exports.$$String = $$String$1;
exports.$$Array = $$Array;
/* react Not a pure module */
