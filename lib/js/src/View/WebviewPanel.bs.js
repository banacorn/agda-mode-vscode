// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Path = require("path");
var Curry = require("rescript/lib/js/curry.js");
var VSCode = require("rescript-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var Js_math = require("rescript/lib/js/js_math.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var View$AgdaModeVscode = require("./View.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");

function makeHTML(webview, extensionPath) {
  var extensionUri = Vscode.Uri.file(extensionPath);
  var text = "";
  var charaterSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  var cardinality = charaterSet.length;
  for(var _for = 0; _for <= 32; ++_for){
    text = text + charaterSet.charAt(Js_math.floor(Math.random() * cardinality));
  }
  var nonce = text;
  var scriptUri = webview.asWebviewUri(Vscode.Uri.joinPath(extensionUri, "dist", "bundled-view.js")).toString();
  var cspSourceUri = webview.cspSource;
  var styleUri = webview.asWebviewUri(Vscode.Uri.joinPath(extensionUri, "dist", "style.css")).toString();
  var codiconsUri = webview.asWebviewUri(Vscode.Uri.joinPath(extensionUri, "dist", "codicon/codicon.css")).toString();
  var scriptSrc = "script-src 'nonce-" + nonce + "'; ";
  var styleSrc = "style-src " + cspSourceUri + "; ";
  var fontSrc = "font-src " + cspSourceUri + "; ";
  var scp = "default-src 'none'; " + fontSrc + scriptSrc + styleSrc;
  return "\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\">\n        <meta name=\"theme-color\" content=\"#000000\">\n\n        <!--\n					Use a content security policy to only allow loading images from https or from our extension directory,\n					and only allow scripts that have a specific nonce.\n				-->\n        <meta http-equiv=\"Content-Security-Policy\" content=\"" + scp + "\">\n\n        <title>React App</title>\n        <link href=\"" + styleUri + "\"    rel=\"stylesheet\" type=\"text/css\" >\n        <link href=\"" + codiconsUri + "\" rel=\"stylesheet\" />\n      </head>\n      <body>\n        <noscript>You need to enable JavaScript to run this app.</noscript>\n        <div id=\"root\"></div>\n        <script nonce=\"" + nonce + "\" src=\"" + scriptUri + "\"></script>\n      </body>\n      </html>\n    ";
}

function make(title, extensionPath) {
  var distPath = Path.join(extensionPath, "dist");
  var panel = Vscode.window.createWebviewPanel("panel", title, {
        preserveFocus: true,
        viewColumn: 8
      }, VSCode.WebviewAndWebviewPanelOptions.make(undefined, true, [Vscode.Uri.file(distPath)], undefined, undefined, true, undefined));
  var html = makeHTML(panel.webview, extensionPath);
  panel.webview.html = html;
  return panel;
}

function destroy(prim) {
  prim.dispose();
  
}

function send(panel, message) {
  return panel.webview.postMessage(message);
}

function recv(panel, callback) {
  return panel.webview.onDidReceiveMessage(callback);
}

function onDestroyed(panel, callback) {
  return panel.onDidDispose(callback);
}

function reveal(panel) {
  return VSCode.WebviewPanel.reveal(panel, undefined, true, undefined);
}

var WebviewPanel = {
  make: make,
  destroy: destroy,
  send: send,
  recv: recv,
  onDestroyed: onDestroyed,
  reveal: reveal
};

function send$1(view, requestOrEvent) {
  var match = view.status;
  if (match) {
    if (requestOrEvent.TAG === /* Request */0) {
      var match$1 = $$Promise.pending(undefined);
      var resolve = match$1[1];
      match._0.push([
            requestOrEvent._0,
            (function (x) {
                if (x.TAG === /* Response */0) {
                  return Curry._1(resolve, x._0);
                } else {
                  return Curry._1(resolve, undefined);
                }
              })
          ]);
      return match$1[0];
    }
    match._1.push(requestOrEvent._0);
    return $$Promise.resolved(undefined);
  }
  var stringified = JSON.stringify(View$AgdaModeVscode.RequestOrEventToView.encode(requestOrEvent));
  if (requestOrEvent.TAG !== /* Request */0) {
    return $$Promise.map(view.panel.webview.postMessage(stringified), (function (param) {
                  
                }));
  }
  var promise = Chan$AgdaModeVscode.once(view.onResponse);
  return $$Promise.map($$Promise.flatMap(view.panel.webview.postMessage(stringified), (function (param) {
                    return promise;
                  })), (function (res) {
                return res;
              }));
}

function sendEvent(view, $$event) {
  return $$Promise.map(send$1(view, {
                  TAG: 1,
                  _0: $$event,
                  [Symbol.for("name")]: "Event"
                }), (function (param) {
                
              }));
}

function sendRequest(view, request, callback) {
  return $$Promise.flatMap(send$1(view, {
                  TAG: 0,
                  _0: request,
                  [Symbol.for("name")]: "Request"
                }), (function (x) {
                if (x !== undefined) {
                  return Curry._1(callback, x);
                } else {
                  return $$Promise.resolved(undefined);
                }
              }));
}

function onEvent(view, callback) {
  return new Vscode.Disposable(Chan$AgdaModeVscode.on(view.onEvent, callback));
}

function make$1(title, extensionPath) {
  $$Promise.get(Vscode.commands.executeCommand("vscode.getEditorLayout"), (function (layout) {
          var mountingPosition = Config$AgdaModeVscode.View.getPanelMountingPosition(undefined);
          var orientation = layout.orientation;
          var groups = layout.groups;
          var match_0 = groups.length;
          Vscode.commands.executeCommand((function () {
                    switch (({
                          NAME: "setEditorLayout",
                          VAL: {
                            orientation: match_0 !== 1 ? (
                                orientation !== 0 ? 0 : 1
                              ) : (
                                mountingPosition ? 0 : 1
                              ),
                            groups: [
                              Curry._1(VSCode.Commands.Layout.sized, {
                                    groups: groups,
                                    size: 0.6
                                  }),
                              Curry._1(VSCode.Commands.Layout.sized, {
                                    groups: [VSCode.Commands.Layout.simple],
                                    size: 0.4
                                  })
                            ]
                          }
                        }).NAME) {
                      case "setEditorLayout" :
                          return "vscode.setEditorLayout";
                      case "setContext" :
                          return "setContext";
                      
                    }
                  })(), ({
                  NAME: "setEditorLayout",
                  VAL: {
                    orientation: match_0 !== 1 ? (
                        orientation !== 0 ? 0 : 1
                      ) : (
                        mountingPosition ? 0 : 1
                      ),
                    groups: [
                      Curry._1(VSCode.Commands.Layout.sized, {
                            groups: groups,
                            size: 0.6
                          }),
                      Curry._1(VSCode.Commands.Layout.sized, {
                            groups: [VSCode.Commands.Layout.simple],
                            size: 0.4
                          })
                    ]
                  }
                }).VAL);
          
        }));
  var view = {
    panel: make(title, extensionPath),
    onResponse: Chan$AgdaModeVscode.make(undefined),
    onEvent: Chan$AgdaModeVscode.make(undefined),
    subscriptions: [],
    status: {
      _0: [],
      _1: [],
      [Symbol.for("name")]: "Uninitialized"
    }
  };
  view.subscriptions.push(view.panel.webview.onDidReceiveMessage(function (json) {
            var res;
            try {
              res = Curry._1(View$AgdaModeVscode.ResponseOrEventFromView.decode, json);
            }
            catch (raw_e){
              var e = Caml_js_exceptions.internalToOCamlException(raw_e);
              console.log("[ panic ][ Webview.onDidReceiveMessage JSON decode error ]", e);
              return ;
            }
            if (res.TAG === /* Response */0) {
              return Chan$AgdaModeVscode.emit(view.onResponse, res._0);
            } else {
              return Chan$AgdaModeVscode.emit(view.onEvent, res._0);
            }
          }));
  view.subscriptions.push(view.panel.onDidDispose(function (param) {
            return Chan$AgdaModeVscode.emit(view.onEvent, /* Destroyed */1);
          }));
  view.subscriptions.push(new Vscode.Disposable(Chan$AgdaModeVscode.on(view.onEvent, (function (x) {
                  if (x !== 0) {
                    return ;
                  }
                  var match = view.status;
                  if (match) {
                    view.status = /* Initialized */0;
                    Belt_Array.forEach(match._0, (function (param) {
                            var resolve = param[1];
                            return $$Promise.get(send$1(view, {
                                            TAG: 0,
                                            _0: param[0],
                                            [Symbol.for("name")]: "Request"
                                          }), (function (x) {
                                          if (x !== undefined) {
                                            return Curry._1(resolve, {
                                                        TAG: 0,
                                                        _0: x,
                                                        [Symbol.for("name")]: "Response"
                                                      });
                                          }
                                          
                                        }));
                          }));
                    return Belt_Array.forEach(match._1, (function ($$event) {
                                  send$1(view, {
                                        TAG: 1,
                                        _0: $$event,
                                        [Symbol.for("name")]: "Event"
                                      });
                                  
                                }));
                  }
                  
                }))));
  return view;
}

function destroy$1(view) {
  Chan$AgdaModeVscode.destroy(view.onResponse);
  Chan$AgdaModeVscode.destroy(view.onEvent);
  view.panel.dispose();
  return Belt_Array.forEach(view.subscriptions, (function (prim) {
                return prim.dispose();
              }));
}

function onceDestroyed(view) {
  var match = $$Promise.pending(undefined);
  var resolve = match[1];
  var disposable = Chan$AgdaModeVscode.on(view.onEvent, (function (response) {
          if (typeof response === "number" && response !== 0) {
            return Curry._1(resolve, undefined);
          }
          
        }));
  return $$Promise.tap(match[0], disposable);
}

function reveal$1(view) {
  return reveal(view.panel);
}

var Module = {
  make: make$1,
  destroy: destroy$1,
  sendEvent: sendEvent,
  sendRequest: sendRequest,
  onEvent: onEvent,
  onceDestroyed: onceDestroyed,
  reveal: reveal$1
};

exports.WebviewPanel = WebviewPanel;
exports.Module = Module;
exports.make = make$1;
exports.destroy = destroy$1;
exports.sendEvent = sendEvent;
exports.sendRequest = sendRequest;
exports.onEvent = onEvent;
exports.onceDestroyed = onceDestroyed;
exports.reveal = reveal$1;
/* path Not a pure module */
