// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var VSCode = require("rescript-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var Js_array = require("rescript/lib/js/js_array.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var View$AgdaModeVscode = require("./View.bs.js");
var Json$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");

var scriptFile = "bundled-view.js";

var styleFile = "style.css";

var codiconsFile = "codicon/codicon.css";

var distDir = "dist";

function detect(extensionUri, cspSourceUri) {
  extensionUri.path.includes("github.dev");
  extensionUri.path.includes("vscode-cdn");
  cspSourceUri.includes("vscode-unpkg.net") || cspSourceUri.includes("github.dev");
  return "Desktop";
}

function extractCdnBaseUrl(cspSourceUri, extensionUri) {
  var cspParts = cspSourceUri.split(" ");
  var rawCdnUrl = Core__Option.getOr(cspParts[0], "");
  var normalizedUrl = rawCdnUrl.endsWith("/") ? rawCdnUrl : rawCdnUrl + "/";
  if (normalizedUrl.length > 10 && normalizedUrl.includes("https://")) {
    return normalizedUrl;
  } else {
    return "https://banacorn.vscode-unpkg.net" + extensionUri.path + "/";
  }
}

function getResourceUrls(env, extensionUri, cspSourceUri) {
  var baseUrl;
  baseUrl = env === "Desktop" ? undefined : extractCdnBaseUrl(cspSourceUri, extensionUri) + distDir + "/";
  if (baseUrl !== undefined) {
    return [
            baseUrl + scriptFile,
            baseUrl + styleFile,
            baseUrl + codiconsFile
          ];
  }
  
}

function getCspRules(env, nonce, cspSourceUri) {
  if (env === "Desktop") {
    return [
            "script-src 'nonce-" + nonce + "'; ",
            "style-src " + cspSourceUri + "; ",
            "font-src " + cspSourceUri + "; "
          ];
  }
  var webDomains = "https://*.github.dev https://*.vscode-cdn.net https://*.vscode-unpkg.net";
  return [
          "script-src 'nonce-" + nonce + "' " + webDomains + "; ",
          "style-src " + cspSourceUri + " " + webDomains + "; ",
          "font-src " + cspSourceUri + " " + webDomains + "; "
        ];
}

function makeHTML(webview, extensionUri) {
  var generateSecurityNonce = function () {
    var text = "";
    var charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    var charsetLength = charset.length;
    for(var _for = 0; _for <= 32; ++_for){
      var randomIndex = Math.floor(Math.random() * charsetLength) | 0;
      text = text + charset.charAt(randomIndex);
    }
    return text;
  };
  var nonce = generateSecurityNonce();
  var cspSourceUri = webview.cspSource;
  var environment = detect(extensionUri, cspSourceUri);
  var match = getResourceUrls(environment, extensionUri, cspSourceUri);
  var match$1;
  if (match !== undefined) {
    match$1 = [
      match[0],
      match[1],
      match[2]
    ];
  } else {
    var scriptPath = Vscode.Uri.joinPath(extensionUri, distDir, scriptFile);
    var stylePath = Vscode.Uri.joinPath(extensionUri, distDir, styleFile);
    var codiconsPath = Vscode.Uri.joinPath(extensionUri, distDir, codiconsFile);
    var scriptUri = webview.asWebviewUri(scriptPath).toString();
    var styleUri = webview.asWebviewUri(stylePath).toString();
    var codiconsUri = webview.asWebviewUri(codiconsPath).toString();
    match$1 = [
      scriptUri,
      styleUri,
      codiconsUri
    ];
  }
  var generateContentSecurityPolicy = function () {
    var match = getCspRules(environment, nonce, cspSourceUri);
    return "default-src 'none'; " + match[2] + match[0] + match[1];
  };
  var csp = generateContentSecurityPolicy();
  return "\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\">\n        <meta name=\"theme-color\" content=\"#000000\">\n\n        <!-- Content Security Policy: Environment-specific rules for secure resource loading -->\n        <meta http-equiv=\"Content-Security-Policy\" content=\"" + csp + "\">\n\n        <title>Agda Mode</title>\n        <link href=\"" + match$1[1] + "\" rel=\"stylesheet\" type=\"text/css\">\n        <link href=\"" + match$1[2] + "\" rel=\"stylesheet\">\n      </head>\n      <body>\n        <noscript>You need to enable JavaScript to run this app.</noscript>\n        <div id=\"root\"></div>\n        <script nonce=\"" + nonce + "\" src=\"" + match$1[0] + "\"></script>\n      </body>\n      </html>\n    ";
}

function make(title, extensionUri) {
  var distPath = Vscode.Uri.joinPath(extensionUri, distDir).fsPath;
  var distUri = Vscode.Uri.file(distPath);
  var webviewOptions = VSCode.WebviewAndWebviewPanelOptions.make(undefined, true, [distUri], undefined, undefined, true, undefined);
  var panel = Vscode.window.createWebviewPanel("panel", title, {
        preserveFocus: true,
        viewColumn: 3
      }, webviewOptions);
  var html = makeHTML(panel.webview, extensionUri);
  panel.webview.html = html;
  return panel;
}

function destroy(prim) {
  return prim.dispose();
}

function send(panel, message) {
  return panel.webview.postMessage(message);
}

function recv(panel, callback) {
  return panel.webview.onDidReceiveMessage(callback);
}

function onDestroyed(panel, callback) {
  return panel.onDidDispose(callback);
}

function reveal(panel) {
  panel.reveal(undefined, true);
}

function moveToBottom() {
  Vscode.commands.executeCommand((function () {
            switch (({
                  NAME: "setEditorLayout",
                  VAL: {
          orientation: 1,
          groups: [{ size: 0.7 }, { size: 0.3 }]
        }
                }).NAME) {
              case "setEditorLayout" :
                  return "vscode.setEditorLayout";
              case "setContext" :
                  return "setContext";
              
            }
          })(), ({
          NAME: "setEditorLayout",
          VAL: {
          orientation: 1,
          groups: [{ size: 0.7 }, { size: 0.3 }]
        }
        }).VAL);
}

function moveToRight() {
  Vscode.commands.executeCommand((function () {
            switch (({
                  NAME: "setEditorLayout",
                  VAL: {
          orientation: 0,
          groups: [ {size: 0.5}, {size: 0.5} ]
        }
                }).NAME) {
              case "setEditorLayout" :
                  return "vscode.setEditorLayout";
              case "setContext" :
                  return "setContext";
              
            }
          })(), ({
          NAME: "setEditorLayout",
          VAL: {
          orientation: 0,
          groups: [ {size: 0.5}, {size: 0.5} ]
        }
        }).VAL);
}

async function getEditorLayout() {
  return await Vscode.commands.executeCommand("vscode.getEditorLayout");
}

var WebviewPanel = {
  make: make,
  destroy: destroy,
  send: send,
  recv: recv,
  onDestroyed: onDestroyed,
  reveal: reveal,
  getEditorLayout: getEditorLayout,
  moveToBottom: moveToBottom,
  moveToRight: moveToRight
};

async function send$1(view, requestOrEvent) {
  var match = view.status;
  if (typeof match !== "object") {
    var stringified = JSON.stringify(View$AgdaModeVscode.RequestOrEventToView.encode(requestOrEvent));
    if (requestOrEvent.TAG === "Request") {
      var promise = Chan$AgdaModeVscode.once(view.onResponse);
      await view.panel.webview.postMessage(stringified);
      return await promise;
    }
    await view.panel.webview.postMessage(stringified);
    return ;
  }
  var queuedRequests = match._0;
  if (requestOrEvent.TAG === "Request") {
    var req = requestOrEvent._0;
    return await new Promise((function (resolve, param) {
                  queuedRequests.push([
                        req,
                        (function (x) {
                            if (x.TAG === "Response") {
                              return resolve(x._0);
                            } else {
                              return resolve(undefined);
                            }
                          })
                      ]);
                }));
  }
  match._1.push(requestOrEvent._0);
}

async function sendEvent(view, $$event) {
  await send$1(view, {
        TAG: "Event",
        _0: $$event
      });
}

async function sendRequest(view, request, callback) {
  var response = await send$1(view, {
        TAG: "Request",
        _0: request
      });
  if (response !== undefined) {
    return await callback(response);
  }
  
}

function onEvent(view, callback) {
  return new Vscode.Disposable(Chan$AgdaModeVscode.on(view.onEvent, callback));
}

function make$1(title, extensionUri) {
  var view = {
    panel: make(title, extensionUri),
    onResponse: Chan$AgdaModeVscode.make(),
    onEvent: Chan$AgdaModeVscode.make(),
    subscriptions: [],
    status: {
      TAG: "Uninitialized",
      _0: [],
      _1: []
    }
  };
  var match = Config$AgdaModeVscode.View.getPanelMountingPosition();
  if (match === "Bottom") {
    moveToBottom();
  } else {
    moveToRight();
  }
  Js_array.push(view.panel.webview.onDidReceiveMessage(function (json) {
            var e = Json$JsonCombinators.decode(json, View$AgdaModeVscode.ResponseOrEventFromView.decode);
            if (e.TAG === "Ok") {
              var res = e._0;
              if (res.TAG === "Response") {
                return Chan$AgdaModeVscode.emit(view.onResponse, res._0);
              } else {
                return Chan$AgdaModeVscode.emit(view.onEvent, res._0);
              }
            }
            console.log("[ panic ][ Webview.onDidReceiveMessage JSON decode error ]", e._0);
          }), view.subscriptions);
  Js_array.push(view.panel.onDidDispose(function () {
            Chan$AgdaModeVscode.emit(view.onEvent, "Destroyed");
          }), view.subscriptions);
  Js_array.push(new Vscode.Disposable(Chan$AgdaModeVscode.on(view.onEvent, (function (x) {
                  if (typeof x === "object") {
                    return ;
                  }
                  if (x !== "Initialized") {
                    return ;
                  }
                  var match = view.status;
                  if (typeof match !== "object") {
                    return ;
                  }
                  view.status = "Initialized";
                  match._0.forEach(function (param) {
                        var resolve = param[1];
                        send$1(view, {
                                TAG: "Request",
                                _0: param[0]
                              }).then(function (x) {
                              if (x !== undefined) {
                                return resolve({
                                            TAG: "Response",
                                            _0: x
                                          });
                              }
                              
                            });
                      });
                  match._1.forEach(function ($$event) {
                        send$1(view, {
                              TAG: "Event",
                              _0: $$event
                            });
                      });
                }))), view.subscriptions);
  return view;
}

function destroy$1(view) {
  Chan$AgdaModeVscode.destroy(view.onResponse);
  Chan$AgdaModeVscode.destroy(view.onEvent);
  view.panel.dispose();
  view.subscriptions.forEach(function (prim) {
        return prim.dispose();
      });
}

function onceDestroyed(view) {
  var match = Util$AgdaModeVscode.Promise_.pending();
  var resolve = match[1];
  var disposable = Chan$AgdaModeVscode.on(view.onEvent, (function (response) {
          if (typeof response !== "object" && response === "Destroyed") {
            return resolve();
          }
          
        }));
  return match[0].then(disposable);
}

function reveal$1(view) {
  reveal(view.panel);
}

var Module = {
  make: make$1,
  destroy: destroy$1,
  sendEvent: sendEvent,
  sendRequest: sendRequest,
  onEvent: onEvent,
  onceDestroyed: onceDestroyed,
  reveal: reveal$1
};

exports.WebviewPanel = WebviewPanel;
exports.Module = Module;
exports.make = make$1;
exports.destroy = destroy$1;
exports.sendEvent = sendEvent;
exports.sendRequest = sendRequest;
exports.onEvent = onEvent;
exports.onceDestroyed = onceDestroyed;
exports.reveal = reveal$1;
/* vscode Not a pure module */
