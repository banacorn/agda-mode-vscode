// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Body$AgdaModeVscode = require("./Body.bs.js");
var Chan$AgdaModeVscode = require("../../Util/Chan.bs.js");
var Hook$AgdaModeVscode = require("../Hook.bs.js");
var Link$AgdaModeVscode = require("../Component/Link.bs.js");
var View$AgdaModeVscode = require("../View.bs.js");
var Header$AgdaModeVscode = require("./Header.bs.js");
var Prompt$AgdaModeVscode = require("./Prompt.bs.js");
var Keyboard$AgdaModeVscode = require("./Keyboard.bs.js");

function Panel(props) {
  var onEventFromView = props.onEventFromView;
  var match = React.useState(function () {
        return {
                TAG: "Plain",
                _0: "Loading ..."
              };
      });
  var setHeader = match[1];
  var match$1 = React.useState(function () {
        return "";
      });
  var setConnectionStatus = match$1[1];
  var match$2 = React.useState(function () {
        return [];
      });
  var setBody = match$2[1];
  var savedHeaderAndBody = React.useRef(undefined);
  var saveHeaderAndBody = function (header, body) {
    savedHeaderAndBody.current = [
      header,
      body
    ];
  };
  var restoreHeaderAndBody = function () {
    Core__Option.forEach(savedHeaderAndBody.current, (function (param) {
            var body = param[1];
            var header = param[0];
            setHeader(function (param) {
                  return header;
                });
            setBody(function (param) {
                  return body;
                });
          }));
  };
  var match$3 = React.useState(function () {
        
      });
  var setPrompt = match$3[1];
  var prompt = match$3[0];
  var prompting = Core__Option.isSome(prompt);
  var match$4 = React.useReducer(Keyboard$AgdaModeVscode.reducer, undefined);
  var runInputMethodAction = match$4[1];
  var inputMethodState = match$4[0];
  var setFontSize = (function (n) { document.documentElement.style.setProperty("--agdaMode-buffer-font-size", n + "px"); });
  React.useEffect((function () {
          Chan$AgdaModeVscode.emit(onEventFromView, "Initialized");
        }), []);
  var promptResponseResolver = React.useRef(undefined);
  var onSubmit = function (result) {
    Core__Option.forEach(promptResponseResolver.current, (function (resolve) {
            setPrompt(function (param) {
                  
                });
            resolve(result);
            promptResponseResolver.current = undefined;
          }));
  };
  var onUpdatePromptIM = function (action) {
    Chan$AgdaModeVscode.emit(onEventFromView, {
          TAG: "PromptIMUpdate",
          _0: action
        });
  };
  Hook$AgdaModeVscode.recv(props.onRequest, props.onResponse, (async function (msg) {
          var match = msg._1;
          var value = match.value;
          var placeholder = match.placeholder;
          var body = match.body;
          var header$p = msg._0;
          setHeader(function (param) {
                return header$p;
              });
          setBody(function (param) {
                return [];
              });
          setPrompt(function (previous) {
                if (previous === undefined) {
                  return [
                          body,
                          placeholder,
                          value
                        ];
                }
                var oldValue = previous[2];
                if (oldValue !== undefined) {
                  return [
                          body,
                          placeholder,
                          oldValue
                        ];
                } else {
                  return [
                          body,
                          placeholder,
                          value
                        ];
                }
              });
          var promise = new Promise((function (resolve, param) {
                  promptResponseResolver.current = resolve;
                }));
          var result = await promise;
          if (result !== undefined) {
            return {
                    TAG: "PromptSuccess",
                    _0: result
                  };
          } else {
            return "PromptInterrupted";
          }
        }));
  Hook$AgdaModeVscode.on(props.onEventToView, (function ($$event) {
          if (typeof $$event !== "object") {
            onSubmit(undefined);
            setPrompt(function (param) {
                  
                });
            return restoreHeaderAndBody();
          }
          switch ($$event.TAG) {
            case "Display" :
                var body = $$event._1;
                var header = $$event._0;
                onSubmit(undefined);
                saveHeaderAndBody(header, body);
                setHeader(function (param) {
                      return header;
                    });
                return setBody(function (param) {
                            return body;
                          });
            case "Append" :
                var body$1 = $$event._1;
                var header$1 = $$event._0;
                onSubmit(undefined);
                saveHeaderAndBody(header$1, body$1);
                setHeader(function (param) {
                      return header$1;
                    });
                return setBody(function (old) {
                            return old.concat(body$1);
                          });
            case "SetConnectionStatus" :
                var text = $$event._0;
                return setConnectionStatus(function (param) {
                            return text;
                          });
            case "PromptIMUpdate" :
                var text$1 = $$event._0;
                return setPrompt(function (x) {
                            if (x !== undefined) {
                              return [
                                      x[0],
                                      x[1],
                                      text$1
                                    ];
                            }
                            
                          });
            case "InputMethod" :
                return runInputMethodAction($$event._0);
            case "ConfigurationChange" :
                onSubmit(undefined);
                return setFontSize($$event._0);
            
          }
        }));
  var onLinkEvent = Chan$AgdaModeVscode.make();
  Chan$AgdaModeVscode.on(onLinkEvent, (function ($$event) {
          switch ($$event.TAG) {
            case "JumpToTarget" :
                return Chan$AgdaModeVscode.emit(onEventFromView, {
                            TAG: "JumpToTarget",
                            _0: $$event._0
                          });
            case "MouseOver" :
            case "MouseOut" :
                return ;
            
          }
        }));
  return React.createElement(Link$AgdaModeVscode.$$Event.Provider.make, {
              value: onLinkEvent,
              children: React.createElement(View$AgdaModeVscode.EventFromView.Provider.make, {
                    value: onEventFromView,
                    children: React.createElement("section", {
                          className: "agda-mode native-key-bindings",
                          tabIndex: -1
                        }, React.createElement("div", {
                              className: "agda-mode-header-container"
                            }, React.createElement(Header$AgdaModeVscode.make, {
                                  header: match[0],
                                  connectionStatus: match$1[0]
                                }), React.createElement(Prompt$AgdaModeVscode.make, {
                                  inputMethodActivated: Core__Option.isSome(inputMethodState),
                                  prompt: prompt,
                                  onSubmit: onSubmit,
                                  onUpdatePromptIM: onUpdatePromptIM
                                }), React.createElement(Keyboard$AgdaModeVscode.make, {
                                  state: inputMethodState,
                                  onInsertChar: (function ($$char) {
                                      Chan$AgdaModeVscode.emit(onEventFromView, {
                                            TAG: "InputMethod",
                                            _0: {
                                              TAG: "InsertChar",
                                              _0: $$char
                                            }
                                          });
                                    }),
                                  onChooseSymbol: (function (symbol) {
                                      Chan$AgdaModeVscode.emit(onEventFromView, {
                                            TAG: "InputMethod",
                                            _0: {
                                              TAG: "ChooseSymbol",
                                              _0: symbol
                                            }
                                          });
                                    }),
                                  prompting: prompting
                                })), React.createElement(Body$AgdaModeVscode.make, {
                              items: match$2[0]
                            }))
                  })
            });
}

var make = Panel;

exports.make = make;
/* react Not a pure module */
