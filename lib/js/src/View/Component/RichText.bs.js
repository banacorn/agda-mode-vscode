// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Caml_splice_call = require("rescript/lib/js/caml_splice_call.js");
var JsxPPXReactSupportU = require("rescript/lib/js/jsxPPXReactSupportU.js");
var Link$AgdaModeVscode = require("./Link.bs.js");
var Util$AgdaModeVscode = require("../../Util/Util.bs.js");
var Common$AgdaModeVscode = require("../Common.bs.js");
var Json_Decode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Decode.bs.js");
var Json_Encode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Encode.bs.js");

function RichText$Parens(props) {
  var match = React.useState(function () {
        return false;
      });
  var setActivated = match[1];
  var match$1 = React.useState(function () {
        return false;
      });
  var setContracted = match$1[1];
  var className = match[0] ? "component-parentheses activated" : "component-parentheses";
  var onMouseOver = function (param) {
    setActivated(function (param) {
          return true;
        });
  };
  var onMouseOut = function (param) {
    setActivated(function (param) {
          return false;
        });
  };
  var onClick = function (param) {
    setContracted(function (x) {
          return !x;
        });
  };
  return React.createElement(React.Fragment, {}, React.createElement("span", {
                  className: className,
                  onClick: onClick,
                  onMouseOut: onMouseOut,
                  onMouseOver: onMouseOver
                }, "("), match$1[0] ? ".." : props.children, React.createElement("span", {
                  className: className,
                  onClick: onClick,
                  onMouseOut: onMouseOut,
                  onMouseOver: onMouseOver
                }, ")"));
}

var Parens = {
  make: RichText$Parens
};

function RichText$Parens2(props) {
  var match = React.useState(function () {
        return false;
      });
  var setActivated = match[1];
  var activated = match[0];
  var match$1 = React.useState(function () {
        return false;
      });
  var setContracted = match$1[1];
  var onMouseOver = function (param) {
    setActivated(function (param) {
          return true;
        });
  };
  var onMouseOut = function (param) {
    setActivated(function (param) {
          return false;
        });
  };
  var onClick = function (param) {
    setContracted(function (x) {
          return !x;
        });
  };
  var openParenClassName = "component-horz-item component-parentheses" + (
    activated ? " activated" : ""
  );
  var openParen = React.createElement("span", {
        className: openParenClassName,
        onClick: onClick,
        onMouseOut: onMouseOut,
        onMouseOver: onMouseOver
      }, "(");
  var closeParenClassName = "component-horz-item component-parentheses compact" + (
    activated ? " activated" : ""
  );
  var closeParen = React.createElement("span", {
        className: closeParenClassName,
        onClick: onClick,
        onMouseOut: onMouseOut,
        onMouseOver: onMouseOver
      }, ")");
  if (match$1[0]) {
    return React.createElement("span", {
                className: "component-horz"
              }, React.createElement("span", {
                    className: openParenClassName,
                    onClick: onClick,
                    onMouseOut: onMouseOut,
                    onMouseOver: onMouseOver
                  }, "(..)"));
  }
  var children = [
      [openParen],
      props.payload,
      [closeParen]
    ].flat();
  return React.createElement("span", {
              className: "component-horz"
            }, children);
}

var Parens2 = {
  make: RichText$Parens2
};

var decode = Json_Decode$JsonCombinators.array(Json_Decode$JsonCombinators.string);

var encode = Json_Encode$JsonCombinators.array(function (prim) {
      return prim;
    });

var ClassNames = {
  decode: decode,
  encode: encode
};

function decodeRec() {
  return Util$AgdaModeVscode.Decode.sum(function (x) {
              switch (x) {
                case "Hole" :
                    return {
                            TAG: "Payload",
                            _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.$$int, (function (s) {
                                    return {
                                            TAG: "Hole",
                                            _0: s
                                          };
                                  }))
                          };
                case "Horz" :
                    return {
                            TAG: "Payload",
                            _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.array(Json_Decode$JsonCombinators.array(decodeRec())), (function (xs) {
                                    return {
                                            TAG: "Horz",
                                            _0: xs
                                          };
                                  }))
                          };
                case "Icon" :
                    return {
                            TAG: "Payload",
                            _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.pair(Json_Decode$JsonCombinators.string, decode), (function (param) {
                                    return {
                                            TAG: "Icon",
                                            _0: param[0],
                                            _1: param[1]
                                          };
                                  }))
                          };
                case "Link" :
                    return {
                            TAG: "Payload",
                            _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.tuple3(Common$AgdaModeVscode.AgdaRange.decode, Json_Decode$JsonCombinators.array(decodeRec()), decode), (function (param) {
                                    return {
                                            TAG: "Link",
                                            _0: param[0],
                                            _1: param[1],
                                            _2: param[2]
                                          };
                                  }))
                          };
                case "Parn" :
                    return {
                            TAG: "Payload",
                            _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.array(decodeRec()), (function (x) {
                                    return {
                                            TAG: "Parn",
                                            _0: x
                                          };
                                  }))
                          };
                case "PrHz" :
                    return {
                            TAG: "Payload",
                            _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.array(Json_Decode$JsonCombinators.array(decodeRec())), (function (xs) {
                                    return {
                                            TAG: "PrHz",
                                            _0: xs
                                          };
                                  }))
                          };
                case "Text" :
                    return {
                            TAG: "Payload",
                            _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.pair(Json_Decode$JsonCombinators.string, decode), (function (param) {
                                    return {
                                            TAG: "Text",
                                            _0: param[0],
                                            _1: param[1]
                                          };
                                  }))
                          };
                case "Vert" :
                    return {
                            TAG: "Payload",
                            _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.array(Json_Decode$JsonCombinators.array(decodeRec())), (function (xs) {
                                    return {
                                            TAG: "Vert",
                                            _0: xs
                                          };
                                  }))
                          };
                default:
                  throw {
                        RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                        _1: "[RichText.Inline] Unknown constructor: " + x,
                        Error: new Error()
                      };
              }
            });
}

var decode$1 = decodeRec();

function encodeRec() {
  return Util$AgdaModeVscode.Encode.sum(function (x) {
              switch (x.TAG) {
                case "Icon" :
                    return {
                            TAG: "Payload",
                            _0: "Icon",
                            _1: Json_Encode$JsonCombinators.pair((function (prim) {
                                      return prim;
                                    }), encode)([
                                  x._0,
                                  x._1
                                ])
                          };
                case "Text" :
                    return {
                            TAG: "Payload",
                            _0: "Text",
                            _1: Json_Encode$JsonCombinators.pair((function (prim) {
                                      return prim;
                                    }), encode)([
                                  x._0,
                                  x._1
                                ])
                          };
                case "Link" :
                    return {
                            TAG: "Payload",
                            _0: "Link",
                            _1: Json_Encode$JsonCombinators.tuple3(Common$AgdaModeVscode.AgdaRange.encode, Json_Encode$JsonCombinators.array(encodeRec()), encode)([
                                  x._0,
                                  x._1,
                                  x._2
                                ])
                          };
                case "Hole" :
                    return {
                            TAG: "Payload",
                            _0: "Hole",
                            _1: x._0
                          };
                case "Horz" :
                    return {
                            TAG: "Payload",
                            _0: "Horz",
                            _1: Json_Encode$JsonCombinators.array(Json_Encode$JsonCombinators.array(encodeRec()))(x._0)
                          };
                case "Vert" :
                    return {
                            TAG: "Payload",
                            _0: "Vert",
                            _1: Json_Encode$JsonCombinators.array(Json_Encode$JsonCombinators.array(encodeRec()))(x._0)
                          };
                case "Parn" :
                    return {
                            TAG: "Payload",
                            _0: "Parn",
                            _1: Json_Encode$JsonCombinators.array(encodeRec())(x._0)
                          };
                case "PrHz" :
                    return {
                            TAG: "Payload",
                            _0: "PrHz",
                            _1: Json_Encode$JsonCombinators.array(Json_Encode$JsonCombinators.array(encodeRec()))(x._0)
                          };
                
              }
            });
}

var encode$1 = encodeRec();

var Inline = {
  decodeRec: decodeRec,
  decode: decode$1,
  encodeRec: encodeRec,
  encode: encode$1
};

var empty = {
  TAG: "RichText",
  _0: []
};

function string(s) {
  return {
          TAG: "RichText",
          _0: [{
              TAG: "Text",
              _0: s,
              _1: []
            }]
        };
}

function hole(i) {
  return {
          TAG: "RichText",
          _0: [{
              TAG: "Hole",
              _0: i
            }]
        };
}

function srcLoc(range) {
  return {
          TAG: "RichText",
          _0: [{
              TAG: "Link",
              _0: range,
              _1: [
                {
                  TAG: "Icon",
                  _0: "link ",
                  _1: []
                },
                {
                  TAG: "Text",
                  _0: Common$AgdaModeVscode.AgdaRange.toString(range),
                  _1: []
                }
              ],
              _2: ["component-link component-hole"]
            }]
        };
}

function concatMany(xs) {
  return {
          TAG: "RichText",
          _0: xs.map(function (x) {
                  return x._0;
                }).flat()
        };
}

function parse(raw) {
  return concatMany(Core__Array.filterMap(raw.split(/([^\(\)\s]+\:(?:\d+[,\.]\d+\-\d+[,\.]\d+|\d+[,\.]\d+\-\d+|\d+[,\.]\d+))/), (function (x) {
                      return x;
                    })).map(function (token, i) {
                  var match = i % 2;
                  if (match !== 1) {
                    return string(token);
                  } else {
                    return Core__Option.mapOr(Common$AgdaModeVscode.AgdaRange.parse(token), string(token), (function (loc) {
                                  return srcLoc(loc);
                                }));
                  }
                }));
}

function make(value) {
  return React.createElement("span", undefined, value._0.map(function (x, i) {
                  switch (x.TAG) {
                    case "Icon" :
                        var className = [
                            "codicon",
                            "codicon-" + x._0
                          ].concat(x._1);
                        var className$1 = Caml_splice_call.spliceObjApply(" ", "concat", [className]);
                        return React.createElement("div", {
                                    key: String(i),
                                    className: className$1
                                  });
                    case "Text" :
                        var className$2 = Caml_splice_call.spliceObjApply(" ", "concat", [x._1]);
                        return React.createElement("span", {
                                    key: String(i),
                                    className: className$2
                                  }, x._0);
                    case "Link" :
                        var child = make({
                              TAG: "RichText",
                              _0: x._1
                            });
                        return JsxPPXReactSupportU.createElementWithKey(String(i), Link$AgdaModeVscode.make, {
                                    target: {
                                      TAG: "SrcLoc",
                                      _0: x._0
                                    },
                                    jump: true,
                                    hover: false,
                                    className: x._2,
                                    children: child
                                  });
                    case "Hole" :
                        var index = x._0;
                        var className$3 = [
                          "component-link",
                          "component-hole"
                        ];
                        return JsxPPXReactSupportU.createElementWithKey(String(i), Link$AgdaModeVscode.make, {
                                    target: {
                                      TAG: "Hole",
                                      _0: index
                                    },
                                    jump: true,
                                    hover: false,
                                    className: className$3,
                                    children: "?" + String(index)
                                  });
                    case "Horz" :
                        var children = x._0.map(function (element, j) {
                              return React.createElement("span", {
                                          key: String(j),
                                          className: "component-horz-item"
                                        }, make({
                                              TAG: "RichText",
                                              _0: element
                                            }));
                            });
                        return React.createElement("span", {
                                    key: String(i),
                                    className: "component-horz"
                                  }, children);
                    case "Vert" :
                        var children$1 = x._0.map(function (element, j) {
                              return React.createElement("span", {
                                          key: String(j),
                                          className: "component-vert-item"
                                        }, make({
                                              TAG: "RichText",
                                              _0: element
                                            }));
                            });
                        return React.createElement("span", {
                                    key: String(i),
                                    className: "component-vert"
                                  }, children$1);
                    case "Parn" :
                        return React.createElement(RichText$Parens, {
                                    children: make({
                                          TAG: "RichText",
                                          _0: x._0
                                        })
                                  });
                    case "PrHz" :
                        var children$2 = x._0.map(function (element, index) {
                              if (index === 0) {
                                return React.createElement("span", {
                                            className: "component-horz-item compact"
                                          }, make({
                                                TAG: "RichText",
                                                _0: element
                                              }));
                              } else {
                                return React.createElement("span", {
                                            className: "component-horz-item"
                                          }, make({
                                                TAG: "RichText",
                                                _0: element
                                              }));
                              }
                            });
                        return React.createElement(RichText$Parens2, {
                                    payload: children$2
                                  });
                    
                  }
                }));
}

var decode$2 = Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.array(decode$1), (function (elems) {
        return {
                TAG: "RichText",
                _0: elems
              };
      }));

function encode$2(x) {
  return Json_Encode$JsonCombinators.array(encode$1)(x._0);
}

var Module = {
  ClassNames: ClassNames,
  Inline: Inline,
  empty: empty,
  string: string,
  hole: hole,
  srcLoc: srcLoc,
  concatMany: concatMany,
  parse: parse,
  make: make,
  decode: decode$2,
  encode: encode$2
};

function RichText(props) {
  return make(props.value);
}

var make$1 = RichText;

exports.Parens = Parens;
exports.Parens2 = Parens2;
exports.Module = Module;
exports.ClassNames = ClassNames;
exports.Inline = Inline;
exports.empty = empty;
exports.string = string;
exports.hole = hole;
exports.srcLoc = srcLoc;
exports.concatMany = concatMany;
exports.parse = parse;
exports.decode = decode$2;
exports.encode = encode$2;
exports.make = make$1;
/* decode Not a pure module */
