// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var PervasivesU = require("rescript/lib/js/pervasivesU.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Json_Decode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Decode.bs.js");
var Json_Encode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Encode.bs.js");
var Emacs__Parser$AgdaModeVscode = require("./Panel/Emacs/Emacs__Parser.bs.js");

function toVSCodePosition(position) {
  return new Vscode.Position(position.line - 1 | 0, position.col - 1 | 0);
}

var decode = Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.tuple3(Json_Decode$JsonCombinators.$$int, Json_Decode$JsonCombinators.$$int, Json_Decode$JsonCombinators.$$int), (function (param) {
        return {
                line: param[0],
                col: param[1],
                pos: param[2]
              };
      }));

function encode(param) {
  return Json_Encode$JsonCombinators.tuple3((function (prim) {
                  return prim;
                }), (function (prim) {
                  return prim;
                }), (function (prim) {
                  return prim;
                }))([
              param.line,
              param.col,
              param.pos
            ]);
}

var AgdaPosition = {
  toVSCodePosition: toVSCodePosition,
  decode: decode,
  encode: encode
};

function make(start, end_) {
  return {
          start: start,
          end_: end_
        };
}

function toVSCodeRange(range) {
  return new Vscode.Range(toVSCodePosition(range.start), toVSCodePosition(range.end_));
}

function fuse(a, b) {
  var start = a.start.pos > b.start.pos ? b.start : a.start;
  var end_ = a.end_.pos > b.end_.pos ? a.end_ : b.end_;
  return {
          start: start,
          end_: end_
        };
}

function toString(self) {
  if (self.start.line === self.end_.line) {
    return String(self.start.line) + ("," + (String(self.start.col) + ("-" + String(self.end_.col))));
  } else {
    return String(self.start.line) + ("," + (String(self.start.col) + ("-" + (String(self.end_.line) + ("," + String(self.end_.col))))));
  }
}

var decode$1 = Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.tuple2(decode, decode), (function (param) {
        return {
                start: param[0],
                end_: param[1]
              };
      }));

function encode$1(param) {
  return Json_Encode$JsonCombinators.tuple2(encode, encode)([
              param.start,
              param.end_
            ]);
}

var AgdaInterval = {
  make: make,
  toVSCodeRange: toVSCodeRange,
  fuse: fuse,
  toString: toString,
  decode: decode$1,
  encode: encode$1
};

function parse(extra) {
  return Emacs__Parser$AgdaModeVscode.captures(/^(\S+)\:(?:(\d+)[,\.](\d+)\-(\d+)[,\.](\d+)|(\d+)[,\.](\d+)\-(\d+)|(\d+)[,\.](\d+))$/, (function (captured) {
                var xs = captured[1];
                var srcFile = Core__Option.flatMap(xs, (function (x) {
                        return x;
                      }));
                var xs$1 = captured[2];
                var isType1 = Core__Option.isSome(Core__Option.flatMap(xs$1, (function (x) {
                            return x;
                          })));
                var xs$2 = captured[6];
                var isType2 = Core__Option.isSome(Core__Option.flatMap(xs$2, (function (x) {
                            return x;
                          })));
                if (isType1) {
                  var xs$3 = captured[2];
                  return Core__Option.flatMap(Core__Option.flatMap(Core__Option.flatMap(xs$3, (function (x) {
                                        return x;
                                      })), PervasivesU.int_of_string_opt), (function (rowStart) {
                                var xs = captured[3];
                                return Core__Option.flatMap(Core__Option.flatMap(Core__Option.flatMap(xs, (function (x) {
                                                      return x;
                                                    })), PervasivesU.int_of_string_opt), (function (colStart) {
                                              var xs = captured[4];
                                              return Core__Option.flatMap(Core__Option.flatMap(Core__Option.flatMap(xs, (function (x) {
                                                                    return x;
                                                                  })), PervasivesU.int_of_string_opt), (function (rowEnd) {
                                                            var xs = captured[5];
                                                            return Core__Option.flatMap(Core__Option.flatMap(Core__Option.flatMap(xs, (function (x) {
                                                                                  return x;
                                                                                })), PervasivesU.int_of_string_opt), (function (colEnd) {
                                                                          return {
                                                                                  TAG: "Range",
                                                                                  _0: srcFile,
                                                                                  _1: [{
                                                                                      start: {
                                                                                        line: rowStart,
                                                                                        col: colStart,
                                                                                        pos: 0
                                                                                      },
                                                                                      end_: {
                                                                                        line: rowEnd,
                                                                                        col: colEnd,
                                                                                        pos: 0
                                                                                      }
                                                                                    }]
                                                                                };
                                                                        }));
                                                          }));
                                            }));
                              }));
                }
                if (isType2) {
                  var xs$4 = captured[6];
                  return Core__Option.flatMap(Core__Option.flatMap(Core__Option.flatMap(xs$4, (function (x) {
                                        return x;
                                      })), PervasivesU.int_of_string_opt), (function (row) {
                                var xs = captured[7];
                                return Core__Option.flatMap(Core__Option.flatMap(Core__Option.flatMap(xs, (function (x) {
                                                      return x;
                                                    })), PervasivesU.int_of_string_opt), (function (colStart) {
                                              var xs = captured[8];
                                              return Core__Option.flatMap(Core__Option.flatMap(Core__Option.flatMap(xs, (function (x) {
                                                                    return x;
                                                                  })), PervasivesU.int_of_string_opt), (function (colEnd) {
                                                            return {
                                                                    TAG: "Range",
                                                                    _0: srcFile,
                                                                    _1: [{
                                                                        start: {
                                                                          line: row,
                                                                          col: colStart,
                                                                          pos: 0
                                                                        },
                                                                        end_: {
                                                                          line: row,
                                                                          col: colEnd,
                                                                          pos: 0
                                                                        }
                                                                      }]
                                                                  };
                                                          }));
                                            }));
                              }));
                }
                var xs$5 = captured[9];
                return Core__Option.flatMap(Core__Option.flatMap(Core__Option.flatMap(xs$5, (function (x) {
                                      return x;
                                    })), PervasivesU.int_of_string_opt), (function (row) {
                              var xs = captured[10];
                              return Core__Option.flatMap(Core__Option.flatMap(Core__Option.flatMap(xs, (function (x) {
                                                    return x;
                                                  })), PervasivesU.int_of_string_opt), (function (col) {
                                            return {
                                                    TAG: "Range",
                                                    _0: srcFile,
                                                    _1: [{
                                                        start: {
                                                          line: row,
                                                          col: col,
                                                          pos: 0
                                                        },
                                                        end_: {
                                                          line: row,
                                                          col: col,
                                                          pos: 0
                                                        }
                                                      }]
                                                  };
                                          }));
                            }));
              }), extra);
}

function fuse$1(a, b) {
  var mergeTouching = function (l, e, s, r) {
    return Belt_List.concat(Belt_List.concat(l, {
                    hd: {
                      start: e.start,
                      end_: s.end_
                    },
                    tl: /* [] */0
                  }), r);
  };
  var fuseSome = function (s1, r1, s2, r2) {
    var r1$p = Util$AgdaModeVscode.List.dropWhile((function (x) {
            return x.end_.pos <= s2.end_.pos;
          }), r1);
    return helpFuse(r1$p, {
                hd: fuse(s1, s2),
                tl: r2
              });
  };
  var outputLeftPrefix = function (s1, r1, s2, is2) {
    var match = Util$AgdaModeVscode.List.span((function (s) {
            return s.end_.pos < s2.start.pos;
          }), r1);
    return Belt_List.concat(Belt_List.concat({
                    hd: s1,
                    tl: /* [] */0
                  }, match[0]), helpFuse(match[1], is2));
  };
  var helpFuse = function (a, b) {
    var match = Belt_List.reverse(a);
    var match$1 = Belt_List.reverse(b);
    if (!a) {
      return a;
    }
    if (!match) {
      if (b) {
        return PervasivesU.failwith("something wrong with Range::fuse");
      } else {
        return b;
      }
    }
    if (!b) {
      if (b) {
        return PervasivesU.failwith("something wrong with Range::fuse");
      } else {
        return b;
      }
    }
    if (!match$1) {
      return PervasivesU.failwith("something wrong with Range::fuse");
    }
    var e2 = match$1.hd;
    var r2 = b.tl;
    var s2 = b.hd;
    var e1 = match.hd;
    var r1 = a.tl;
    var s1 = a.hd;
    if (e1.end_.pos < s2.start.pos) {
      return Belt_List.concat(a, b);
    } else if (e2.end_.pos < s1.start.pos) {
      return Belt_List.concat(b, a);
    } else if (e1.end_.pos === s2.start.pos) {
      return mergeTouching(match.tl, e1, s2, r2);
    } else if (e2.end_.pos === s1.start.pos) {
      return mergeTouching(match$1.tl, e2, s1, r1);
    } else if (s1.end_.pos < s2.start.pos) {
      return outputLeftPrefix(s1, r1, s2, b);
    } else if (s2.end_.pos < s1.start.pos) {
      return outputLeftPrefix(s2, r2, s1, a);
    } else if (s1.end_.pos < s2.end_.pos) {
      return fuseSome(s1, r1, s2, r2);
    } else {
      return fuseSome(s2, r2, s1, r1);
    }
  };
  if (typeof a !== "object") {
    return b;
  } else if (typeof b !== "object") {
    return a;
  } else {
    return {
            TAG: "Range",
            _0: a._0,
            _1: Belt_List.toArray(helpFuse(Belt_List.fromArray(a._1), Belt_List.fromArray(b._1)))
          };
  }
}

function toString$1(self) {
  if (typeof self !== "object") {
    return "";
  }
  var filepath = self._0;
  if (filepath !== undefined) {
    var xs = self._1;
    if (xs.length === 0) {
      return filepath;
    }
    var match = xs[0];
    var match$1 = xs[xs.length - 1 | 0];
    if (match !== undefined && match$1 !== undefined) {
      return filepath + ":" + toString({
                  start: match.start,
                  end_: match$1.end_
                });
    } else {
      return "";
    }
  }
  var xs$1 = self._1;
  var match$2 = xs$1[0];
  var match$3 = xs$1[xs$1.length - 1 | 0];
  if (match$2 !== undefined && match$3 !== undefined) {
    return toString({
                start: match$2.start,
                end_: match$3.end_
              });
  } else {
    return "";
  }
}

var decode$2 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "NoRange" :
            return {
                    TAG: "TagOnly",
                    _0: "NoRange"
                  };
        case "Range" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.pair(Json_Decode$JsonCombinators.option(Json_Decode$JsonCombinators.string), Json_Decode$JsonCombinators.array(decode$1)), (function (param) {
                            return {
                                    TAG: "Range",
                                    _0: param[0],
                                    _1: param[1]
                                  };
                          }))
                  };
        default:
          throw {
                RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                _1: "[AgdaRange] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

var encode$2 = Util$AgdaModeVscode.Encode.sum(function (x) {
      if (typeof x !== "object") {
        return {
                TAG: "TagOnly",
                _0: "NoRange"
              };
      } else {
        return {
                TAG: "Payload",
                _0: "Range",
                _1: Json_Encode$JsonCombinators.pair(Json_Encode$JsonCombinators.option(function (prim) {
                            return prim;
                          }), Json_Encode$JsonCombinators.array(encode$1))([
                      x._0,
                      x._1
                    ])
              };
      }
    });

var AgdaRange = {
  parse: parse,
  fuse: fuse$1,
  toString: toString$1,
  decode: decode$2,
  encode: encode$2
};

function contains(interval, offset) {
  if (Caml_obj.lessequal(interval[0], offset)) {
    return Caml_obj.lessequal(offset, interval[1]);
  } else {
    return false;
  }
}

var decode$3 = Json_Decode$JsonCombinators.pair(Json_Decode$JsonCombinators.$$int, Json_Decode$JsonCombinators.$$int);

var encode$3 = Json_Encode$JsonCombinators.pair((function (prim) {
        return prim;
      }), (function (prim) {
        return prim;
      }));

function toVSCodeRange$1($$document, interval) {
  return new Vscode.Range($$document.positionAt(interval[0]), $$document.positionAt(interval[1]));
}

function fromVSCodeRange($$document, range) {
  return [
          $$document.offsetAt(range.start),
          $$document.offsetAt(range.end)
        ];
}

var Interval = {
  contains: contains,
  decode: decode$3,
  encode: encode$3,
  toVSCodeRange: toVSCodeRange$1,
  fromVSCodeRange: fromVSCodeRange
};

exports.AgdaPosition = AgdaPosition;
exports.AgdaInterval = AgdaInterval;
exports.AgdaRange = AgdaRange;
exports.Interval = Interval;
/* decode Not a pure module */
