// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml = require("rescript/lib/js/caml.js");
var Vscode = require("vscode");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Core__List = require("@rescript/core/lib/js/src/Core__List.bs.js");
var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");
var PervasivesU = require("rescript/lib/js/pervasivesU.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Core__String = require("@rescript/core/lib/js/src/Core__String.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Editor$AgdaModeVscode = require("./Editor.bs.js");
var AVLTree$AgdaModeVscode = require("./Util/AVLTree.bs.js");
var BinarySearchTree = require("@datastructures-js/binary-search-tree");

function decorate(editor, start, end, index) {
  var $$document = editor.document;
  var backgroundRange = new Vscode.Range($$document.positionAt(start), $$document.positionAt(end));
  var background = Editor$AgdaModeVscode.Decoration.highlightBackground(editor, "editor.selectionHighlightBackground", [backgroundRange]);
  var indexText = String(index);
  var indexRange = new Vscode.Range($$document.positionAt(start), $$document.positionAt(end - 2 | 0));
  var index$1 = Editor$AgdaModeVscode.Decoration.overlayText(editor, "editorLightBulb.foreground", indexText, indexRange);
  return [
          background,
          index$1
        ];
}

function make(editor, start, end, index) {
  var match = decorate(editor, start, end, index);
  return {
          index: index,
          start: start,
          end: end,
          decorationBackground: match[0],
          decorationIndex: match[1]
        };
}

function toString(goal) {
  return "#" + String(goal.index) + " [" + String(goal.start) + "-" + String(goal.end) + ")";
}

function make$1() {
  return {
          goals: new Map(),
          positions: new BinarySearchTree.BinarySearchTree()
        };
}

function serialize(self) {
  return Array.from(self.goals.values()).toSorted(function (x, y) {
                return Caml.int_compare(x.index, y.index);
              }).map(toString);
}

function destroyGoal(self, goal) {
  Editor$AgdaModeVscode.Decoration.destroy(goal.decorationBackground);
  Editor$AgdaModeVscode.Decoration.destroy(goal.decorationIndex);
  self.goals.delete(goal.index);
  self.positions.remove(goal.start);
}

function clear(self) {
  Array.from(self.goals.values()).forEach(function (goal) {
        Editor$AgdaModeVscode.Decoration.destroy(goal.decorationBackground);
        Editor$AgdaModeVscode.Decoration.destroy(goal.decorationIndex);
      });
  self.goals = new Map();
  self.positions = new BinarySearchTree.BinarySearchTree();
}

function updateGoalPosition(self, editor, goal, deltaStart, deltaEnd, redecorate) {
  var newStart = goal.start + deltaStart | 0;
  var newEnd = goal.end + deltaEnd | 0;
  self.positions.remove(goal.start);
  var updatedGoal = redecorate ? (destroyGoal(self, goal), make(editor, newStart, newEnd, goal.index)) : ({
        index: goal.index,
        start: newStart,
        end: newEnd,
        decorationBackground: goal.decorationBackground,
        decorationIndex: goal.decorationIndex
      });
  console.log("Update " + toString(goal) + " => " + toString(updatedGoal) + " (deltaStart: " + String(deltaStart) + ", deltaEnd: " + String(deltaEnd) + ")");
  self.positions.insert(newStart, updatedGoal.index);
  self.goals.set(updatedGoal.index, updatedGoal);
}

async function scanAllGoals(self, editor, changes) {
  console.log(" ======= Update positions ======= ");
  var $$document = editor.document;
  var changes$1 = Core__List.fromArray(changes);
  var scanGoal = function (delta, goal, deltaStart, deltaEnd, destroyed) {
    var range = new Vscode.Range($$document.positionAt((goal.start + delta | 0) + deltaStart | 0), $$document.positionAt((goal.end + delta | 0) + deltaEnd | 0));
    var holeText = Editor$AgdaModeVscode.$$Text.get($$document, range);
    var leftBoundary = Core__String.indexOfOpt(holeText, "{!");
    var rightBoundary = Core__String.lastIndexOfOpt(holeText, "!}");
    var holeIsIntact = Core__Option.isSome(rightBoundary) && Core__Option.isSome(leftBoundary) && holeText.startsWith("{!") && holeText.endsWith("!}");
    console.log("  delta: " + String(delta) + ", deltaStart: " + String(deltaStart) + ", deltaEnd: " + String(deltaEnd) + ", destroyed: " + PervasivesU.string_of_bool(destroyed) + ", goal: " + toString(goal) + "  \t\"" + holeText + "\"");
    if (holeText === "?") {
      console.log("EXPAND: " + toString(goal));
      return [{
                TAG: "Rewrite",
                _0: range,
                _1: "{!   !}",
                [Symbol.for("name")]: "Rewrite"
              }];
    } else if (destroyed && !holeIsIntact) {
      console.log("DESTROY: " + toString(goal));
      return [{
                TAG: "Destroy",
                _0: goal,
                [Symbol.for("name")]: "Destroy"
              }];
    } else {
      return [{
                TAG: "UpdatePosition",
                _0: goal,
                _1: delta + deltaStart | 0,
                _2: delta + deltaEnd | 0,
                _3: false,
                [Symbol.for("name")]: "UpdatePosition"
              }];
    }
  };
  var go = function (_delta, _goals, _changes) {
    while(true) {
      var changes = _changes;
      var goals = _goals;
      var delta = _delta;
      if (!goals) {
        return [];
      }
      var goals$1 = goals.tl;
      var goal = goals.hd;
      if (!changes) {
        return Belt_Array.concatMany([
                    scanGoal(delta, goal, 0, 0, false),
                    go(delta, goals$1, changes)
                  ]);
      }
      var changes$1 = changes.tl;
      var change = changes.hd;
      var removalStart = change.offset;
      var removalEnd = change.offset + change.removed | 0;
      if (removalEnd <= goal.start) {
        var delta$1 = (delta + change.inserted | 0) - change.removed | 0;
        _changes = changes$1;
        _goals = {
          hd: goal,
          tl: goals$1
        };
        _delta = delta$1;
        continue ;
      }
      if (removalStart >= goal.end) {
        _changes = {
          hd: change,
          tl: changes$1
        };
        _goals = goals$1;
        continue ;
      }
      if (goal.start >= removalStart && goal.end <= removalEnd) {
        var deltaStart = removalStart - goal.start | 0;
        var deltaEnd = (deltaStart + change.inserted | 0) - change.removed | 0;
        var delta$p = (delta + change.inserted | 0) - change.removed | 0;
        return Belt_Array.concatMany([
                    scanGoal(delta, goal, deltaStart, deltaEnd, true),
                    go(delta$p, goals$1, changes$1)
                  ]);
      }
      var deltaStart$1 = removalStart <= goal.start ? removalStart - goal.start | 0 : 0;
      var deltaEnd$1 = removalEnd >= goal.end ? (removalStart - goal.end | 0) + change.inserted | 0 : (removalStart - removalEnd | 0) + change.inserted | 0;
      return Belt_Array.concatMany([
                  scanGoal(delta, goal, deltaStart$1, deltaEnd$1, false),
                  go((delta + change.inserted | 0) - change.removed | 0, goals$1, changes$1)
                ]);
    };
  };
  var goals = Core__List.fromArray(Core__Array.filterMap(AVLTree$AgdaModeVscode.toArray(self.positions), (function (index) {
              return self.goals.get(index);
            })));
  var rewrites = Core__Array.filterMap(go(0, goals, changes$1), (function (action) {
          switch (action.TAG) {
            case "Rewrite" :
                return [
                        action._0,
                        action._1
                      ];
            case "Destroy" :
                destroyGoal(self, action._0);
                return ;
            case "UpdatePosition" :
                updateGoalPosition(self, editor, action._0, action._1, action._2, action._3);
                return ;
            
          }
        }));
  console.log("Goals after update: " + Util$AgdaModeVscode.Pretty.array(serialize(self)));
  console.log("rewrites: " + Util$AgdaModeVscode.Pretty.array(rewrites.map(function (param) {
                var range = param[0];
                return Editor$AgdaModeVscode.$$Range.toString(range) + " " + $$document.offsetAt(range.start).toString() + " => " + param[1];
              })));
  if (rewrites.length !== 0) {
    await Editor$AgdaModeVscode.$$Text.batchReplace($$document, rewrites);
    return ;
  }
  
}

async function instantiateGoalsFromLoad(self, editor, indices, positions) {
  clear(self);
  Array.from(positions.entries()).forEach(function (param, i) {
        var start = param[0];
        var index = indices[i];
        if (index === undefined) {
          return ;
        }
        var goal = make(editor, start, param[1], index);
        self.goals.set(index, goal);
        self.positions.insert(start, index);
      });
  console.log("triggered by instantiateGoalsFromLoad");
  return await scanAllGoals(self, editor, []);
}

var Module = {
  make: make$1,
  instantiateGoalsFromLoad: instantiateGoalsFromLoad,
  scanAllGoals: scanAllGoals,
  serialize: serialize
};

exports.Module = Module;
exports.make = make$1;
exports.instantiateGoalsFromLoad = instantiateGoalsFromLoad;
exports.scanAllGoals = scanAllGoals;
exports.serialize = serialize;
/* vscode Not a pure module */
