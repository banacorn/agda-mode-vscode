// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Core__List = require("@rescript/core/lib/js/src/Core__List.bs.js");
var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");
var Tokens$AgdaModeVscode = require("./Tokens.bs.js");
var AVLTree$AgdaModeVscode = require("./Util/AVLTree.bs.js");
var Highlighting$AgdaModeVscode = require("./Highlighting.bs.js");
var BinarySearchTree = require("@datastructures-js/binary-search-tree");

function make() {
  return {
          goals: new Map(),
          positions: new BinarySearchTree.BinarySearchTree()
        };
}

function instantiateGoalsFromLoad(self, editor, indices, positions) {
  Array.from(positions.entries()).forEach(function (param, i) {
        var end = param[1];
        var start = param[0];
        var index = indices[i];
        if (index === undefined) {
          return ;
        }
        var match = Highlighting$AgdaModeVscode.decorateHole(editor, [
              start,
              end
            ], index);
        var goal_decorationBackground = match[0];
        var goal_decorationIndex = match[1];
        var goal = {
          index: index,
          start: start,
          end: end,
          decorationBackground: goal_decorationBackground,
          decorationIndex: goal_decorationIndex
        };
        self.goals.set(index, goal);
        self.positions.insert(start, index);
      });
}

function updatePositions(self, $$event) {
  var changes = Core__List.fromArray($$event.contentChanges.map(Tokens$AgdaModeVscode.Change.fromTextDocumentContentChangeEvent).toReversed());
  var go = function (_delta, _goals, _changes) {
    while(true) {
      var changes = _changes;
      var goals = _goals;
      var delta = _delta;
      if (!goals) {
        return /* [] */0;
      }
      var goals$1 = goals.tl;
      var goal = goals.hd;
      if (changes) {
        var changes$1 = changes.tl;
        var change = changes.hd;
        var removalStart = change.offset;
        var removalEnd = change.offset + change.removed | 0;
        if (removalEnd <= goal.start) {
          var delta$1 = (delta + change.inserted | 0) - change.removed | 0;
          _changes = changes$1;
          _goals = {
            hd: goal,
            tl: goals$1
          };
          _delta = delta$1;
          continue ;
        }
        if (removalStart >= goal.end) {
          _changes = {
            hd: change,
            tl: changes$1
          };
          _goals = goals$1;
          continue ;
        }
        if (goal.start >= removalStart && goal.end <= removalEnd) {
          var delta$2 = (delta + change.inserted | 0) - change.removed | 0;
          return {
                  hd: {
                    TAG: "Destroy",
                    _0: goal.index,
                    [Symbol.for("name")]: "Destroy"
                  },
                  tl: go(delta$2, goals$1, changes$1)
                };
        }
        var delta$3 = (delta + change.inserted | 0) - change.removed | 0;
        return {
                hd: {
                  TAG: "Destroy",
                  _0: goal.index,
                  [Symbol.for("name")]: "Destroy"
                },
                tl: go(delta$3, goals$1, changes$1)
              };
      }
      if (delta !== 0) {
        return {
                hd: {
                  TAG: "UpdatePosition",
                  _0: goal.index,
                  _1: delta,
                  [Symbol.for("name")]: "UpdatePosition"
                },
                tl: go(delta, goals$1, changes)
              };
      }
      _goals = goals$1;
      continue ;
    };
  };
  if (Core__List.length(changes) === 0) {
    return ;
  }
  var goals = Core__List.fromArray(Core__Array.filterMap(AVLTree$AgdaModeVscode.toArray(self.positions), (function (index) {
              return self.goals.get(index);
            })));
  Core__List.forEach(go(0, goals, changes), (function (action) {
          if (action.TAG === "Destroy") {
            console.log("Destroying goal: ", action._0);
            return ;
          }
          console.log("Updating position for: #" + String(action._0) + " with delta: " + String(action._1));
        }));
}

var Module = {
  make: make,
  instantiateGoalsFromLoad: instantiateGoalsFromLoad,
  updatePositions: updatePositions
};

exports.Module = Module;
exports.make = make;
exports.instantiateGoalsFromLoad = instantiateGoalsFromLoad;
exports.updatePositions = updatePositions;
/* Tokens-AgdaModeVscode Not a pure module */
