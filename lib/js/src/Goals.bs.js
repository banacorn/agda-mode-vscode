// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Core__List = require("@rescript/core/lib/js/src/Core__List.bs.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");
var Editor$AgdaModeVscode = require("./Editor.bs.js");
var Tokens$AgdaModeVscode = require("./Tokens.bs.js");
var AVLTree$AgdaModeVscode = require("./Util/AVLTree.bs.js");
var BinarySearchTree = require("@datastructures-js/binary-search-tree");

function decorate(editor, start, end, index) {
  var $$document = editor.document;
  var backgroundRange = new Vscode.Range($$document.positionAt(start), $$document.positionAt(end));
  var background = Editor$AgdaModeVscode.Decoration.highlightBackground(editor, "editor.selectionHighlightBackground", [backgroundRange]);
  var indexText = String(index);
  var indexRange = new Vscode.Range($$document.positionAt(start), $$document.positionAt(end - 2 | 0));
  var index$1 = Editor$AgdaModeVscode.Decoration.overlayText(editor, "editorLightBulb.foreground", indexText, indexRange);
  return [
          background,
          index$1
        ];
}

function make(editor, start, end, index) {
  var match = decorate(editor, start, end, index);
  return {
          index: index,
          start: start,
          end: end,
          decorationBackground: match[0],
          decorationIndex: match[1]
        };
}

function destroy(goal) {
  Editor$AgdaModeVscode.Decoration.destroy(goal.decorationBackground);
  Editor$AgdaModeVscode.Decoration.destroy(goal.decorationIndex);
}

function toString(goal) {
  return "#" + String(goal.index) + " [" + String(goal.start) + "-" + String(goal.end) + ")";
}

function make$1() {
  return {
          goals: new Map(),
          positions: new BinarySearchTree.BinarySearchTree()
        };
}

function clear(self) {
  Array.from(self.goals.values()).forEach(destroy);
  self.goals = new Map();
  self.positions = new BinarySearchTree.BinarySearchTree();
}

async function expandQuestionMarkGoals(self, $$document) {
  var rewrites = Core__Array.filterMap(Array.from(self.goals.values()), (function (goal) {
          var range = new Vscode.Range($$document.positionAt(goal.start), $$document.positionAt(goal.end));
          var content = $$document.getText(Caml_option.some(range));
          if (content === "?") {
            return [
                    range,
                    "{!   !}"
                  ];
          }
          
        }));
  await Editor$AgdaModeVscode.$$Text.batchReplace($$document, rewrites);
}

async function instantiateGoalsFromLoad(self, editor, indices, positions) {
  clear(self);
  Array.from(positions.entries()).forEach(function (param, i) {
        var start = param[0];
        var index = indices[i];
        if (index === undefined) {
          return ;
        }
        var goal = make(editor, start, param[1], index);
        self.goals.set(index, goal);
        self.positions.insert(start, index);
      });
  return await expandQuestionMarkGoals(self, editor.document);
}

function updatePositions(self, editor, $$event) {
  var changes = Core__List.fromArray($$event.contentChanges.map(Tokens$AgdaModeVscode.Change.fromTextDocumentContentChangeEvent).toReversed());
  var go = function (_delta, _goals, _changes) {
    while(true) {
      var changes = _changes;
      var goals = _goals;
      var delta = _delta;
      if (!goals) {
        return /* [] */0;
      }
      var goals$1 = goals.tl;
      var goal = goals.hd;
      if (changes) {
        var changes$1 = changes.tl;
        var change = changes.hd;
        var removalStart = change.offset;
        var removalEnd = change.offset + change.removed | 0;
        if (removalEnd <= goal.start) {
          var delta$1 = (delta + change.inserted | 0) - change.removed | 0;
          _changes = changes$1;
          _goals = {
            hd: goal,
            tl: goals$1
          };
          _delta = delta$1;
          continue ;
        }
        if (removalStart >= goal.end) {
          _changes = {
            hd: change,
            tl: changes$1
          };
          _goals = goals$1;
          continue ;
        }
        if (goal.start >= removalStart && goal.end <= removalEnd) {
          if ((goal.end - goal.start | 0) === 1 && change.removed === 1 && change.inserted === 7) {
            var delta$2 = (delta + change.inserted | 0) - change.removed | 0;
            return {
                    hd: {
                      TAG: "UpdatePosition",
                      _0: goal,
                      _1: delta$2 - 6 | 0,
                      _2: delta$2,
                      _3: true,
                      [Symbol.for("name")]: "UpdatePosition"
                    },
                    tl: go(delta$2, goals$1, changes$1)
                  };
          }
          var delta$3 = (delta + change.inserted | 0) - change.removed | 0;
          return {
                  hd: {
                    TAG: "Destroy",
                    _0: goal,
                    [Symbol.for("name")]: "Destroy"
                  },
                  tl: go(delta$3, goals$1, changes$1)
                };
        }
        var delta$4 = (delta + change.inserted | 0) - change.removed | 0;
        return {
                hd: {
                  TAG: "Destroy",
                  _0: goal,
                  [Symbol.for("name")]: "Destroy"
                },
                tl: go(delta$4, goals$1, changes$1)
              };
      }
      if (delta !== 0) {
        return {
                hd: {
                  TAG: "UpdatePosition",
                  _0: goal,
                  _1: delta,
                  _2: delta,
                  _3: false,
                  [Symbol.for("name")]: "UpdatePosition"
                },
                tl: go(delta, goals$1, changes)
              };
      }
      _goals = goals$1;
      continue ;
    };
  };
  if (Core__List.length(changes) !== 0) {
    var goals = Core__List.fromArray(Core__Array.filterMap(AVLTree$AgdaModeVscode.toArray(self.positions), (function (index) {
                return self.goals.get(index);
              })));
    Core__List.forEach(go(0, goals, changes), (function (action) {
            if (action.TAG !== "Destroy") {
              var goal = action._0;
              var deltaStart = action._1;
              var deltaEnd = action._2;
              var redecorate = action._3;
              var newStart = goal.start + deltaStart | 0;
              var newEnd = goal.end + deltaEnd | 0;
              self.positions.remove(goal.start);
              var updatedGoal = redecorate ? (destroy(goal), make(editor, newStart, newEnd, goal.index)) : ({
                    index: goal.index,
                    start: newStart,
                    end: newEnd,
                    decorationBackground: goal.decorationBackground,
                    decorationIndex: goal.decorationIndex
                  });
              console.log("Update " + toString(goal) + " => " + toString(updatedGoal) + " (deltaStart: " + String(deltaStart) + ", deltaEnd: " + String(deltaEnd) + ")");
              self.positions.insert(newStart, updatedGoal.index);
              self.goals.set(updatedGoal.index, updatedGoal);
              return ;
            }
            var goal$1 = action._0;
            self.goals.delete(goal$1.index);
            self.positions.remove(goal$1.start);
            destroy(goal$1);
          }));
  }
  console.log("Goals after update: " + Array.from(self.goals.values()).map(toString).join(", "));
}

function getGoals(self) {
  return new Map(Array.from(self.goals.entries()).map(function (param) {
                  var goal = param[1];
                  return [
                          param[0],
                          [
                            goal.start,
                            goal.end
                          ]
                        ];
                }));
}

var Module = {
  make: make$1,
  instantiateGoalsFromLoad: instantiateGoalsFromLoad,
  updatePositions: updatePositions,
  getGoals: getGoals
};

exports.Module = Module;
exports.make = make$1;
exports.instantiateGoalsFromLoad = instantiateGoalsFromLoad;
exports.updatePositions = updatePositions;
exports.getGoals = getGoals;
/* vscode Not a pure module */
