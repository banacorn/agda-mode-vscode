// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var View$AgdaModeVscode = require("./View/View.bs.js");

function encode(x) {
  switch (x) {
    case "AsIs" :
        return "AsIs";
    case "Simplified" :
        return "Simplified";
    case "Instantiated" :
        return "Instantiated";
    case "Normalised" :
        return "Normalised";
    case "HeadNormal" :
        return "HeadNormal";
    
  }
}

function toString(x) {
  switch (x) {
    case "AsIs" :
        return "(returned as is)";
    case "Simplified" :
        return "(simplified)";
    case "Instantiated" :
        return "(neither explicitly normalised nor simplified)";
    case "Normalised" :
        return "(normalised)";
    case "HeadNormal" :
        return "(head normalized)";
    
  }
}

var Normalization = {
  encode: encode,
  toString: toString
};

function encode$1(x) {
  switch (x) {
    case "DefaultCompute" :
        return "DefaultCompute";
    case "IgnoreAbstract" :
        return "IgnoreAbstract";
    case "UseShowInstance" :
        return "UseShowInstance";
    
  }
}

function ignoreAbstract(x) {
  switch (x) {
    case "DefaultCompute" :
        return false;
    case "IgnoreAbstract" :
    case "UseShowInstance" :
        return true;
    
  }
}

var ComputeMode = {
  encode: encode$1,
  ignoreAbstract: ignoreAbstract
};

function toString$1(x) {
  if (typeof x === "object") {
    return "InsertChar '" + (x._0 + "'");
  }
  switch (x) {
    case "Activate" :
        return "Activate";
    case "BrowseUp" :
        return "BrowseUp";
    case "BrowseRight" :
        return "BrowseRight";
    case "BrowseDown" :
        return "BrowseDown";
    case "BrowseLeft" :
        return "BrowseLeft";
    
  }
}

var InputMethod = {
  toString: toString$1
};

var names = [
  [
    "Load",
    "load"
  ],
  [
    "Quit",
    "quit"
  ],
  [
    "Restart",
    "restart"
  ],
  [
    "Compile",
    "compile"
  ],
  [
    "ToggleDisplayOfImplicitArguments",
    "toggle-display-of-implicit-arguments"
  ],
  [
    "ToggleDisplayOfIrrelevantArguments",
    "toggle-display-of-irrelevant-arguments"
  ],
  [
    "ShowConstraints",
    "show-constraints"
  ],
  [
    {
      TAG: "SolveConstraints",
      _0: "AsIs"
    },
    "solve-constraints[AsIs]"
  ],
  [
    {
      TAG: "SolveConstraints",
      _0: "Simplified"
    },
    "solve-constraints[Simplified]"
  ],
  [
    {
      TAG: "SolveConstraints",
      _0: "Normalised"
    },
    "solve-constraints[Normalised]"
  ],
  [
    {
      TAG: "SolveConstraints",
      _0: "HeadNormal"
    },
    "solve-constraints[HeadNormal]"
  ],
  [
    {
      TAG: "ShowGoals",
      _0: "AsIs"
    },
    "show-goals[AsIs]"
  ],
  [
    {
      TAG: "ShowGoals",
      _0: "Simplified"
    },
    "show-goals[Simplified]"
  ],
  [
    {
      TAG: "ShowGoals",
      _0: "Normalised"
    },
    "show-goals[Normalised]"
  ],
  [
    {
      TAG: "ShowGoals",
      _0: "HeadNormal"
    },
    "show-goals[HeadNormal]"
  ],
  [
    "NextGoal",
    "next-goal"
  ],
  [
    "PreviousGoal",
    "previous-goal"
  ],
  [
    {
      TAG: "SearchAbout",
      _0: "Simplified"
    },
    "search-about[Simplified]"
  ],
  [
    {
      TAG: "SearchAbout",
      _0: "Instantiated"
    },
    "search-about[Instantiated]"
  ],
  [
    {
      TAG: "SearchAbout",
      _0: "Normalised"
    },
    "search-about[Normalised]"
  ],
  [
    {
      TAG: "SearchAbout",
      _0: "HeadNormal"
    },
    "search-about[HeadNormal]"
  ],
  [
    "Give",
    "give"
  ],
  [
    "Refine",
    "refine"
  ],
  [
    {
      TAG: "ElaborateAndGive",
      _0: "Simplified"
    },
    "elaborate-and-give[Simplified]"
  ],
  [
    {
      TAG: "ElaborateAndGive",
      _0: "Instantiated"
    },
    "elaborate-and-give[Instantiated]"
  ],
  [
    {
      TAG: "ElaborateAndGive",
      _0: "Normalised"
    },
    "elaborate-and-give[Normalised]"
  ],
  [
    {
      TAG: "ElaborateAndGive",
      _0: "HeadNormal"
    },
    "elaborate-and-give[HeadNormal]"
  ],
  [
    {
      TAG: "Auto",
      _0: "AsIs"
    },
    "auto[AsIs]"
  ],
  [
    {
      TAG: "Auto",
      _0: "Simplified"
    },
    "auto[Simplified]"
  ],
  [
    {
      TAG: "Auto",
      _0: "Normalised"
    },
    "auto[Normalised]"
  ],
  [
    {
      TAG: "Auto",
      _0: "HeadNormal"
    },
    "auto[HeadNormal]"
  ],
  [
    "Case",
    "case"
  ],
  [
    {
      TAG: "HelperFunctionType",
      _0: "AsIs"
    },
    "helper-function-type[AsIs]"
  ],
  [
    {
      TAG: "HelperFunctionType",
      _0: "Simplified"
    },
    "helper-function-type[Simplified]"
  ],
  [
    {
      TAG: "HelperFunctionType",
      _0: "Normalised"
    },
    "helper-function-type[Normalised]"
  ],
  [
    {
      TAG: "HelperFunctionType",
      _0: "HeadNormal"
    },
    "helper-function-type[HeadNormal]"
  ],
  [
    {
      TAG: "InferType",
      _0: "Simplified"
    },
    "infer-type[Simplified]"
  ],
  [
    {
      TAG: "InferType",
      _0: "Instantiated"
    },
    "infer-type[Instantiated]"
  ],
  [
    {
      TAG: "InferType",
      _0: "Normalised"
    },
    "infer-type[Normalised]"
  ],
  [
    {
      TAG: "InferType",
      _0: "HeadNormal"
    },
    "infer-type[HeadNormal]"
  ],
  [
    {
      TAG: "Context",
      _0: "Simplified"
    },
    "context[Simplified]"
  ],
  [
    {
      TAG: "Context",
      _0: "Instantiated"
    },
    "context[Instantiated]"
  ],
  [
    {
      TAG: "Context",
      _0: "Normalised"
    },
    "context[Normalised]"
  ],
  [
    {
      TAG: "Context",
      _0: "HeadNormal"
    },
    "context[HeadNormal]"
  ],
  [
    {
      TAG: "GoalType",
      _0: "Simplified"
    },
    "goal-type[Simplified]"
  ],
  [
    {
      TAG: "GoalType",
      _0: "Instantiated"
    },
    "goal-type[Instantiated]"
  ],
  [
    {
      TAG: "GoalType",
      _0: "Normalised"
    },
    "goal-type[Normalised]"
  ],
  [
    {
      TAG: "GoalType",
      _0: "HeadNormal"
    },
    "goal-type[HeadNormal]"
  ],
  [
    {
      TAG: "GoalTypeAndContext",
      _0: "Simplified"
    },
    "goal-type-and-context[Simplified]"
  ],
  [
    {
      TAG: "GoalTypeAndContext",
      _0: "Instantiated"
    },
    "goal-type-and-context[Instantiated]"
  ],
  [
    {
      TAG: "GoalTypeAndContext",
      _0: "Normalised"
    },
    "goal-type-and-context[Normalised]"
  ],
  [
    {
      TAG: "GoalTypeAndContext",
      _0: "HeadNormal"
    },
    "goal-type-and-context[HeadNormal]"
  ],
  [
    {
      TAG: "GoalTypeContextAndInferredType",
      _0: "Simplified"
    },
    "goal-type-context-and-inferred-type[Simplified]"
  ],
  [
    {
      TAG: "GoalTypeContextAndInferredType",
      _0: "Instantiated"
    },
    "goal-type-context-and-inferred-type[Instantiated]"
  ],
  [
    {
      TAG: "GoalTypeContextAndInferredType",
      _0: "Normalised"
    },
    "goal-type-context-and-inferred-type[Normalised]"
  ],
  [
    {
      TAG: "GoalTypeContextAndInferredType",
      _0: "HeadNormal"
    },
    "goal-type-context-and-inferred-type[HeadNormal]"
  ],
  [
    {
      TAG: "GoalTypeContextAndCheckedType",
      _0: "Simplified"
    },
    "goal-type-context-and-checked-type[Simplified]"
  ],
  [
    {
      TAG: "GoalTypeContextAndCheckedType",
      _0: "Instantiated"
    },
    "goal-type-context-and-checked-type[Instantiated]"
  ],
  [
    {
      TAG: "GoalTypeContextAndCheckedType",
      _0: "Normalised"
    },
    "goal-type-context-and-checked-type[Normalised]"
  ],
  [
    {
      TAG: "GoalTypeContextAndCheckedType",
      _0: "HeadNormal"
    },
    "goal-type-context-and-checked-type[HeadNormal]"
  ],
  [
    {
      TAG: "ModuleContents",
      _0: "Simplified"
    },
    "module-contents[Simplified]"
  ],
  [
    {
      TAG: "ModuleContents",
      _0: "Instantiated"
    },
    "module-contents[Instantiated]"
  ],
  [
    {
      TAG: "ModuleContents",
      _0: "Normalised"
    },
    "module-contents[Normalised]"
  ],
  [
    {
      TAG: "ModuleContents",
      _0: "HeadNormal"
    },
    "module-contents[HeadNormal]"
  ],
  [
    {
      TAG: "ComputeNormalForm",
      _0: "DefaultCompute"
    },
    "compute-normal-form[DefaultCompute]"
  ],
  [
    {
      TAG: "ComputeNormalForm",
      _0: "IgnoreAbstract"
    },
    "compute-normal-form[IgnoreAbstract]"
  ],
  [
    {
      TAG: "ComputeNormalForm",
      _0: "UseShowInstance"
    },
    "compute-normal-form[UseShowInstance]"
  ],
  [
    "WhyInScope",
    "why-in-scope"
  ],
  [
    "SwitchAgdaVersion",
    "switch-agda-version"
  ],
  [
    "SwitchAgdaVersion2",
    "switch-agda-version-2"
  ],
  [
    "Escape",
    "escape"
  ],
  [
    {
      TAG: "InputMethod",
      _0: "Activate"
    },
    "input-symbol[Activate]"
  ],
  [
    {
      TAG: "InputMethod",
      _0: "BrowseUp"
    },
    "input-symbol[BrowseUp]"
  ],
  [
    {
      TAG: "InputMethod",
      _0: "BrowseRight"
    },
    "input-symbol[BrowseRight]"
  ],
  [
    {
      TAG: "InputMethod",
      _0: "BrowseDown"
    },
    "input-symbol[BrowseDown]"
  ],
  [
    {
      TAG: "InputMethod",
      _0: "BrowseLeft"
    },
    "input-symbol[BrowseLeft]"
  ],
  [
    {
      TAG: "InputMethod",
      _0: {
        TAG: "InsertChar",
        _0: "{"
      }
    },
    "input-symbol[InsertOpenCurlyBraces]"
  ],
  [
    {
      TAG: "InputMethod",
      _0: {
        TAG: "InsertChar",
        _0: "("
      }
    },
    "input-symbol[InsertOpenParenthesis]"
  ],
  [
    "LookupSymbol",
    "lookup-symbol"
  ],
  [
    "OpenDebugBuffer",
    "open-debug-buffer"
  ]
];

function toKeybinding(x) {
  if (typeof x !== "object") {
    switch (x) {
      case "Load" :
          return "load";
      case "Quit" :
          return "quit";
      case "Restart" :
          return "restart";
      case "Refresh" :
          return "refresh";
      case "Compile" :
          return "compile";
      case "ToggleDisplayOfImplicitArguments" :
          return "toggle-display-of-implicit-arguments";
      case "ToggleDisplayOfIrrelevantArguments" :
          return "toggle-display-of-irrelevant-arguments";
      case "ShowConstraints" :
          return "show-constraints";
      case "NextGoal" :
          return "next-goal";
      case "PreviousGoal" :
          return "previous-goal";
      case "Give" :
          return "give";
      case "Refine" :
          return "refine";
      case "Case" :
          return "case";
      case "WhyInScope" :
          return "why-in-scope";
      case "SwitchAgdaVersion" :
          return "switch-agda-version";
      case "SwitchAgdaVersion2" :
          return "switch-agda-version-2";
      case "Escape" :
          return "escape";
      case "LookupSymbol" :
          return "lookup-symbol";
      case "OpenDebugBuffer" :
          return "open-debug-buffer";
      
    }
  } else {
    switch (x.TAG) {
      case "SolveConstraints" :
          return "solve-constraints[" + encode(x._0) + "]";
      case "ShowGoals" :
          return "show-goals[" + encode(x._0) + "]";
      case "SearchAbout" :
          return "search-about[" + encode(x._0) + "]";
      case "ElaborateAndGive" :
          return "elaborate-and-give[" + encode(x._0) + "]";
      case "Auto" :
          return "auto[" + encode(x._0) + "]";
      case "HelperFunctionType" :
          return "helper-function-type[" + encode(x._0) + "]";
      case "InferType" :
          return "infer-type[" + encode(x._0) + "]";
      case "Context" :
          return "context[" + encode(x._0) + "]";
      case "GoalType" :
          return "goal-type[" + encode(x._0) + "]";
      case "GoalTypeAndContext" :
          return "goal-type-and-context[" + encode(x._0) + "]";
      case "EventFromView" :
          return "event-from-view[" + View$AgdaModeVscode.EventFromView.toString(x._0) + "]";
      case "GoalTypeContextAndInferredType" :
          return "goal-type-context-and-inferred-type[" + encode(x._0) + "]";
      case "GoalTypeContextAndCheckedType" :
          return "goal-type-context-and-checked-type[" + encode(x._0) + "]";
      case "ModuleContents" :
          return "module-contents[" + encode(x._0) + "]";
      case "ComputeNormalForm" :
          return "compute-normal-form[" + encode$1(x._0) + "]";
      case "InputMethod" :
          var action = x._0;
          if (typeof action !== "object") {
            switch (action) {
              case "Activate" :
                  return "input-symbol[Activate]";
              case "BrowseUp" :
                  return "input-symbol[BrowseUp]";
              case "BrowseRight" :
                  return "input-symbol[BrowseRight]";
              case "BrowseDown" :
                  return "input-symbol[BrowseDown]";
              case "BrowseLeft" :
                  return "input-symbol[BrowseLeft]";
              
            }
          } else {
            var $$char = action._0;
            switch ($$char) {
              case "(" :
                  return "input-symbol[InsertOpenParenthesis]";
              case "{" :
                  return "input-symbol[InsertOpenCurlyBraces]";
              default:
                return "input-symbol[" + $$char + "]";
            }
          }
      
    }
  }
}

function toString$2(x) {
  if (typeof x !== "object") {
    switch (x) {
      case "Load" :
          return "Load";
      case "Quit" :
          return "Quit";
      case "Restart" :
          return "Restart";
      case "Refresh" :
          return "Refresh ";
      case "Compile" :
          return "Compile";
      case "ToggleDisplayOfImplicitArguments" :
          return "Toggle display of hidden arguments";
      case "ToggleDisplayOfIrrelevantArguments" :
          return "Toggle display of irrelevant arguments";
      case "ShowConstraints" :
          return "Show constraints";
      case "NextGoal" :
          return "Next goal";
      case "PreviousGoal" :
          return "Previous goal";
      case "Give" :
          return "Give";
      case "Refine" :
          return "Refine";
      case "Case" :
          return "Case";
      case "WhyInScope" :
          return "Why in scope";
      case "SwitchAgdaVersion" :
          return "Switch to a different Agda version";
      case "SwitchAgdaVersion2" :
          return "Switch to a different Agda version (v2)";
      case "Escape" :
          return "Escape";
      case "LookupSymbol" :
          return "Lookup Unicode symbol input sequence";
      case "OpenDebugBuffer" :
          return "Open debug buffer";
      
    }
  } else {
    switch (x.TAG) {
      case "SolveConstraints" :
          return "Solve constraints " + toString(x._0);
      case "ShowGoals" :
          return "Show goals" + toString(x._0);
      case "SearchAbout" :
          return "Search about " + toString(x._0);
      case "ElaborateAndGive" :
          return "Elaborate and give " + toString(x._0);
      case "Auto" :
          return "Auto " + toString(x._0);
      case "HelperFunctionType" :
          return "Helper function type " + toString(x._0);
      case "InferType" :
          return "Infer type " + toString(x._0);
      case "Context" :
          return "Context " + toString(x._0);
      case "GoalType" :
          return "Goal type " + toString(x._0);
      case "GoalTypeAndContext" :
          return "Goal type and context " + toString(x._0);
      case "EventFromView" :
          return "Event from the view (" + View$AgdaModeVscode.EventFromView.toString(x._0) + ")";
      case "GoalTypeContextAndInferredType" :
          return "Goal type, context and inferred type " + toString(x._0);
      case "GoalTypeContextAndCheckedType" :
          return "Goal type, context and checked type " + toString(x._0);
      case "ModuleContents" :
          return "Module contents " + toString(x._0);
      case "ComputeNormalForm" :
          switch (x._0) {
            case "DefaultCompute" :
                return "Compute normal form (DefaultCompute)";
            case "IgnoreAbstract" :
                return "Compute normal form (IgnoreAbstract)";
            case "UseShowInstance" :
                return "Compute normal form (UseShowInstance)";
            
          }
      case "InputMethod" :
          return "Input symbol " + toString$1(x._0);
      
    }
  }
}

exports.Normalization = Normalization;
exports.ComputeMode = ComputeMode;
exports.InputMethod = InputMethod;
exports.names = names;
exports.toKeybinding = toKeybinding;
exports.toString = toString$2;
/* View-AgdaModeVscode Not a pure module */
