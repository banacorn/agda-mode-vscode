// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Main$AgdaModeVscode = require("./Main.bs.js");

function determinePlatform() {
  var unsupportedRaw = {
    os: "web",
    dist: "browser",
    codename: "web",
    release: "1.0"
  };
  return Promise.resolve({
              TAG: "Error",
              _0: unsupportedRaw
            });
}

function findCommands(_commands) {
  return Promise.resolve({
              TAG: "Error",
              _0: [{
                  TAG: "NotFound",
                  _0: "Platform not supported in web environment"
                }]
            });
}

function findCommand(_command, _timeoutOpt) {
  return Promise.resolve({
              TAG: "Error",
              _0: {
                TAG: "NotFound",
                _0: "Platform not supported in web environment"
              }
            });
}

function alreadyDownloaded(_globalStorageUri) {
  return function () {
    return Promise.resolve(undefined);
  };
}

function downloadLatestALS(_memento, _globalStorageUri) {
  return function (_platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
}

function getInstalledEndpointsAndPersistThem(_globalStorageUri) {
  return Promise.resolve(Object.fromEntries([]));
}

function getInstalledEndpointsAndPersistThem2(_globalStorageUri) {
  return Promise.resolve({});
}

function askUserAboutDownloadPolicy() {
  return Promise.resolve("No");
}

var Web = {
  determinePlatform: determinePlatform,
  findCommands: findCommands,
  findCommand: findCommand,
  alreadyDownloaded: alreadyDownloaded,
  downloadLatestALS: downloadLatestALS,
  getInstalledEndpointsAndPersistThem: getInstalledEndpointsAndPersistThem,
  getInstalledEndpointsAndPersistThem2: getInstalledEndpointsAndPersistThem2,
  askUserAboutDownloadPolicy: askUserAboutDownloadPolicy
};

function make() {
  return Web;
}

function activate(context) {
  return Main$AgdaModeVscode.activate(Web, context);
}

var deactivate = Main$AgdaModeVscode.deactivate;

exports.Web = Web;
exports.make = make;
exports.activate = activate;
exports.deactivate = deactivate;
/* Main-AgdaModeVscode Not a pure module */
