// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Main$AgdaModeVscode = require("./Main.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Connection__Download__GitHub$AgdaModeVscode = require("../Connection/Download/Connection__Download__GitHub.bs.js");
var Connection__Download__Platform$AgdaModeVscode = require("../Connection/Download/Connection__Download__Platform.bs.js");

function determinePlatform() {
  return Promise.resolve({
              TAG: "Ok",
              _0: "Web"
            });
}

function findCommand(_command, _timeoutOpt) {
  return Promise.resolve({
              TAG: "Error",
              _0: "NotFound"
            });
}

function alreadyDownloaded(_globalStorageUri) {
  return function () {
    return Promise.resolve(undefined);
  };
}

function downloadLatestALS(_logChannel, _memento, _globalStorageUri) {
  return function (_platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
}

async function getFetchSpec(_memento, _globalStorageUri, platform) {
  var fetchReleases = async function () {
    try {
      var response = await fetch("https://api.github.com/repos/agda/agda-language-server/releases", {
            method: "GET",
            headers: Caml_option.some(new Headers({
                      Accept: "application/vnd.github+json"
                    })),
            mode: "cors",
            credentials: "omit",
            redirect: "follow"
          });
      if (response.ok) {
        var json = await response.json();
        var releases = Connection__Download__GitHub$AgdaModeVscode.Release.decodeReleases(json);
        if (releases.TAG === "Ok") {
          return {
                  TAG: "Ok",
                  _0: releases._0
                };
        } else {
          return {
                  TAG: "Error",
                  _0: {
                    TAG: "CannotFetchALSReleases",
                    _0: releases._0
                  }
                };
        }
      }
      var serverError = {
        message: "GitHub API request failed"
      };
      return {
              TAG: "Error",
              _0: {
                TAG: "CannotFetchALSReleases",
                _0: {
                  TAG: "CannotGetReleases",
                  _0: {
                    TAG: "ServerResponseError",
                    _0: serverError
                  }
                }
              }
            };
    }
    catch (exn){
      var networkError = {
        message: "Network error"
      };
      return {
              TAG: "Error",
              _0: {
                TAG: "CannotFetchALSReleases",
                _0: {
                  TAG: "CannotGetReleases",
                  _0: {
                    TAG: "ServerResponseError",
                    _0: networkError
                  }
                }
              }
            };
    }
  };
  var chooseAssetByPlatform = function (release, platform) {
    var assetName = Connection__Download__Platform$AgdaModeVscode.toAssetName(platform);
    return release.assets.filter(function (asset) {
                return asset.name.endsWith(assetName + ".zip");
              });
  };
  var error = await fetchReleases();
  if (error.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: error._0
          };
  }
  var laterReleases = error._0.filter(function (release) {
        return Caml_obj.greaterequal(new Date(release.published_at), new Date("2024-12-18"));
      });
  var pinnedRelease = laterReleases.find(function (release) {
        return release.name === "v0.2.7.0.1.5";
      });
  if (pinnedRelease === undefined) {
    return {
            TAG: "Error",
            _0: "CannotFindCompatibleALSRelease"
          };
  }
  var getAgdaVersion = function (asset) {
    return asset.name.replace(/als-Agda-/, "").replace(/-.*/, "");
  };
  var assets = chooseAssetByPlatform(pinnedRelease, platform);
  var result = assets.toSorted(function (a, b) {
            return Util$AgdaModeVscode.Version.compare(getAgdaVersion(b), getAgdaVersion(a));
          }).map(function (asset) {
          return {
                  release: pinnedRelease,
                  asset: asset,
                  saveAsFileName: "latest-als"
                };
        })[0];
  if (result !== undefined) {
    return {
            TAG: "Ok",
            _0: result
          };
  } else {
    return {
            TAG: "Error",
            _0: "CannotFindCompatibleALSRelease"
          };
  }
}

function askUserAboutDownloadPolicy() {
  return Promise.resolve("No");
}

function openFolder(_uri) {
  return Promise.resolve();
}

var Web = {
  determinePlatform: determinePlatform,
  findCommand: findCommand,
  alreadyDownloaded: alreadyDownloaded,
  downloadLatestALS: downloadLatestALS,
  getFetchSpec: getFetchSpec,
  askUserAboutDownloadPolicy: askUserAboutDownloadPolicy,
  openFolder: openFolder
};

function make() {
  return Web;
}

function activate(context) {
  return Main$AgdaModeVscode.activate(Web, context);
}

var deactivate = Main$AgdaModeVscode.deactivate;

exports.Web = Web;
exports.make = make;
exports.activate = activate;
exports.deactivate = deactivate;
/* Main-AgdaModeVscode Not a pure module */
