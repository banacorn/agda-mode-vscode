// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("rescript/lib/js/caml_option.js");
var Main$AgdaModeVscode = require("./Main.bs.js");
var Connection__Download__GitHub$AgdaModeVscode = require("../Connection/Download/Connection__Download__GitHub.bs.js");

function determinePlatform() {
  return Promise.resolve({
              TAG: "Ok",
              _0: "Web"
            });
}

function findCommand(_command, _timeoutOpt) {
  return Promise.resolve({
              TAG: "Error",
              _0: "NotFound"
            });
}

function alreadyDownloaded(_globalStorageUri) {
  return function () {
    return Promise.resolve(undefined);
  };
}

function downloadLatestALS(_logChannel, _memento, _globalStorageUri) {
  return function (_platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
}

async function getDownloadDescriptor(url, header) {
  var fetchReleases = async function () {
    try {
      var response = await fetch(url, {
            method: "GET",
            headers: Caml_option.some(new Headers(header)),
            mode: "cors",
            credentials: "omit",
            redirect: "follow"
          });
      if (response.ok) {
        var json = await response.json();
        var releases = Connection__Download__GitHub$AgdaModeVscode.Release.decodeReleases(json);
        if (releases.TAG === "Ok") {
          return {
                  TAG: "Ok",
                  _0: releases._0
                };
        } else {
          return {
                  TAG: "Error",
                  _0: {
                    TAG: "CannotFetchALSReleases",
                    _0: releases._0
                  }
                };
        }
      }
      var serverError = {
        message: "GitHub API request failed"
      };
      return {
              TAG: "Error",
              _0: {
                TAG: "CannotFetchALSReleases",
                _0: {
                  TAG: "CannotGetReleases",
                  _0: {
                    TAG: "ServerResponseError",
                    _0: serverError
                  }
                }
              }
            };
    }
    catch (exn){
      var networkError = {
        message: "Network error"
      };
      return {
              TAG: "Error",
              _0: {
                TAG: "CannotFetchALSReleases",
                _0: {
                  TAG: "CannotGetReleases",
                  _0: {
                    TAG: "ServerResponseError",
                    _0: networkError
                  }
                }
              }
            };
    }
  };
  var error = await fetchReleases();
  if (error.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: error._0
          };
  }
  var pinnedRelease = error._0.find(function (release) {
        if (release.tag_name === "dev") {
          return true;
        } else {
          return release.name === "Development Release (dev)";
        }
      });
  if (pinnedRelease === undefined) {
    return {
            TAG: "Error",
            _0: "CannotFindCompatibleALSRelease"
          };
  }
  var result = pinnedRelease.assets.find(function (asset) {
        return asset.name === "als-dev-wasm";
      });
  if (result !== undefined) {
    return {
            TAG: "Ok",
            _0: {
              release: pinnedRelease,
              asset: result,
              saveAsFileName: "dev-als"
            }
          };
  } else {
    return {
            TAG: "Error",
            _0: "CannotFindCompatibleALSRelease"
          };
  }
}

function getDownloadDescriptorOfDevALS(_globalStorageUri, _platform) {
  return getDownloadDescriptor("https://api.github.com/repos/banacorn/agda-language-server/releases", {
              Accept: "application/vnd.github+json"
            });
}

async function getDownloadDescriptorOfLatestALS(param, param$1, param$2) {
  return {
          TAG: "Error",
          _0: "CannotFindCompatibleALSRelease"
        };
}

function askUserAboutDownloadPolicy() {
  return Promise.resolve("No");
}

function openFolder(_uri) {
  return Promise.resolve();
}

var Web = {
  determinePlatform: determinePlatform,
  findCommand: findCommand,
  alreadyDownloaded: alreadyDownloaded,
  downloadLatestALS: downloadLatestALS,
  getDownloadDescriptorOfDevALS: getDownloadDescriptorOfDevALS,
  getDownloadDescriptorOfLatestALS: getDownloadDescriptorOfLatestALS,
  askUserAboutDownloadPolicy: askUserAboutDownloadPolicy,
  openFolder: openFolder
};

function make() {
  return Web;
}

function activate(context) {
  return Main$AgdaModeVscode.activate(Web, context);
}

var deactivate = Main$AgdaModeVscode.deactivate;

exports.Web = Web;
exports.make = make;
exports.activate = activate;
exports.deactivate = deactivate;
/* Main-AgdaModeVscode Not a pure module */
