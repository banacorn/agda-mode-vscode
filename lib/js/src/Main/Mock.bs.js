// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var State$AgdaModeVscode = require("../State/State.bs.js");
var Memento$AgdaModeVscode = require("../Memento.bs.js");

var mockAsset = {
  url: "https://mock.url/download.zip",
  id: 123456,
  node_id: "mock_node_id",
  name: "als-Agda-2.6.3-Windows-x64.zip",
  label: "",
  content_type: "application/zip",
  state: "uploaded",
  size: 1000000,
  created_at: "2023-01-01T00:00:00Z",
  updated_at: "2023-01-01T00:00:00Z",
  browser_download_url: "https://mock.url/download.zip"
};

var mockRelease_assets = [mockAsset];

var mockRelease_body = "Mock release";

var mockRelease = {
  url: "https://mock.url/release",
  assets_url: "https://mock.url/assets",
  upload_url: "https://mock.url/upload",
  html_url: "https://mock.url/html",
  id: 789012,
  node_id: "mock_release_node_id",
  tag_name: "v0.2.10",
  target_commitish: "main",
  name: "v0.2.10",
  draft: false,
  prerelease: false,
  created_at: "2023-01-01T00:00:00Z",
  published_at: "2023-01-01T00:00:00Z",
  assets: mockRelease_assets,
  tarball_url: "https://mock.url/tarball",
  zipball_url: "https://mock.url/zipball",
  body: mockRelease_body
};

var mock = {
  release: mockRelease,
  asset: mockAsset,
  saveAsFileName: "als-Agda-2.6.3-Windows-x64"
};

var DownloadDescriptor = {
  mockAsset: mockAsset,
  mockRelease: mockRelease,
  mock: mock
};

async function determinePlatform() {
  return {
          TAG: "Ok",
          _0: "MacOS_Arm"
        };
}

async function askUserAboutDownloadPolicy() {
  return "No";
}

function alreadyDownloaded(_globalStorageUri, param) {
  return Promise.resolve(undefined);
}

function getReleaseManifestFromGitHub(_memento, _repo, $staropt$star) {
  if ($staropt$star === undefined) {
    true;
  }
  return Promise.resolve({
              TAG: "Error",
              _0: "CannotFindCompatibleALSRelease"
            });
}

function getDownloadDescriptorOfDevALS(_memento, _globalStorageUri, _platform) {
  return Promise.resolve({
              TAG: "Error",
              _0: "CannotFindCompatibleALSRelease"
            });
}

function getDownloadDescriptorOfDevWASMALS(_memento, _globalStorageUri) {
  return Promise.resolve({
              TAG: "Error",
              _0: "CannotFindCompatibleALSRelease"
            });
}

function getDownloadDescriptorOfLatestALS(_memento, _globalStorageUri, _platform) {
  return Promise.resolve({
              TAG: "Error",
              _0: "CannotFindCompatibleALSRelease"
            });
}

function download(_globalStorageUri, _downloadDescriptor) {
  return Promise.resolve({
              TAG: "Error",
              _0: "CannotFindCompatibleALSRelease"
            });
}

function findCommand(_command, _timeoutOpt) {
  return Promise.resolve({
              TAG: "Error",
              _0: "NotFound"
            });
}

function openFolder(_uri) {
  return Promise.resolve();
}

var Basic = {
  determinePlatform: determinePlatform,
  askUserAboutDownloadPolicy: askUserAboutDownloadPolicy,
  alreadyDownloaded: alreadyDownloaded,
  getReleaseManifestFromGitHub: getReleaseManifestFromGitHub,
  getDownloadDescriptorOfDevALS: getDownloadDescriptorOfDevALS,
  getDownloadDescriptorOfDevWASMALS: getDownloadDescriptorOfDevWASMALS,
  getDownloadDescriptorOfLatestALS: getDownloadDescriptorOfLatestALS,
  download: download,
  findCommand: findCommand,
  openFolder: openFolder
};

async function determinePlatform$1() {
  return {
          TAG: "Ok",
          _0: "MacOS_Arm"
        };
}

async function askUserAboutDownloadPolicy$1() {
  return "No";
}

function alreadyDownloaded$1(_globalStorageUri, param) {
  return Promise.resolve(undefined);
}

function getReleaseManifestFromGitHub$1(_memento, _repo, $staropt$star) {
  if ($staropt$star === undefined) {
    true;
  }
  return Promise.resolve({
              TAG: "Error",
              _0: "CannotFindCompatibleALSRelease"
            });
}

function getDownloadDescriptorOfDevALS$1(_memento, _globalStorageUri, _platform) {
  return Promise.resolve({
              TAG: "Error",
              _0: "CannotFindCompatibleALSRelease"
            });
}

function getDownloadDescriptorOfDevWASMALS$1(_memento, _globalStorageUri) {
  return Promise.resolve({
              TAG: "Error",
              _0: "CannotFindCompatibleALSRelease"
            });
}

function getDownloadDescriptorOfLatestALS$1(_memento, _globalStorageUri, _platform) {
  return Promise.resolve({
              TAG: "Error",
              _0: "CannotFindCompatibleALSRelease"
            });
}

function download$1(_globalStorageUri, _downloadDescriptor) {
  return Promise.resolve({
              TAG: "Error",
              _0: "CannotFindCompatibleALSRelease"
            });
}

function findCommand$1(_command, _timeoutOpt) {
  return Promise.resolve({
              TAG: "Error",
              _0: "NotFound"
            });
}

function openFolder$1(_uri) {
  return Promise.resolve();
}

var WithAgda = {
  determinePlatform: determinePlatform$1,
  askUserAboutDownloadPolicy: askUserAboutDownloadPolicy$1,
  alreadyDownloaded: alreadyDownloaded$1,
  getReleaseManifestFromGitHub: getReleaseManifestFromGitHub$1,
  getDownloadDescriptorOfDevALS: getDownloadDescriptorOfDevALS$1,
  getDownloadDescriptorOfDevWASMALS: getDownloadDescriptorOfDevWASMALS$1,
  getDownloadDescriptorOfLatestALS: getDownloadDescriptorOfLatestALS$1,
  download: download$1,
  findCommand: findCommand$1,
  openFolder: openFolder$1
};

function makeWithDownloadPolicy(policy) {
  var determinePlatform = async function () {
    return {
            TAG: "Ok",
            _0: "MacOS_Arm"
          };
  };
  var askUserAboutDownloadPolicy = async function () {
    return policy;
  };
  var alreadyDownloaded = function (_globalStorageUri, param) {
    return Promise.resolve(undefined);
  };
  var getReleaseManifestFromGitHub = function (_memento, _repo, $staropt$star) {
    if ($staropt$star === undefined) {
      true;
    }
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfDevALS = function (_memento, _globalStorageUri, _platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfDevWASMALS = function (_memento, _globalStorageUri) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfLatestALS = function (_memento, _globalStorageUri, _platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var download = function (_globalStorageUri, _downloadDescriptor) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var findCommand = function (_command, _timeoutOpt) {
    return Promise.resolve({
                TAG: "Error",
                _0: "NotFound"
              });
  };
  var openFolder = function (_uri) {
    return Promise.resolve();
  };
  return {
          determinePlatform: determinePlatform,
          findCommand: findCommand,
          alreadyDownloaded: alreadyDownloaded,
          getReleaseManifestFromGitHub: getReleaseManifestFromGitHub,
          getDownloadDescriptorOfDevALS: getDownloadDescriptorOfDevALS,
          getDownloadDescriptorOfDevWASMALS: getDownloadDescriptorOfDevWASMALS,
          getDownloadDescriptorOfLatestALS: getDownloadDescriptorOfLatestALS,
          download: download,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy,
          openFolder: openFolder
        };
}

function makeWithDownloadPolicyCounter(policy, counter) {
  var determinePlatform = async function () {
    return {
            TAG: "Ok",
            _0: "MacOS_Arm"
          };
  };
  var askUserAboutDownloadPolicy = async function () {
    counter.contents = counter.contents + 1 | 0;
    return policy;
  };
  var alreadyDownloaded = function (_globalStorageUri, param) {
    return Promise.resolve(undefined);
  };
  var getReleaseManifestFromGitHub = function (_memento, _repo, $staropt$star) {
    if ($staropt$star === undefined) {
      true;
    }
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfDevALS = function (_memento, _globalStorageUri, _platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfDevWASMALS = function (_memento, _globalStorageUri) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfLatestALS = function (_memento, _globalStorageUri, _platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var download = function (_globalStorageUri, _downloadDescriptor) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var findCommand = function (_command, _timeoutOpt) {
    return Promise.resolve({
                TAG: "Error",
                _0: "NotFound"
              });
  };
  var openFolder = function (_uri) {
    return Promise.resolve();
  };
  return {
          determinePlatform: determinePlatform,
          findCommand: findCommand,
          alreadyDownloaded: alreadyDownloaded,
          getReleaseManifestFromGitHub: getReleaseManifestFromGitHub,
          getDownloadDescriptorOfDevALS: getDownloadDescriptorOfDevALS,
          getDownloadDescriptorOfDevWASMALS: getDownloadDescriptorOfDevWASMALS,
          getDownloadDescriptorOfLatestALS: getDownloadDescriptorOfLatestALS,
          download: download,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy,
          openFolder: openFolder
        };
}

function makeWithSuccessfulDownload(downloadedPath) {
  var determinePlatform = async function () {
    return {
            TAG: "Ok",
            _0: "MacOS_Arm"
          };
  };
  var askUserAboutDownloadPolicy = async function () {
    return "Yes";
  };
  var alreadyDownloaded = function (_globalStorageUri, param) {
    return Promise.resolve(undefined);
  };
  var getReleaseManifestFromGitHub = function (_memento, _repo, $staropt$star) {
    if ($staropt$star === undefined) {
      true;
    }
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfDevALS = function (_memento, _globalStorageUri, _platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfDevWASMALS = function (_memento, _globalStorageUri) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfLatestALS = function (_memento, _globalStorageUri, _platform) {
    var mockAsset = {
      url: "https://mock.url/download.zip",
      id: 123456,
      node_id: "mock_node_id",
      name: "als-Agda-2.6.3-macOS-arm64.zip",
      label: "",
      content_type: "application/zip",
      state: "uploaded",
      size: 1000000,
      created_at: "2023-01-01T00:00:00Z",
      updated_at: "2023-01-01T00:00:00Z",
      browser_download_url: "https://mock.url/download.zip"
    };
    var mockRelease_assets = [mockAsset];
    var mockRelease_body = "Mock release";
    var mockRelease = {
      url: "https://mock.url/release",
      assets_url: "https://mock.url/assets",
      upload_url: "https://mock.url/upload",
      html_url: "https://mock.url/html",
      id: 789012,
      node_id: "mock_release_node_id",
      tag_name: "v0.2.10",
      target_commitish: "main",
      name: "v0.2.10",
      draft: false,
      prerelease: false,
      created_at: "2023-01-01T00:00:00Z",
      published_at: "2023-01-01T00:00:00Z",
      assets: mockRelease_assets,
      tarball_url: "https://mock.url/tarball",
      zipball_url: "https://mock.url/zipball",
      body: mockRelease_body
    };
    var mockDownloadDescriptor = {
      release: mockRelease,
      asset: mockAsset,
      saveAsFileName: "als-Agda-2.6.3-macOS-arm64"
    };
    return Promise.resolve({
                TAG: "Ok",
                _0: mockDownloadDescriptor
              });
  };
  var download = function (_globalStorageUri, _downloadDescriptor) {
    return Promise.resolve({
                TAG: "Ok",
                _0: downloadedPath
              });
  };
  var findCommand = function (_command, _timeoutOpt) {
    return Promise.resolve({
                TAG: "Error",
                _0: "NotFound"
              });
  };
  var openFolder = function (_uri) {
    return Promise.resolve();
  };
  return {
          determinePlatform: determinePlatform,
          findCommand: findCommand,
          alreadyDownloaded: alreadyDownloaded,
          getReleaseManifestFromGitHub: getReleaseManifestFromGitHub,
          getDownloadDescriptorOfDevALS: getDownloadDescriptorOfDevALS,
          getDownloadDescriptorOfDevWASMALS: getDownloadDescriptorOfDevWASMALS,
          getDownloadDescriptorOfLatestALS: getDownloadDescriptorOfLatestALS,
          download: download,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy,
          openFolder: openFolder
        };
}

function makeWithPlatformError(platform) {
  var determinePlatform = function () {
    return Promise.resolve({
                TAG: "Error",
                _0: platform
              });
  };
  var askUserAboutDownloadPolicy = async function () {
    return "No";
  };
  var alreadyDownloaded = function (_globalStorageUri, param) {
    return Promise.resolve(undefined);
  };
  var getReleaseManifestFromGitHub = function (_memento, _repo, $staropt$star) {
    if ($staropt$star === undefined) {
      true;
    }
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfDevALS = function (_memento, _globalStorageUri, _platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfDevWASMALS = function (_memento, _globalStorageUri) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfLatestALS = function (_memento, _globalStorageUri, _platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var download = function (_globalStorageUri, _downloadDescriptor) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var findCommand = function (_command, _timeoutOpt) {
    return Promise.resolve({
                TAG: "Error",
                _0: "NotFound"
              });
  };
  var openFolder = function (_uri) {
    return Promise.resolve();
  };
  return {
          determinePlatform: determinePlatform,
          findCommand: findCommand,
          alreadyDownloaded: alreadyDownloaded,
          getReleaseManifestFromGitHub: getReleaseManifestFromGitHub,
          getDownloadDescriptorOfDevALS: getDownloadDescriptorOfDevALS,
          getDownloadDescriptorOfDevWASMALS: getDownloadDescriptorOfDevWASMALS,
          getDownloadDescriptorOfLatestALS: getDownloadDescriptorOfLatestALS,
          download: download,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy,
          openFolder: openFolder
        };
}

function makeWithSuccessfulDownloadAndFlags(downloadedPath, checkedCacheFlag, checkedDownloadFlag) {
  var determinePlatform = async function () {
    return {
            TAG: "Ok",
            _0: "MacOS_Arm"
          };
  };
  var askUserAboutDownloadPolicy = async function () {
    return "Yes";
  };
  var alreadyDownloaded = function (_globalStorageUri, param) {
    checkedCacheFlag.contents = true;
    return Promise.resolve(undefined);
  };
  var getReleaseManifestFromGitHub = function (_memento, _repo, $staropt$star) {
    if ($staropt$star === undefined) {
      true;
    }
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfDevALS = function (_memento, _globalStorageUri, _platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfDevWASMALS = function (_memento, _globalStorageUri) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfLatestALS = function (_memento, _globalStorageUri, _platform) {
    return Promise.resolve({
                TAG: "Ok",
                _0: mock
              });
  };
  var download = function (_globalStorageUri, _downloadDescriptor) {
    checkedDownloadFlag.contents = true;
    return Promise.resolve({
                TAG: "Ok",
                _0: downloadedPath
              });
  };
  var findCommand = function (_command, _timeoutOpt) {
    return Promise.resolve({
                TAG: "Error",
                _0: "NotFound"
              });
  };
  var openFolder = function (_uri) {
    return Promise.resolve();
  };
  return {
          determinePlatform: determinePlatform,
          findCommand: findCommand,
          alreadyDownloaded: alreadyDownloaded,
          getReleaseManifestFromGitHub: getReleaseManifestFromGitHub,
          getDownloadDescriptorOfDevALS: getDownloadDescriptorOfDevALS,
          getDownloadDescriptorOfDevWASMALS: getDownloadDescriptorOfDevWASMALS,
          getDownloadDescriptorOfLatestALS: getDownloadDescriptorOfLatestALS,
          download: download,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy,
          openFolder: openFolder
        };
}

function makeWithCachedDownloadAndFlag(cachedPath, checkedFlag) {
  var determinePlatform = async function () {
    return {
            TAG: "Ok",
            _0: "MacOS_Arm"
          };
  };
  var askUserAboutDownloadPolicy = async function () {
    return "Yes";
  };
  var alreadyDownloaded = function (_globalStorageUri, param) {
    checkedFlag.contents = true;
    return Promise.resolve(cachedPath);
  };
  var getReleaseManifestFromGitHub = function (_memento, _repo, $staropt$star) {
    if ($staropt$star === undefined) {
      true;
    }
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfDevALS = function (_memento, _globalStorageUri, _platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfDevWASMALS = function (_memento, _globalStorageUri) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfLatestALS = function (_memento, _globalStorageUri, _platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var download = function (_globalStorageUri, _downloadDescriptor) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var findCommand = function (_command, _timeoutOpt) {
    return Promise.resolve({
                TAG: "Error",
                _0: "NotFound"
              });
  };
  var openFolder = function (_uri) {
    return Promise.resolve();
  };
  return {
          determinePlatform: determinePlatform,
          findCommand: findCommand,
          alreadyDownloaded: alreadyDownloaded,
          getReleaseManifestFromGitHub: getReleaseManifestFromGitHub,
          getDownloadDescriptorOfDevALS: getDownloadDescriptorOfDevALS,
          getDownloadDescriptorOfDevWASMALS: getDownloadDescriptorOfDevWASMALS,
          getDownloadDescriptorOfLatestALS: getDownloadDescriptorOfLatestALS,
          download: download,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy,
          openFolder: openFolder
        };
}

function makeBasic() {
  return {
          determinePlatform: determinePlatform,
          findCommand: findCommand,
          alreadyDownloaded: alreadyDownloaded,
          getReleaseManifestFromGitHub: getReleaseManifestFromGitHub,
          getDownloadDescriptorOfDevALS: getDownloadDescriptorOfDevALS,
          getDownloadDescriptorOfDevWASMALS: getDownloadDescriptorOfDevWASMALS,
          getDownloadDescriptorOfLatestALS: getDownloadDescriptorOfLatestALS,
          download: download,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy,
          openFolder: openFolder
        };
}

function makeWithDownloadFailureAndFlags(checkedCacheFlag, checkedDownloadFlag) {
  var determinePlatform = async function () {
    return {
            TAG: "Ok",
            _0: "Windows"
          };
  };
  var askUserAboutDownloadPolicy = async function () {
    return "Yes";
  };
  var alreadyDownloaded = function (_globalStorageUri, param) {
    checkedCacheFlag.contents = true;
    return Promise.resolve(undefined);
  };
  var getReleaseManifestFromGitHub = function (_memento, _repo, $staropt$star) {
    if ($staropt$star === undefined) {
      true;
    }
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfDevALS = function (_memento, _globalStorageUri, _platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfDevWASMALS = function (_memento, _globalStorageUri) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var getDownloadDescriptorOfLatestALS = function (_memento, _globalStorageUri, _platform) {
    return Promise.resolve({
                TAG: "Ok",
                _0: mock
              });
  };
  var download = function (_globalStorageUri, _downloadDescriptor) {
    checkedDownloadFlag.contents = true;
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
  var findCommand = function (_command, _timeoutOpt) {
    return Promise.resolve({
                TAG: "Error",
                _0: "NotFound"
              });
  };
  var openFolder = function (_uri) {
    return Promise.resolve();
  };
  return {
          determinePlatform: determinePlatform,
          findCommand: findCommand,
          alreadyDownloaded: alreadyDownloaded,
          getReleaseManifestFromGitHub: getReleaseManifestFromGitHub,
          getDownloadDescriptorOfDevALS: getDownloadDescriptorOfDevALS,
          getDownloadDescriptorOfDevWASMALS: getDownloadDescriptorOfDevWASMALS,
          getDownloadDescriptorOfLatestALS: getDownloadDescriptorOfLatestALS,
          download: download,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy,
          openFolder: openFolder
        };
}

function makeWithAgda() {
  return {
          determinePlatform: determinePlatform$1,
          findCommand: findCommand$1,
          alreadyDownloaded: alreadyDownloaded$1,
          getReleaseManifestFromGitHub: getReleaseManifestFromGitHub$1,
          getDownloadDescriptorOfDevALS: getDownloadDescriptorOfDevALS$1,
          getDownloadDescriptorOfDevWASMALS: getDownloadDescriptorOfDevWASMALS$1,
          getDownloadDescriptorOfLatestALS: getDownloadDescriptorOfLatestALS$1,
          download: download$1,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy$1,
          openFolder: openFolder$1
        };
}

var Platform = {
  Basic: Basic,
  WithAgda: WithAgda,
  makeWithDownloadPolicy: makeWithDownloadPolicy,
  makeWithDownloadPolicyCounter: makeWithDownloadPolicyCounter,
  makeWithSuccessfulDownload: makeWithSuccessfulDownload,
  makeWithPlatformError: makeWithPlatformError,
  makeWithSuccessfulDownloadAndFlags: makeWithSuccessfulDownloadAndFlags,
  makeWithCachedDownloadAndFlag: makeWithCachedDownloadAndFlag,
  makeBasic: makeBasic,
  makeWithDownloadFailureAndFlags: makeWithDownloadFailureAndFlags,
  makeWithAgda: makeWithAgda
};

function make() {
  return {
          inputMethod: Chan$AgdaModeVscode.make(),
          responseHandled: Chan$AgdaModeVscode.make(),
          commandHandled: Chan$AgdaModeVscode.make(),
          log: Chan$AgdaModeVscode.make()
        };
}

var Channels = {
  make: make
};

function make$1(platformDeps, channels) {
  var mockEditor = {
      document: { fileName: "test.agda" }
    };
  var mockUri = Vscode.Uri.file("/test/path");
  return State$AgdaModeVscode.make(platformDeps, channels, mockUri, mockUri, Memento$AgdaModeVscode.make(undefined), mockEditor, undefined);
}

var State = {
  make: make$1
};

exports.DownloadDescriptor = DownloadDescriptor;
exports.Platform = Platform;
exports.Channels = Channels;
exports.State = State;
/* vscode Not a pure module */
