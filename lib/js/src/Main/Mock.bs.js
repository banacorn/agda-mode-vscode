// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var State$AgdaModeVscode = require("../State/State.bs.js");
var Connection__URI$AgdaModeVscode = require("../Connection/Shared/Connection__URI.bs.js");
var Connection__Endpoint$AgdaModeVscode = require("../Connection/Endpoint/Connection__Endpoint.bs.js");

async function determinePlatform() {
  return {
          TAG: "Ok",
          _0: "MacOS_Arm"
        };
}

async function askUserAboutDownloadPolicy() {
  return "No";
}

function alreadyDownloaded(_globalStorageUri) {
  return function () {
    return Promise.resolve(undefined);
  };
}

function alreadyDownloaded2(_globalStorageUri) {
  return function () {
    return Promise.resolve(undefined);
  };
}

function downloadLatestALS(_memento, _globalStorageUri) {
  return function (_platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
}

function downloadLatestALS2(_memento, _globalStorageUri) {
  return function (_platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
}

function getInstalledEndpointsAndPersistThem(_globalStorageUri) {
  return Promise.resolve(Object.fromEntries([]));
}

function getInstalledEndpointsAndPersistThem2(_globalStorageUri) {
  return Promise.resolve({});
}

function findCommand(_command, _timeoutOpt) {
  return Promise.resolve({
              TAG: "Error",
              _0: "NotFound"
            });
}

async function findCommands(commands) {
  return {
          TAG: "Error",
          _0: Object.fromEntries(commands.map(function (command) {
                    return [
                            command,
                            "NotFound"
                          ];
                  }))
        };
}

var Basic = {
  determinePlatform: determinePlatform,
  askUserAboutDownloadPolicy: askUserAboutDownloadPolicy,
  alreadyDownloaded: alreadyDownloaded,
  alreadyDownloaded2: alreadyDownloaded2,
  downloadLatestALS: downloadLatestALS,
  downloadLatestALS2: downloadLatestALS2,
  getInstalledEndpointsAndPersistThem: getInstalledEndpointsAndPersistThem,
  getInstalledEndpointsAndPersistThem2: getInstalledEndpointsAndPersistThem2,
  findCommand: findCommand,
  findCommands: findCommands
};

async function determinePlatform$1() {
  return {
          TAG: "Ok",
          _0: "MacOS_Arm"
        };
}

async function askUserAboutDownloadPolicy$1() {
  return "No";
}

function alreadyDownloaded$1(_globalStorageUri) {
  return function () {
    return Promise.resolve(undefined);
  };
}

function alreadyDownloaded2$1(_globalStorageUri) {
  return function () {
    return Promise.resolve(undefined);
  };
}

function downloadLatestALS$1(_memento, _globalStorageUri) {
  return function (_platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
}

function downloadLatestALS2$1(_memento, _globalStorageUri) {
  return function (_platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
}

function getInstalledEndpointsAndPersistThem$1(_globalStorageUri) {
  var endpoints = {};
  endpoints["/usr/bin/agda"] = {
    TAG: "Ok",
    _0: {
      TAG: "Agda",
      _0: "2.6.4",
      _1: "/usr/bin/agda"
    }
  };
  return Promise.resolve(endpoints);
}

function getInstalledEndpointsAndPersistThem2$1(_globalStorageUri) {
  var endpoints = {};
  endpoints["/usr/bin/agda"] = {
    TAG: "Agda",
    _0: "2.6.4"
  };
  return Promise.resolve(endpoints);
}

function findCommand$1(_command, _timeoutOpt) {
  return Promise.resolve({
              TAG: "Error",
              _0: "NotFound"
            });
}

async function findCommands$1(commands) {
  if (commands.includes("agda")) {
    return {
            TAG: "Ok",
            _0: {
              TAG: "Agda",
              _0: "2.6.4",
              _1: "/usr/bin/agda"
            }
          };
  } else {
    return {
            TAG: "Error",
            _0: Object.fromEntries(commands.map(function (command) {
                      return [
                              command,
                              "NotFound"
                            ];
                    }))
          };
  }
}

var WithAgda = {
  determinePlatform: determinePlatform$1,
  askUserAboutDownloadPolicy: askUserAboutDownloadPolicy$1,
  alreadyDownloaded: alreadyDownloaded$1,
  alreadyDownloaded2: alreadyDownloaded2$1,
  downloadLatestALS: downloadLatestALS$1,
  downloadLatestALS2: downloadLatestALS2$1,
  getInstalledEndpointsAndPersistThem: getInstalledEndpointsAndPersistThem$1,
  getInstalledEndpointsAndPersistThem2: getInstalledEndpointsAndPersistThem2$1,
  findCommand: findCommand$1,
  findCommands: findCommands$1
};

function makeWithDownloadPolicy(policy) {
  var determinePlatform = async function () {
    return {
            TAG: "Ok",
            _0: "MacOS_Arm"
          };
  };
  var askUserAboutDownloadPolicy = async function () {
    return policy;
  };
  var alreadyDownloaded = function (_globalStorageUri) {
    return function () {
      return Promise.resolve(undefined);
    };
  };
  var alreadyDownloaded2 = function (_globalStorageUri) {
    return function () {
      return Promise.resolve(undefined);
    };
  };
  var downloadLatestALS = function (_memento, _globalStorageUri) {
    return function (_platform) {
      return Promise.resolve({
                  TAG: "Error",
                  _0: "CannotFindCompatibleALSRelease"
                });
    };
  };
  var downloadLatestALS2 = function (_memento, _globalStorageUri) {
    return function (_platform) {
      return Promise.resolve({
                  TAG: "Error",
                  _0: "CannotFindCompatibleALSRelease"
                });
    };
  };
  var getInstalledEndpointsAndPersistThem = function (_globalStorageUri) {
    return Promise.resolve(Object.fromEntries([]));
  };
  var getInstalledEndpointsAndPersistThem2 = function (_globalStorageUri) {
    return Promise.resolve({});
  };
  var findCommand = function (_command, _timeoutOpt) {
    return Promise.resolve({
                TAG: "Error",
                _0: "NotFound"
              });
  };
  var findCommands = async function (commands) {
    return {
            TAG: "Error",
            _0: Object.fromEntries(commands.map(function (command) {
                      return [
                              command,
                              "NotFound"
                            ];
                    }))
          };
  };
  return {
          determinePlatform: determinePlatform,
          findCommands: findCommands,
          findCommand: findCommand,
          alreadyDownloaded: alreadyDownloaded,
          alreadyDownloaded2: alreadyDownloaded2,
          downloadLatestALS: downloadLatestALS,
          downloadLatestALS2: downloadLatestALS2,
          getInstalledEndpointsAndPersistThem: getInstalledEndpointsAndPersistThem,
          getInstalledEndpointsAndPersistThem2: getInstalledEndpointsAndPersistThem2,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy
        };
}

function makeWithSuccessfulDownload(downloadedEndpoint) {
  var determinePlatform = async function () {
    return {
            TAG: "Ok",
            _0: "MacOS_Arm"
          };
  };
  var askUserAboutDownloadPolicy = async function () {
    return "Yes";
  };
  var alreadyDownloaded = function (_globalStorageUri) {
    return function () {
      return Promise.resolve(undefined);
    };
  };
  var alreadyDownloaded2 = function (_globalStorageUri) {
    return function () {
      return Promise.resolve(undefined);
    };
  };
  var downloadLatestALS = function (_memento, _globalStorageUri) {
    return function (_platform) {
      return Promise.resolve({
                  TAG: "Ok",
                  _0: downloadedEndpoint
                });
    };
  };
  var downloadLatestALS2 = function (_memento, _globalStorageUri) {
    return function (_platform) {
      return Promise.resolve({
                  TAG: "Ok",
                  _0: Connection__URI$AgdaModeVscode.toString(Connection__Endpoint$AgdaModeVscode.toURI(downloadedEndpoint))
                });
    };
  };
  var getInstalledEndpointsAndPersistThem = function (_globalStorageUri) {
    return Promise.resolve(Object.fromEntries([]));
  };
  var getInstalledEndpointsAndPersistThem2 = function (_globalStorageUri) {
    return Promise.resolve({});
  };
  var findCommand = function (_command, _timeoutOpt) {
    return Promise.resolve({
                TAG: "Error",
                _0: "NotFound"
              });
  };
  var findCommands = async function (commands) {
    return {
            TAG: "Error",
            _0: Object.fromEntries(commands.map(function (command) {
                      return [
                              command,
                              "NotFound"
                            ];
                    }))
          };
  };
  return {
          determinePlatform: determinePlatform,
          findCommands: findCommands,
          findCommand: findCommand,
          alreadyDownloaded: alreadyDownloaded,
          alreadyDownloaded2: alreadyDownloaded2,
          downloadLatestALS: downloadLatestALS,
          downloadLatestALS2: downloadLatestALS2,
          getInstalledEndpointsAndPersistThem: getInstalledEndpointsAndPersistThem,
          getInstalledEndpointsAndPersistThem2: getInstalledEndpointsAndPersistThem2,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy
        };
}

function makeBasic() {
  return {
          determinePlatform: determinePlatform,
          findCommands: findCommands,
          findCommand: findCommand,
          alreadyDownloaded: alreadyDownloaded,
          alreadyDownloaded2: alreadyDownloaded2,
          downloadLatestALS: downloadLatestALS,
          downloadLatestALS2: downloadLatestALS2,
          getInstalledEndpointsAndPersistThem: getInstalledEndpointsAndPersistThem,
          getInstalledEndpointsAndPersistThem2: getInstalledEndpointsAndPersistThem2,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy
        };
}

function makeWithAgda() {
  return {
          determinePlatform: determinePlatform$1,
          findCommands: findCommands$1,
          findCommand: findCommand$1,
          alreadyDownloaded: alreadyDownloaded$1,
          alreadyDownloaded2: alreadyDownloaded2$1,
          downloadLatestALS: downloadLatestALS$1,
          downloadLatestALS2: downloadLatestALS2$1,
          getInstalledEndpointsAndPersistThem: getInstalledEndpointsAndPersistThem$1,
          getInstalledEndpointsAndPersistThem2: getInstalledEndpointsAndPersistThem2$1,
          askUserAboutDownloadPolicy: askUserAboutDownloadPolicy$1
        };
}

var Platform = {
  Basic: Basic,
  WithAgda: WithAgda,
  makeWithDownloadPolicy: makeWithDownloadPolicy,
  makeWithSuccessfulDownload: makeWithSuccessfulDownload,
  makeBasic: makeBasic,
  makeWithAgda: makeWithAgda
};

function make() {
  return {
          inputMethod: Chan$AgdaModeVscode.make(),
          responseHandled: Chan$AgdaModeVscode.make(),
          commandHandled: Chan$AgdaModeVscode.make(),
          log: Chan$AgdaModeVscode.make()
        };
}

var Channels = {
  make: make
};

function make$1(platformDeps, channels) {
  var mockEditor = {
      document: { fileName: "test.agda" }
    };
  var mockUri = Vscode.Uri.file("/test/path");
  return State$AgdaModeVscode.make(platformDeps, channels, mockUri, mockUri, undefined, mockEditor, undefined);
}

var State = {
  make: make$1
};

exports.Platform = Platform;
exports.Channels = Channels;
exports.State = State;
/* vscode Not a pure module */
