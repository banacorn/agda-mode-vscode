// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var FS$AgdaModeVscode = require("../FS.bs.js");
var Main$AgdaModeVscode = require("./Main.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Connection__DevALS$AgdaModeVscode = require("../Connection/Download/Connection__DevALS.bs.js");
var Connection__Command$AgdaModeVscode = require("../Connection/Resolver/Connection__Command.bs.js");
var Connection__Download$AgdaModeVscode = require("../Connection/Download/Connection__Download.bs.js");
var Connection__LatestALS$AgdaModeVscode = require("../Connection/Download/Connection__LatestALS.bs.js");
var Connection__Download__Platform$AgdaModeVscode = require("../Connection/Download/Connection__Download__Platform.bs.js");

async function alreadyDownloaded(globalStorageUri, order) {
  if (order === "LatestALS") {
    var uri = Vscode.Uri.joinPath(globalStorageUri, "latest-als", "als");
    var match = await FS$AgdaModeVscode.stat(uri);
    if (match.TAG === "Ok") {
      return uri.fsPath;
    } else {
      return ;
    }
  }
  var alsUri = Vscode.Uri.joinPath(globalStorageUri, "dev-als", "als");
  var match$1 = await FS$AgdaModeVscode.stat(alsUri);
  if (match$1.TAG === "Ok") {
    return alsUri.fsPath;
  }
  
}

function resolveDownloadOrder(order, useCache) {
  return async function (memento, globalStorageUri, platform) {
    var repo;
    repo = order === "LatestALS" ? Connection__LatestALS$AgdaModeVscode.makeRepo(globalStorageUri) : Connection__DevALS$AgdaModeVscode.makeRepo(globalStorageUri);
    var toDownloadOrder;
    toDownloadOrder = order === "LatestALS" ? (function (__x) {
          return Connection__LatestALS$AgdaModeVscode.toDownloadOrder(__x, platform);
        }) : (function (__x) {
          return Connection__DevALS$AgdaModeVscode.toDownloadOrder(__x, platform);
        });
    var error = await Connection__Download$AgdaModeVscode.getReleaseManifestFromGitHub(memento, repo, useCache);
    if (error.TAG === "Ok") {
      return toDownloadOrder(error._0);
    } else {
      return {
              TAG: "Error",
              _0: error._0
            };
    }
  };
}

async function askUserAboutDownloadPolicy() {
  var result = await Vscode.window.showWarningMessage("Cannot find Agda or Agda Language Server", {
        modal: true,
        detail: "Do you want to download and install the latest Agda Language Server?"
      }, Config$AgdaModeVscode.Connection.DownloadPolicy.toString("Yes"), Config$AgdaModeVscode.Connection.DownloadPolicy.toString("No"));
  return Core__Option.mapOr(result, "No", Config$AgdaModeVscode.Connection.DownloadPolicy.fromString);
}

var Desktop = {
  determinePlatform: Connection__Download__Platform$AgdaModeVscode.determine,
  findCommand: Connection__Command$AgdaModeVscode.search,
  alreadyDownloaded: alreadyDownloaded,
  resolveDownloadOrder: resolveDownloadOrder,
  download: Connection__Download$AgdaModeVscode.download,
  askUserAboutDownloadPolicy: askUserAboutDownloadPolicy
};

function make() {
  return Desktop;
}

function activate(context) {
  return Main$AgdaModeVscode.activate(Desktop, context);
}

var deactivate = Main$AgdaModeVscode.deactivate;

exports.Desktop = Desktop;
exports.make = make;
exports.activate = activate;
exports.deactivate = deactivate;
/* vscode Not a pure module */
