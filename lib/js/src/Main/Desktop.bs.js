// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Nodepath = require("node:path");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var FS$AgdaModeVscode = require("../FS.bs.js");
var Main$AgdaModeVscode = require("./Main.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Connection__URI$AgdaModeVscode = require("../Connection/Shared/Connection__URI.bs.js");
var Connection__Command$AgdaModeVscode = require("../Connection/Resolver/Connection__Command.bs.js");
var Connection__Command2$AgdaModeVscode = require("../Connection/Resolver/Connection__Command2.bs.js");
var Connection__Endpoint$AgdaModeVscode = require("../Connection/Endpoint/Connection__Endpoint.bs.js");
var Connection__LatestALS$AgdaModeVscode = require("../Connection/Resolver/Connection__LatestALS.bs.js");
var Connection__Download__Platform$AgdaModeVscode = require("../Connection/Resolver/Download/Connection__Download__Platform.bs.js");

function alreadyDownloaded(globalStorageUri) {
  return async function () {
    var endpoint = await Connection__LatestALS$AgdaModeVscode.alreadyDownloaded(globalStorageUri)();
    if (endpoint !== undefined) {
      return Connection__URI$AgdaModeVscode.toString(Connection__Endpoint$AgdaModeVscode.toURI(endpoint));
    }
    
  };
}

function downloadLatestALS(memento, globalStorageUri) {
  return async function (platform) {
    var endpoint = await Connection__LatestALS$AgdaModeVscode.download(memento, globalStorageUri)(platform);
    if (endpoint.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: endpoint._0
            };
    } else {
      return {
              TAG: "Error",
              _0: endpoint._0
            };
    }
  };
}

async function getInstalledEndpointsAndPersistThem(globalStorageUri) {
  var pairs = await Promise.all(Config$AgdaModeVscode.Connection.getAgdaPaths().map(async function (uri) {
            var target = await Connection__Endpoint$AgdaModeVscode.fromURI(uri);
            return [
                    Connection__URI$AgdaModeVscode.toString(uri),
                    target
                  ];
          }));
  var dict = Object.fromEntries(pairs);
  var agda = await Connection__Command$AgdaModeVscode.findCommands(["agda"]);
  if (agda.TAG === "Ok") {
    var agda$1 = agda._0;
    var uri = Connection__Endpoint$AgdaModeVscode.toURI(agda$1);
    await Config$AgdaModeVscode.Connection.addAgdaPath(uri);
    dict[Connection__URI$AgdaModeVscode.toString(uri)] = {
      TAG: "Ok",
      _0: agda$1
    };
  }
  var als = await Connection__Command$AgdaModeVscode.findCommands(["als"]);
  if (als.TAG === "Ok") {
    var als$1 = als._0;
    var uri$1 = Connection__Endpoint$AgdaModeVscode.toURI(als$1);
    await Config$AgdaModeVscode.Connection.addAgdaPath(uri$1);
    dict[Connection__URI$AgdaModeVscode.toString(uri$1)] = {
      TAG: "Ok",
      _0: als$1
    };
  }
  var addAgdaOrALS = async function (folderURI, fileName) {
    var executablePath = Vscode.Uri.joinPath(folderURI, fileName);
    var target = await Connection__Endpoint$AgdaModeVscode.fromRawPath(executablePath.fsPath);
    if (target.TAG !== "Ok") {
      return ;
    }
    var target$1 = target._0;
    var uri = Connection__Endpoint$AgdaModeVscode.toURI(target$1);
    await Config$AgdaModeVscode.Connection.addAgdaPath(uri);
    dict[Connection__URI$AgdaModeVscode.toString(uri)] = {
      TAG: "Ok",
      _0: target$1
    };
  };
  var handleFile = function (folderPath) {
    return async function (param) {
      var filename = param[0];
      switch (filename) {
        case "agda" :
        case "agda.exe" :
        case "als" :
        case "als.exe " :
            break;
        default:
          return ;
      }
      return await addAgdaOrALS(folderPath, filename);
    };
  };
  var handleFolder = async function (param) {
    var uri = Vscode.Uri.joinPath(globalStorageUri, param[0]);
    var files = await FS$AgdaModeVscode.readDirectory(uri);
    if (files.TAG !== "Ok") {
      return ;
    }
    await Promise.all(files._0.map(handleFile(uri)));
  };
  var folders = await FS$AgdaModeVscode.readDirectory(globalStorageUri);
  if (folders.TAG === "Ok") {
    await Promise.all(folders._0.map(handleFolder));
  }
  return dict;
}

async function getInstalledEndpointsAndPersistThem2(globalStorageUri) {
  var endpoints = {};
  var inferEndpointType = function (filename) {
    var baseName = Nodepath.basename(filename.toLowerCase());
    var cleanName = baseName.replace(".exe", "").replace(".cmd", "").replace(".bat", "");
    if (cleanName === "agda" || cleanName.startsWith("agda-")) {
      return {
              TAG: "Agda",
              _0: undefined
            };
    } else if (cleanName === "als" || cleanName.startsWith("als-")) {
      return {
              TAG: "ALS",
              _0: undefined
            };
    } else {
      return "Unknown";
    }
  };
  Config$AgdaModeVscode.Connection.getAgdaPaths2().forEach(function (path) {
        var filename = Nodepath.basename(path);
        var endpoint = inferEndpointType(filename);
        endpoints[path] = endpoint;
      });
  var path = await Connection__Command2$AgdaModeVscode.findCommands(["agda"]);
  if (path.TAG === "Ok") {
    endpoints[path._0] = {
      TAG: "Agda",
      _0: undefined
    };
  }
  var path$1 = await Connection__Command2$AgdaModeVscode.findCommands(["als"]);
  if (path$1.TAG === "Ok") {
    endpoints[path$1._0] = {
      TAG: "ALS",
      _0: undefined
    };
  }
  var addAgdaOrALS = async function (folderURI, fileName) {
    var executablePath = Vscode.Uri.joinPath(folderURI, fileName);
    var path = executablePath.fsPath;
    var endpoint = inferEndpointType(fileName);
    endpoints[path] = endpoint;
  };
  var handleFile = function (folderPath) {
    return async function (param) {
      var filename = param[0];
      switch (filename) {
        case "agda" :
        case "agda.exe" :
        case "als" :
        case "als.exe " :
            break;
        default:
          return ;
      }
      return await addAgdaOrALS(folderPath, filename);
    };
  };
  var handleFolder = async function (param) {
    var uri = Vscode.Uri.joinPath(globalStorageUri, param[0]);
    var files = await FS$AgdaModeVscode.readDirectory(uri);
    if (files.TAG !== "Ok") {
      return ;
    }
    await Promise.all(files._0.map(handleFile(uri)));
  };
  var folders = await FS$AgdaModeVscode.readDirectory(globalStorageUri);
  if (folders.TAG === "Ok") {
    await Promise.all(folders._0.map(handleFolder));
  }
  return endpoints;
}

async function askUserAboutDownloadPolicy() {
  var result = await Vscode.window.showWarningMessage("Cannot find Agda or Agda Language Server", {
        modal: true,
        detail: "Do you want to download and install the latest Agda Language Server?"
      }, Config$AgdaModeVscode.Connection.DownloadPolicy.toString("Yes"), Config$AgdaModeVscode.Connection.DownloadPolicy.toString("No"));
  return Core__Option.mapOr(result, "No", Config$AgdaModeVscode.Connection.DownloadPolicy.fromString);
}

var Desktop = {
  determinePlatform: Connection__Download__Platform$AgdaModeVscode.determine,
  findCommands: Connection__Command$AgdaModeVscode.findCommands,
  findCommand: Connection__Command$AgdaModeVscode.findCommand,
  alreadyDownloaded: alreadyDownloaded,
  downloadLatestALS: downloadLatestALS,
  getInstalledEndpointsAndPersistThem: getInstalledEndpointsAndPersistThem,
  getInstalledEndpointsAndPersistThem2: getInstalledEndpointsAndPersistThem2,
  askUserAboutDownloadPolicy: askUserAboutDownloadPolicy
};

function make() {
  return Desktop;
}

function activate(context) {
  return Main$AgdaModeVscode.activate(Desktop, context);
}

var deactivate = Main$AgdaModeVscode.deactivate;

exports.Desktop = Desktop;
exports.make = make;
exports.activate = activate;
exports.deactivate = deactivate;
/* vscode Not a pure module */
