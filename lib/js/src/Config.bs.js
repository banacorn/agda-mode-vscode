// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Parser$AgdaModeVscode = require("./Parser/Parser.bs.js");
var Connection__URI$AgdaModeVscode = require("./Connection/Connection__URI.bs.js");

var inTestingMode = {
  contents: false
};

function parseFromConfig(configValue) {
  if (configValue !== undefined && !(!Array.isArray(configValue) && (configValue === null || typeof configValue !== "object") && typeof configValue !== "number" && typeof configValue !== "string" && typeof configValue !== "boolean" || !(typeof configValue === "boolean" && configValue))) {
    return true;
  } else {
    return false;
  }
}

function get() {
  return parseFromConfig(Vscode.workspace.getConfiguration("agdaMode", undefined).get("devMode.enabled"));
}

function set(value) {
  return Vscode.workspace.getConfiguration("agdaMode", undefined).update("devMode.enabled", value, 1, undefined);
}

var DevMode = {
  defaultValue: false,
  parseFromConfig: parseFromConfig,
  get: get,
  set: set
};

var agdaVersionInTestingMode = {
  contents: "agda"
};

var agdaPathsInTestingMode = {
  contents: []
};

var useAgdaLanguageServerInTestingMode = {
  contents: false
};

function setAgdaVersion(path) {
  if (inTestingMode.contents) {
    agdaVersionInTestingMode.contents = path;
    return Promise.resolve();
  } else {
    return Vscode.workspace.getConfiguration("agdaMode", undefined).update("connection.agdaVersion", path, 1, undefined);
  }
}

function getAgdaVersion() {
  if (inTestingMode.contents) {
    return agdaVersionInTestingMode.contents;
  } else {
    return Core__Option.getOr(Core__Option.flatMap(Core__Option.map(Vscode.workspace.getConfiguration("agdaMode", undefined).get("connection.agdaVersion"), (function (prim) {
                          return prim.trim();
                        })), (function (s) {
                      if (s === "") {
                        return ;
                      } else {
                        return s;
                      }
                    })), "agda");
  }
}

function setAgdaPaths(paths) {
  if (inTestingMode.contents) {
    agdaPathsInTestingMode.contents = paths;
    return Promise.resolve();
  }
  var paths$1 = paths.map(Connection__URI$AgdaModeVscode.toString);
  return Vscode.workspace.getConfiguration("agdaMode", undefined).update("connection.paths", paths$1, 1, undefined);
}

function parseAgdaPaths(raw) {
  var tmp;
  tmp = !Array.isArray(raw) && (raw === null || typeof raw !== "object") && typeof raw !== "number" && typeof raw !== "string" && typeof raw !== "boolean" ? [] : (
      Array.isArray(raw) ? Core__Array.filterMap(raw, (function (s) {
                if (!Array.isArray(s) && (s === null || typeof s !== "object") && typeof s !== "number" && typeof s !== "string" && typeof s !== "boolean" || typeof s !== "string") {
                  return ;
                } else {
                  return s;
                }
              })) : []
    );
  return tmp.toReversed();
}

function getAgdaPaths() {
  if (inTestingMode.contents) {
    return agdaPathsInTestingMode.contents;
  }
  var paths = parseAgdaPaths(Core__Option.getOr(Vscode.workspace.getConfiguration("agdaMode", undefined).get("connection.paths"), null));
  return paths.map(Connection__URI$AgdaModeVscode.parse);
}

function addAgdaPath(path) {
  var paths = getAgdaPaths();
  var alreadyExists = Core__Array.reduce(paths, false, (function (acc, p) {
          if (acc) {
            return true;
          } else {
            return Connection__URI$AgdaModeVscode.equal(p, path);
          }
        }));
  if (alreadyExists) {
    return Promise.resolve();
  }
  var newPaths = paths.concat([path]);
  if (inTestingMode.contents) {
    agdaPathsInTestingMode.contents = newPaths;
    return Promise.resolve();
  }
  var newPaths$1 = newPaths.map(Connection__URI$AgdaModeVscode.toString);
  return Vscode.workspace.getConfiguration("agdaMode", undefined).update("connection.paths", newPaths$1, 1, undefined);
}

function getCommandLineOptions() {
  return Core__Option.mapOr(Vscode.workspace.getConfiguration("agdaMode", undefined).get("connection.commandLineOptions"), [], (function (s) {
                  return s.trim().split(" ");
                })).filter(function (s) {
              return s.trim() !== "";
            });
}

function getAgdaLanguageServerPort() {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("connection.agdaLanguageServerPort");
  if (raw !== undefined) {
    return Caml_option.valFromOption(raw);
  } else {
    return 4096;
  }
}

function getAgdaLanguageServerCommandLineOptions() {
  return Core__Option.mapOr(Vscode.workspace.getConfiguration("agdaMode", undefined).get("connection.agdaLanguageServerOptions"), [], (function (s) {
                  return s.trim().split(" ");
                })).filter(function (s) {
              return s.trim() !== "";
            });
}

var testingMode = {
  contents: "Undecided"
};

function toString(policy) {
  switch (policy) {
    case "Yes" :
        return "Yes";
    case "No" :
        return "No, and don't ask again";
    case "Undecided" :
        return "Undecided";
    
  }
}

function fromString(s) {
  switch (s) {
    case "No, and don't ask again" :
        return "No";
    case "Yes" :
        return "Yes";
    default:
      return "Undecided";
  }
}

function get$1() {
  if (inTestingMode.contents) {
    return testingMode.contents;
  } else {
    return Core__Option.mapOr(Vscode.workspace.getConfiguration("agdaMode", undefined).get("connection.downloadPolicy"), "Undecided", fromString);
  }
}

function set$1(policy) {
  if (inTestingMode.contents) {
    testingMode.contents = policy;
    return Promise.resolve();
  } else {
    return Vscode.workspace.getConfiguration("agdaMode", undefined).update("connection.downloadPolicy", toString(policy), 1, undefined);
  }
}

var DownloadPolicy = {
  testingMode: testingMode,
  toString: toString,
  fromString: fromString,
  get: get$1,
  set: set$1
};

var Connection = {
  agdaVersionInTestingMode: agdaVersionInTestingMode,
  agdaPathsInTestingMode: agdaPathsInTestingMode,
  useAgdaLanguageServerInTestingMode: useAgdaLanguageServerInTestingMode,
  setAgdaVersion: setAgdaVersion,
  getAgdaVersion: getAgdaVersion,
  setAgdaPaths: setAgdaPaths,
  parseAgdaPaths: parseAgdaPaths,
  getAgdaPaths: getAgdaPaths,
  addAgdaPath: addAgdaPath,
  getCommandLineOptions: getCommandLineOptions,
  getAgdaLanguageServerPort: getAgdaLanguageServerPort,
  getAgdaLanguageServerCommandLineOptions: getAgdaLanguageServerCommandLineOptions,
  DownloadPolicy: DownloadPolicy
};

function setPanelMountingPosition(mountAt) {
  var tmp;
  tmp = mountAt === "Bottom" ? "bottom" : "right";
  return Vscode.workspace.getConfiguration("agdaMode", undefined).update("view.panelMountPosition", tmp, 1, undefined);
}

function getPanelMountingPosition() {
  var result = Vscode.workspace.getConfiguration("agdaMode", undefined).get("view.panelMountPosition");
  if (result === "right") {
    return "Right";
  } else {
    return "Bottom";
  }
}

var View = {
  setPanelMountingPosition: setPanelMountingPosition,
  getPanelMountingPosition: getPanelMountingPosition
};

function getLibraryPath() {
  var raw = Core__Option.getOr(Vscode.workspace.getConfiguration("agdaMode", undefined).get("libraryPath"), "");
  return raw.split(",").filter(function (x) {
                return x !== "";
              }).map(Parser$AgdaModeVscode.filepath);
}

function getHighlightingMethod() {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("highlighting.IPC");
  if (raw === "Temporary Files") {
    return false;
  } else {
    return true;
  }
}

var Highlighting = {
  getHighlightingMethod: getHighlightingMethod
};

function getBackend() {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("backend");
  if (raw === undefined) {
    return "GHCNoMain";
  }
  switch (raw) {
    case "LaTeX" :
        return "LaTeX";
    case "QuickLaTeX" :
        return "QuickLaTeX";
    default:
      return "GHCNoMain";
  }
}

function getEnabled() {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("inputMethod.enabled");
  if (raw !== undefined && !raw) {
    return false;
  } else {
    return true;
  }
}

var InputMethod = {
  getEnabled: getEnabled
};

function getFontSize() {
  var config = Vscode.workspace.getConfiguration("agdaMode", undefined);
  var n = Vscode.workspace.getConfiguration("editor", undefined).get("fontSize");
  var editorFontSize = n !== undefined ? Caml_option.valFromOption(n) : 14;
  var m = config.get("buffer.fontSize");
  var size;
  if (m !== undefined) {
    var m$1 = Caml_option.valFromOption(m);
    size = m$1 === null ? editorFontSize : m$1;
  } else {
    size = editorFontSize;
  }
  return size.toString();
}

var $$Buffer = {
  getFontSize: getFontSize
};

var VSRange;

exports.VSRange = VSRange;
exports.inTestingMode = inTestingMode;
exports.DevMode = DevMode;
exports.Connection = Connection;
exports.View = View;
exports.getLibraryPath = getLibraryPath;
exports.Highlighting = Highlighting;
exports.getBackend = getBackend;
exports.InputMethod = InputMethod;
exports.$$Buffer = $$Buffer;
/* vscode Not a pure module */
