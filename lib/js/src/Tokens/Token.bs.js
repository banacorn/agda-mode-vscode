// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");
var PervasivesU = require("rescript/lib/js/pervasivesU.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Parser$AgdaModeVscode = require("../Parser/Parser.bs.js");
var Json_Decode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Decode.bs.js");
var Highlighting__AgdaAspect$AgdaModeVscode = require("../Highlighting/Highlighting__AgdaAspect.bs.js");

function toStringWithoutOffsets(self) {
  var match = self.source;
  return Util$AgdaModeVscode.Pretty.array(self.aspects, Highlighting__AgdaAspect$AgdaModeVscode.toString) + (
          match !== undefined ? " [src: " + String(match[1]) + "]" : ""
        );
}

function toString(self) {
  return "(" + String(self.start) + ", " + String(self.end) + ") " + toStringWithoutOffsets(self);
}

function parse(x) {
  if (x.TAG === "A") {
    return ;
  }
  var xs = x._0;
  var len = xs.length;
  if (len >= 7) {
    return ;
  }
  switch (len) {
    case 3 :
        var start$p = xs[0];
        if (start$p.TAG !== "A") {
          return ;
        }
        var end$p = xs[1];
        if (end$p.TAG !== "A") {
          return ;
        }
        var end$p$1 = end$p._0;
        var aspects = xs[2];
        return Core__Option.flatMap(PervasivesU.int_of_string_opt(start$p._0), (function (start) {
                      return Core__Option.map(PervasivesU.int_of_string_opt(end$p$1), (function (end) {
                                    return {
                                            start: start - 1 | 0,
                                            end: end - 1 | 0,
                                            aspects: Parser$AgdaModeVscode.SExpression.flatten(aspects).map(Highlighting__AgdaAspect$AgdaModeVscode.parse),
                                            isTokenBased: false,
                                            note: undefined,
                                            source: undefined
                                          };
                                  }));
                    }));
    case 4 :
        var start$p$1 = xs[0];
        if (start$p$1.TAG !== "A") {
          return ;
        }
        var end$p$2 = xs[1];
        if (end$p$2.TAG !== "A") {
          return ;
        }
        var end$p$3 = end$p$2._0;
        var aspects$1 = xs[2];
        return Core__Option.flatMap(PervasivesU.int_of_string_opt(start$p$1._0), (function (start) {
                      return Core__Option.map(PervasivesU.int_of_string_opt(end$p$3), (function (end) {
                                    return {
                                            start: start - 1 | 0,
                                            end: end - 1 | 0,
                                            aspects: Parser$AgdaModeVscode.SExpression.flatten(aspects$1).map(Highlighting__AgdaAspect$AgdaModeVscode.parse),
                                            isTokenBased: false,
                                            note: undefined,
                                            source: undefined
                                          };
                                  }));
                    }));
    case 0 :
    case 1 :
    case 2 :
    case 5 :
        return ;
    case 6 :
        var start$p$2 = xs[0];
        if (start$p$2.TAG !== "A") {
          return ;
        }
        var end$p$4 = xs[1];
        if (end$p$4.TAG !== "A") {
          return ;
        }
        var end$p$5 = end$p$4._0;
        var aspects$2 = xs[2];
        var match = xs[5];
        if (match.TAG === "A") {
          return ;
        }
        var match$1 = match._0;
        if (match$1.length !== 3) {
          return ;
        }
        var filepath = match$1[0];
        if (filepath.TAG !== "A") {
          return ;
        }
        var filepath$1 = filepath._0;
        var index$p = match$1[2];
        if (index$p.TAG !== "A") {
          return ;
        }
        var index$p$1 = index$p._0;
        return Core__Option.flatMap(PervasivesU.int_of_string_opt(start$p$2._0), (function (start) {
                      return Core__Option.flatMap(PervasivesU.int_of_string_opt(end$p$5), (function (end) {
                                    return Core__Option.map(PervasivesU.int_of_string_opt(index$p$1), (function (index) {
                                                  return {
                                                          start: start - 1 | 0,
                                                          end: end - 1 | 0,
                                                          aspects: Parser$AgdaModeVscode.SExpression.flatten(aspects$2).map(Highlighting__AgdaAspect$AgdaModeVscode.parse),
                                                          isTokenBased: false,
                                                          note: undefined,
                                                          source: [
                                                            Parser$AgdaModeVscode.Filepath.make(filepath$1),
                                                            index
                                                          ]
                                                        };
                                                }));
                                  }));
                    }));
    
  }
}

function parseDirectHighlightings(tokens) {
  return Core__Array.filterMap(tokens.slice(2).map(parse), (function (x) {
                return x;
              }));
}

var decodeToken = Json_Decode$JsonCombinators.map(Util$AgdaModeVscode.Decode.tuple6(Json_Decode$JsonCombinators.$$int, Json_Decode$JsonCombinators.$$int, Json_Decode$JsonCombinators.array(Json_Decode$JsonCombinators.string), Json_Decode$JsonCombinators.bool, Json_Decode$JsonCombinators.option(Json_Decode$JsonCombinators.string), Json_Decode$JsonCombinators.option(Json_Decode$JsonCombinators.pair(Json_Decode$JsonCombinators.string, Json_Decode$JsonCombinators.$$int))), (function (param) {
        return {
                start: param[0] - 1 | 0,
                end: param[1] - 1 | 0,
                aspects: param[2].map(Highlighting__AgdaAspect$AgdaModeVscode.parse),
                isTokenBased: param[3],
                note: param[4],
                source: Core__Option.map(param[5], (function (param) {
                        return [
                                Parser$AgdaModeVscode.Filepath.make(param[0]),
                                param[1]
                              ];
                      }))
              };
      }));

var decodeResponseHighlightingInfoDirect = Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.pair(Json_Decode$JsonCombinators.bool, Json_Decode$JsonCombinators.array(decodeToken)), (function (param) {
        return [
                param[0],
                param[1]
              ];
      }));

var Aspect;

exports.Aspect = Aspect;
exports.toStringWithoutOffsets = toStringWithoutOffsets;
exports.toString = toString;
exports.parse = parse;
exports.parseDirectHighlightings = parseDirectHighlightings;
exports.decodeToken = decodeToken;
exports.decodeResponseHighlightingInfoDirect = decodeResponseHighlightingInfoDirect;
/* decodeToken Not a pure module */
