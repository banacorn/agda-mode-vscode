// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var FastCheck = require("fast-check");
var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");

function toString(self) {
  return "-" + String(self.removed) + " +" + String(self.inserted) + " @ " + String(self.offset);
}

function fromTextDocumentContentChangeEvent($$event) {
  return {
          offset: $$event.rangeOffset,
          removed: $$event.rangeLength,
          inserted: $$event.text.length
        };
}

function delta(x) {
  return x.inserted - x.removed | 0;
}

function totalDelta(xs) {
  return Core__Array.reduce(xs, 0, (function (acc, x) {
                return acc + delta(x) | 0;
              }));
}

function isUseless(x) {
  if (x.removed === 0) {
    return x.inserted === 0;
  } else {
    return false;
  }
}

function removedInterval(x) {
  if (x.removed === 0) {
    return ;
  } else {
    return [
            x.offset,
            x.offset + x.removed | 0
          ];
  }
}

function areValid(xs) {
  return Core__Array.reduce(xs, [
                true,
                undefined
              ], (function (param, x) {
                  var prevEnd = param[1];
                  var end = x.offset + x.removed | 0;
                  if (prevEnd !== undefined) {
                    if (prevEnd > x.offset) {
                      return [
                              false,
                              end
                            ];
                    } else {
                      return [
                              param[0],
                              end
                            ];
                    }
                  } else {
                    return [
                            true,
                            end
                          ];
                  }
                }))[0];
}

function translate(x, delta) {
  return {
          offset: x.offset + delta | 0,
          removed: x.removed,
          inserted: x.inserted
        };
}

function arbitrary(after, kindOpt) {
  var kind = kindOpt !== undefined ? kindOpt : "Mixed";
  return FastCheck.integer(after, after + 10 | 0).chain(function (offset) {
              return FastCheck.tuple(FastCheck.integer(0, offset), FastCheck.integer(0, 10)).map(function (param) {
                          var inserted = param[1];
                          var removed = param[0];
                          switch (kind) {
                            case "RemovalOnly" :
                                return {
                                        offset: offset,
                                        removed: removed,
                                        inserted: 0
                                      };
                            case "InsertionOnly" :
                                return {
                                        offset: offset,
                                        removed: 0,
                                        inserted: inserted
                                      };
                            case "Mixed" :
                                return {
                                        offset: offset,
                                        removed: removed,
                                        inserted: inserted
                                      };
                            
                          }
                        });
            });
}

function arbitraryBatch(batchSize, kindOpt) {
  var kind = kindOpt !== undefined ? kindOpt : "Mixed";
  var aux = function (after, size) {
    if (size === 0) {
      return FastCheck.constant([]);
    } else {
      return arbitrary(after, kind).chain(function (change) {
                  return aux((change.offset + change.removed | 0) + 1 | 0, size - 1 | 0).map(function (changes) {
                              return Belt_Array.concatMany([
                                          [change],
                                          changes
                                        ]);
                            });
                });
    }
  };
  if (batchSize !== undefined) {
    return aux(0, batchSize);
  } else {
    return FastCheck.integer(0, 10).chain(function (size) {
                return aux(0, size);
              });
  }
}

exports.toString = toString;
exports.fromTextDocumentContentChangeEvent = fromTextDocumentContentChangeEvent;
exports.delta = delta;
exports.totalDelta = totalDelta;
exports.isUseless = isUseless;
exports.removedInterval = removedInterval;
exports.areValid = areValid;
exports.translate = translate;
exports.arbitrary = arbitrary;
exports.arbitraryBatch = arbitraryBatch;
/* fast-check Not a pure module */
