// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_format = require("rescript/lib/js/caml_format.js");
var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");
var PervasivesU = require("rescript/lib/js/pervasivesU.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Core__Result = require("@rescript/core/lib/js/src/Core__Result.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Parser$AgdaModeVscode = require("./Parser/Parser.bs.js");
var Tokens$AgdaModeVscode = require("./Tokens.bs.js");
var Json_Decode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Decode.bs.js");

var decode = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "GiveNoParen" :
            return {
                    TAG: "TagOnly",
                    _0: "GiveNoParen"
                  };
        case "GiveParen" :
            return {
                    TAG: "TagOnly",
                    _0: "GiveParen"
                  };
        case "GiveString" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.string, (function (s) {
                            return {
                                    TAG: "GiveString",
                                    _0: s
                                  };
                          }))
                  };
        default:
          throw {
                RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                _1: "[Response.GiveAction] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

var GiveAction = {
  decode: decode
};

function toString(x) {
  switch (x.TAG) {
    case "Generic" :
        return x._0;
    case "CompilationOk" :
        return "CompilationOk " + x._0;
    case "CompilationOkALS" :
        return "[ALS] CompilationOk";
    case "Constraints" :
        var string = x._0;
        if (string !== undefined) {
          return "Constraints " + string;
        } else {
          return "Constraints";
        }
    case "AllGoalsWarnings" :
        return "AllGoalsWarnings " + x._0;
    case "AllGoalsWarningsALS" :
        return "[ALS] AllGoalsWarnings " + x._0;
    case "Time" :
        return "Time " + x._0;
    case "Error" :
        return "Error " + x._0;
    case "Intro" :
        return "Intro " + x._0;
    case "Auto" :
        return "Auto " + x._0;
    case "ModuleContents" :
        return "ModuleContents " + x._0;
    case "SearchAbout" :
        return "SearchAbout " + x._0;
    case "WhyInScope" :
        return "WhyInScope " + x._0;
    case "NormalForm" :
        return "NormalForm " + x._0;
    case "GoalType" :
        return "GoalType " + x._0;
    case "CurrentGoal" :
        return "CurrentGoal " + x._0;
    case "CurrentGoalALS" :
        return "[ALS] CurrentGoal";
    case "InferredType" :
        return "InferredType " + x._0;
    case "InferredTypeALS" :
        return "InferredType ";
    case "Context" :
        return "Context " + x._0;
    case "HelperFunction" :
        return "HelperFunction " + x._0;
    case "Version" :
        return "Version " + x._0;
    
  }
}

function parse(xs) {
  var match = xs[1];
  if (match === undefined) {
    return ;
  }
  if (match.TAG !== "A") {
    return ;
  }
  var payload = Parser$AgdaModeVscode.unescapeEOL(match._0);
  var match$1 = xs[0];
  if (match$1 === undefined) {
    return ;
  }
  if (match$1.TAG !== "A") {
    return ;
  }
  var title = match$1._0;
  switch (title) {
    case "*Agda Version*" :
        return {
                TAG: "Version",
                _0: payload
              };
    case "*Auto*" :
        return {
                TAG: "Auto",
                _0: payload
              };
    case "*Compilation result*" :
        return {
                TAG: "CompilationOk",
                _0: payload
              };
    case "*Constraints*" :
        if (payload === "nil") {
          return {
                  TAG: "Constraints",
                  _0: undefined
                };
        } else {
          return {
                  TAG: "Constraints",
                  _0: payload
                };
        }
    case "*Context*" :
        return {
                TAG: "Context",
                _0: payload
              };
    case "*Current Goal*" :
        return {
                TAG: "CurrentGoal",
                _0: payload
              };
    case "*Error*" :
        return {
                TAG: "Error",
                _0: payload
              };
    case "*Goal type etc.*" :
        return {
                TAG: "GoalType",
                _0: payload
              };
    case "*Helper function*" :
        return {
                TAG: "HelperFunction",
                _0: payload
              };
    case "*Inferred Type*" :
        return {
                TAG: "InferredType",
                _0: payload
              };
    case "*Intro*" :
        return {
                TAG: "Intro",
                _0: payload
              };
    case "*Module contents*" :
        return {
                TAG: "ModuleContents",
                _0: payload
              };
    case "*Normal Form*" :
        return {
                TAG: "NormalForm",
                _0: payload
              };
    case "*Scope Info*" :
        return {
                TAG: "WhyInScope",
                _0: payload
              };
    case "*Search About*" :
        return {
                TAG: "SearchAbout",
                _0: payload
              };
    case "*Time*" :
        return {
                TAG: "Time",
                _0: payload
              };
    default:
      return {
              TAG: "AllGoalsWarnings",
              _0: title,
              _1: payload
            };
  }
}

var DisplayInfo = {
  toString: toString,
  parse: parse
};

function toString$1(x) {
  if (typeof x !== "object") {
    switch (x) {
      case "ClearRunningInfo" :
          return "ClearRunningInfo";
      case "ClearHighlighting" :
          return "ClearHighlighting";
      case "DoneAborting" :
          return "DoneAborting";
      case "DoneExiting" :
          return "DoneExiting";
      case "CompleteHighlightingAndMakePromptReappear" :
          return "CompleteHighlightingAndMakePromptReappear";
      
    }
  } else {
    switch (x.TAG) {
      case "HighlightingInfoDirect" :
          return "HighlightingInfoDirect " + ((
                    x._0 ? "Keep " : "Remove "
                  ) + (" " + (String(x._1.length) + " annotations")));
      case "HighlightingInfoIndirect" :
          return "HighlightingInfoIndirect " + x._0;
      case "HighlightingInfoIndirectJSON" :
          return "HighlightingInfoIndirectJSON " + x._0;
      case "Status" :
          return "Status: implicit arguments " + ((
                    x._0 ? "displayed, " : "not displayed, "
                  ) + ("module " + (
                      x._1 ? "type checked" : "not type checked"
                    )));
      case "JumpToError" :
          return "JumpToError " + (x._0 + (" " + String(x._1)));
      case "InteractionPoints" :
          return "InteractionPoints " + Util$AgdaModeVscode.Pretty.array(x._0.map(function (prim) {
                          return String(prim);
                        }));
      case "GiveAction" :
          var string = x._1;
          var index = x._0;
          if (typeof string !== "object") {
            if (string === "GiveParen") {
              return "GiveAction " + (String(index) + " Paren");
            } else {
              return "GiveAction " + (String(index) + " NoParen");
            }
          } else {
            return "GiveAction " + (String(index) + (" String " + string._0));
          }
      case "MakeCase" :
          if (x._0 === "Function") {
            return "MakeCase Function " + Util$AgdaModeVscode.Pretty.array(x._1);
          } else {
            return "MakeCase ExtendedLambda " + Util$AgdaModeVscode.Pretty.array(x._1);
          }
      case "SolveAll" :
          return "SolveAll " + Util$AgdaModeVscode.Pretty.array(x._0.map(function (param) {
                          return String(param[0]) + (" " + param[1]);
                        }));
      case "DisplayInfo" :
          return "DisplayInfo " + toString(x._0);
      case "RunningInfo" :
          return "RunningInfo " + (String(x._0) + (" " + x._1));
      
    }
  }
}

function parse$1(tokens) {
  if (tokens.TAG === "A") {
    return {
            TAG: "Error",
            _0: {
              TAG: "Response",
              _0: 0,
              _1: tokens
            }
          };
  }
  var xs = tokens._0;
  var match = xs[0];
  var exit = 0;
  if (match === undefined) {
    return {
            TAG: "Error",
            _0: {
              TAG: "Response",
              _0: 14,
              _1: tokens
            }
          };
  }
  if (match.TAG !== "A") {
    return {
            TAG: "Error",
            _0: {
              TAG: "Response",
              _0: 14,
              _1: tokens
            }
          };
  }
  switch (match._0) {
    case "agda2-abort-done" :
        return {
                TAG: "Ok",
                _0: "DoneAborting"
              };
    case "agda2-exit-done" :
        return {
                TAG: "Ok",
                _0: "DoneExiting"
              };
    case "agda2-give-action" :
        var match$1 = xs[1];
        if (match$1 !== undefined && match$1.TAG === "A") {
          return Core__Option.mapOr(Core__Option.flatMap(PervasivesU.int_of_string_opt(match$1._0), (function (i) {
                            var match = xs[2];
                            if (match === undefined) {
                              return ;
                            }
                            if (match.TAG !== "A") {
                              return ;
                            }
                            var result = match._0;
                            switch (result) {
                              case "no-paren" :
                                  return {
                                          TAG: "GiveAction",
                                          _0: i,
                                          _1: "GiveNoParen"
                                        };
                              case "paren" :
                                  return {
                                          TAG: "GiveAction",
                                          _0: i,
                                          _1: "GiveParen"
                                        };
                              default:
                                return {
                                        TAG: "GiveAction",
                                        _0: i,
                                        _1: {
                                          TAG: "GiveString",
                                          _0: result
                                        }
                                      };
                            }
                          })), {
                      TAG: "Error",
                      _0: {
                        TAG: "Response",
                        _0: 6,
                        _1: tokens
                      }
                    }, (function (x) {
                        return {
                                TAG: "Ok",
                                _0: x
                              };
                      }));
        } else {
          return {
                  TAG: "Error",
                  _0: {
                    TAG: "Response",
                    _0: 7,
                    _1: tokens
                  }
                };
        }
    case "agda2-goals-action" :
        var xs$1 = xs[1];
        if (xs$1 !== undefined) {
          return {
                  TAG: "Ok",
                  _0: {
                    TAG: "InteractionPoints",
                    _0: Core__Array.filterMap(Parser$AgdaModeVscode.SExpression.flatten(xs$1), PervasivesU.int_of_string_opt)
                  }
                };
        } else {
          return {
                  TAG: "Error",
                  _0: {
                    TAG: "Response",
                    _0: 5,
                    _1: tokens
                  }
                };
        }
    case "agda2-highlight-add-annotations" :
        var annotations = Tokens$AgdaModeVscode.Token.parseDirectHighlightings(xs);
        var match$2 = xs[1];
        if (match$2 === undefined) {
          return {
                  TAG: "Ok",
                  _0: {
                    TAG: "HighlightingInfoDirect",
                    _0: true,
                    _1: []
                  }
                };
        }
        if (match$2.TAG !== "A") {
          return {
                  TAG: "Ok",
                  _0: {
                    TAG: "HighlightingInfoDirect",
                    _0: true,
                    _1: []
                  }
                };
        }
        switch (match$2._0) {
          case "nil" :
              return {
                      TAG: "Ok",
                      _0: {
                        TAG: "HighlightingInfoDirect",
                        _0: true,
                        _1: annotations
                      }
                    };
          case "remove" :
              return {
                      TAG: "Ok",
                      _0: {
                        TAG: "HighlightingInfoDirect",
                        _0: false,
                        _1: annotations
                      }
                    };
          default:
            return {
                    TAG: "Ok",
                    _0: {
                      TAG: "HighlightingInfoDirect",
                      _0: true,
                      _1: []
                    }
                  };
        }
    case "agda2-highlight-clear" :
        return {
                TAG: "Ok",
                _0: "ClearHighlighting"
              };
    case "agda2-highlight-load-and-delete-action" :
        var match$3 = xs[1];
        if (match$3 !== undefined && match$3.TAG === "A") {
          return {
                  TAG: "Ok",
                  _0: {
                    TAG: "HighlightingInfoIndirect",
                    _0: match$3._0
                  }
                };
        } else {
          return {
                  TAG: "Error",
                  _0: {
                    TAG: "Response",
                    _0: 2,
                    _1: tokens
                  }
                };
        }
    case "agda2-info-action" :
    case "agda2-info-action-and-copy" :
        exit = 1;
        break;
    case "agda2-make-case-action" :
        var xs$2 = xs[1];
        if (xs$2 !== undefined) {
          return {
                  TAG: "Ok",
                  _0: {
                    TAG: "MakeCase",
                    _0: "Function",
                    _1: Parser$AgdaModeVscode.SExpression.flatten(xs$2)
                  }
                };
        } else {
          return {
                  TAG: "Error",
                  _0: {
                    TAG: "Response",
                    _0: 8,
                    _1: tokens
                  }
                };
        }
    case "agda2-make-case-action-extendlam" :
        var xs$3 = xs[1];
        if (xs$3 !== undefined) {
          return {
                  TAG: "Ok",
                  _0: {
                    TAG: "MakeCase",
                    _0: "ExtendedLambda",
                    _1: Parser$AgdaModeVscode.SExpression.flatten(xs$3)
                  }
                };
        } else {
          return {
                  TAG: "Error",
                  _0: {
                    TAG: "Response",
                    _0: 9,
                    _1: tokens
                  }
                };
        }
    case "agda2-maybe-goto" :
        var match$4 = xs[1];
        if (match$4 === undefined) {
          return {
                  TAG: "Error",
                  _0: {
                    TAG: "Response",
                    _0: 4,
                    _1: tokens
                  }
                };
        }
        if (match$4.TAG === "A") {
          return {
                  TAG: "Error",
                  _0: {
                    TAG: "Response",
                    _0: 4,
                    _1: tokens
                  }
                };
        }
        var match$5 = match$4._0;
        if (match$5.length !== 3) {
          return {
                  TAG: "Error",
                  _0: {
                    TAG: "Response",
                    _0: 4,
                    _1: tokens
                  }
                };
        }
        var filepath = match$5[0];
        if (filepath.TAG !== "A") {
          return {
                  TAG: "Error",
                  _0: {
                    TAG: "Response",
                    _0: 4,
                    _1: tokens
                  }
                };
        }
        var filepath$1 = filepath._0;
        var index$p = match$5[2];
        if (index$p.TAG === "A") {
          return Core__Option.mapOr(Core__Option.flatMap(PervasivesU.int_of_string_opt(index$p._0), (function (index) {
                            return {
                                    TAG: "JumpToError",
                                    _0: filepath$1,
                                    _1: index
                                  };
                          })), {
                      TAG: "Error",
                      _0: {
                        TAG: "Response",
                        _0: 3,
                        _1: tokens
                      }
                    }, (function (x) {
                        return {
                                TAG: "Ok",
                                _0: x
                              };
                      }));
        } else {
          return {
                  TAG: "Error",
                  _0: {
                    TAG: "Response",
                    _0: 4,
                    _1: tokens
                  }
                };
        }
    case "agda2-solveAll-action" :
        var xs$4 = xs[1];
        if (xs$4 === undefined) {
          return {
                  TAG: "Error",
                  _0: {
                    TAG: "Response",
                    _0: 10,
                    _1: tokens
                  }
                };
        }
        var tokens$1 = Parser$AgdaModeVscode.SExpression.flatten(xs$4);
        var isEven = function (i) {
          return i % 2 === 0;
        };
        var i = {
          contents: 0
        };
        var solutions = Core__Array.filterMap(tokens$1, (function (token) {
                var solution = isEven(i.contents) ? Core__Option.flatMap(PervasivesU.int_of_string_opt(token), (function (index) {
                          return Core__Option.map(tokens$1[i.contents + 1 | 0], (function (s) {
                                        return [
                                                index,
                                                s
                                              ];
                                      }));
                        })) : undefined;
                i.contents = i.contents + 1 | 0;
                return solution;
              }));
        return {
                TAG: "Ok",
                _0: {
                  TAG: "SolveAll",
                  _0: solutions
                }
              };
    case "agda2-status-action" :
        var match$6 = xs[1];
        if (match$6 === undefined) {
          return {
                  TAG: "Ok",
                  _0: {
                    TAG: "Status",
                    _0: false,
                    _1: false
                  }
                };
        }
        if (match$6.TAG !== "A") {
          return {
                  TAG: "Ok",
                  _0: {
                    TAG: "Status",
                    _0: false,
                    _1: false
                  }
                };
        }
        var pulp = match$6._0.split(",");
        return {
                TAG: "Ok",
                _0: {
                  TAG: "Status",
                  _0: pulp.includes("ShowImplicit"),
                  _1: pulp.includes("Checked")
                }
              };
    case "agda2-verbose" :
        var match$7 = xs[1];
        if (match$7 !== undefined && match$7.TAG === "A") {
          return {
                  TAG: "Ok",
                  _0: {
                    TAG: "RunningInfo",
                    _0: 2,
                    _1: Parser$AgdaModeVscode.unescapeEOL(match$7._0)
                  }
                };
        } else {
          return {
                  TAG: "Error",
                  _0: {
                    TAG: "Response",
                    _0: 13,
                    _1: tokens
                  }
                };
        }
    default:
      return {
              TAG: "Error",
              _0: {
                TAG: "Response",
                _0: 14,
                _1: tokens
              }
            };
  }
  if (exit === 1) {
    var match$8 = xs[1];
    var exit$1 = 0;
    if (match$8 !== undefined && match$8.TAG === "A") {
      if (match$8._0 === "*Type-checking*") {
        var match$9 = xs[3];
        if (match$9 === undefined) {
          return {
                  TAG: "Ok",
                  _0: "ClearRunningInfo"
                };
        }
        if (match$9.TAG !== "A") {
          return {
                  TAG: "Ok",
                  _0: "ClearRunningInfo"
                };
        }
        if (match$9._0 !== "t") {
          return {
                  TAG: "Ok",
                  _0: "ClearRunningInfo"
                };
        }
        var match$10 = xs[2];
        if (match$10 !== undefined && match$10.TAG === "A") {
          return {
                  TAG: "Ok",
                  _0: {
                    TAG: "RunningInfo",
                    _0: 1,
                    _1: Parser$AgdaModeVscode.unescapeEOL(match$10._0)
                  }
                };
        } else {
          return {
                  TAG: "Error",
                  _0: {
                    TAG: "Response",
                    _0: 11,
                    _1: tokens
                  }
                };
        }
      }
      exit$1 = 2;
    } else {
      exit$1 = 2;
    }
    if (exit$1 === 2) {
      var info = parse(xs.slice(1));
      if (info !== undefined) {
        return {
                TAG: "Ok",
                _0: {
                  TAG: "DisplayInfo",
                  _0: info
                }
              };
      } else {
        return {
                TAG: "Error",
                _0: {
                  TAG: "Response",
                  _0: 12,
                  _1: tokens
                }
              };
      }
    }
    
  }
  
}

function toString$2(x) {
  if (x.TAG === "NonLast") {
    return "NonLast " + toString$1(x._0);
  } else {
    return "Last(" + (String(x._0) + (") " + toString$1(x._1)));
  }
}

function parse$2(tokens) {
  if (tokens.TAG !== "A") {
    var match = tokens._0;
    if (match.length === 3) {
      var match$1 = match[0];
      if (match$1.TAG !== "A") {
        var match$2 = match$1._0;
        if (match$2.length === 3) {
          var match$3 = match$2[0];
          if (match$3.TAG === "A" && match$3._0 === "last") {
            var match$4 = match$2[1];
            if (match$4.TAG === "A" && match$4._0 === ".") {
              var priority = match$2[2];
              if (priority.TAG === "A") {
                var priority$1 = priority._0;
                var match$5 = match[1];
                if (match$5.TAG === "A" && match$5._0 === ".") {
                  var xs = match[2];
                  return Core__Result.map(parse$1(xs), (function (response) {
                                return {
                                        TAG: "Last",
                                        _0: Caml_format.int_of_string(priority$1),
                                        _1: response
                                      };
                              }));
                }
                
              }
              
            }
            
          }
          
        }
        
      }
      
    }
    
  }
  return Core__Result.map(parse$1(tokens), (function (response) {
                return {
                        TAG: "NonLast",
                        _0: response
                      };
              }));
}

var Prioritized = {
  toString: toString$2,
  parse: parse$2
};

var Token;

exports.Token = Token;
exports.GiveAction = GiveAction;
exports.DisplayInfo = DisplayInfo;
exports.toString = toString$1;
exports.parse = parse$1;
exports.Prioritized = Prioritized;
/* decode Not a pure module */
