// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("rescript/lib/js/caml_option.js");

var Any = {};

function make(memento) {
  if (memento !== undefined) {
    return {
            TAG: "Memento",
            _0: Caml_option.valFromOption(memento)
          };
  } else {
    return {
            TAG: "Mock",
            _0: {}
          };
  }
}

function get(context, key) {
  if (context.TAG === "Memento") {
    return context._0.get(key);
  } else {
    return context._0[key];
  }
}

function getWithDefault(context, key, defaultValue) {
  if (context.TAG === "Memento") {
    return context._0.get(key, defaultValue);
  }
  var value = context._0[key];
  if (value !== undefined) {
    return Caml_option.valFromOption(value);
  } else {
    return defaultValue;
  }
}

function keys(context) {
  if (context.TAG === "Memento") {
    return context._0.keys();
  } else {
    return Object.keys(context._0);
  }
}

function set(context, key, value) {
  if (context.TAG === "Memento") {
    return context._0.update(key, value);
  } else {
    return Promise.resolve((context._0[key] = value, undefined));
  }
}

function toString(context) {
  if (context.TAG === "Memento") {
    var context$1 = context._0;
    var entries = context$1.keys().map(function (key) {
          var value = context$1.get(key);
          if (value !== undefined) {
            return key + ": " + Caml_option.valFromOption(value);
          } else {
            return key + ": None";
          }
        });
    return "Memento: {\n" + entries.join("\n") + "}";
  }
  var entries$1 = Object.entries(context._0).map(function (param) {
        return param[0] + ": " + String(param[1]);
      });
  return "Mock: {\n" + entries$1.join("\n") + "}";
}

var Module = {
  make: make,
  get: get,
  getWithDefault: getWithDefault,
  keys: keys,
  set: set,
  toString: toString
};

exports.Any = Any;
exports.Module = Module;
exports.make = make;
exports.get = get;
exports.getWithDefault = getWithDefault;
exports.keys = keys;
exports.set = set;
exports.toString = toString;
/* No side effect */
