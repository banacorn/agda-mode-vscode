// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Core__Dict = require("@rescript/core/lib/js/src/Core__Dict.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");

function toDecorations(input) {
  var backgroundColorDict = {};
  var foregroundColorDict = {};
  var addFaceToDict = function (face, range) {
    if (face.TAG === "Background") {
      var color = face._0;
      var ranges = backgroundColorDict[color];
      if (ranges !== undefined) {
        ranges.push(range);
      } else {
        backgroundColorDict[color] = [range];
      }
      return ;
    }
    var color$1 = face._0;
    var ranges$1 = foregroundColorDict[color$1];
    if (ranges$1 !== undefined) {
      ranges$1.push(range);
    } else {
      foregroundColorDict[color$1] = [range];
    }
  };
  input.forEach(function (param) {
        var range = param[1];
        var match = param[0];
        var theme = Vscode.window.activeColorTheme.kind;
        if (theme === 2) {
          return addFaceToDict(match.dark, range);
        } else {
          return addFaceToDict(match.light, range);
        }
      });
  var resultDict = new Map();
  Core__Dict.forEachWithKey(backgroundColorDict, (function (ranges, color) {
          var decoration = Editor$AgdaModeVscode.Decoration.createBackgroundWithColor(color);
          var existingRanges = resultDict.get(decoration);
          if (existingRanges !== undefined) {
            resultDict.set(decoration, Belt_Array.concatMany([
                      existingRanges,
                      ranges
                    ]));
          } else {
            resultDict.set(decoration, ranges);
          }
        }));
  Core__Dict.forEachWithKey(foregroundColorDict, (function (ranges, color) {
          var decoration = Editor$AgdaModeVscode.Decoration.createTextWithColor(color);
          var existingRanges = resultDict.get(decoration);
          if (existingRanges !== undefined) {
            resultDict.set(decoration, Belt_Array.concatMany([
                      existingRanges,
                      ranges
                    ]));
          } else {
            resultDict.set(decoration, ranges);
          }
        }));
  return resultDict;
}

function toDecoration(self) {
  var convert = function (color) {
    if (color.TAG === "Background") {
      return Editor$AgdaModeVscode.Decoration.createBackgroundWithColor(color._0);
    } else {
      return Editor$AgdaModeVscode.Decoration.createTextWithColor(color._0);
    }
  };
  var theme = Vscode.window.activeColorTheme.kind;
  if (theme === 2) {
    return convert(self.dark);
  } else {
    return convert(self.light);
  }
}

exports.toDecorations = toDecorations;
exports.toDecoration = toDecoration;
/* vscode Not a pure module */
