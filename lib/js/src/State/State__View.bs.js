// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Item$AgdaModeVscode = require("../View/Component/Item.bs.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var RichText$AgdaModeVscode = require("../View/Component/RichText.bs.js");
var Singleton$AgdaModeVscode = require("../View/Singleton.bs.js");
var WebviewPanel$AgdaModeVscode = require("../View/WebviewPanel.bs.js");
var Connection__Error$AgdaModeVscode = require("../Connection/Shared/Connection__Error.bs.js");

function get(state) {
  return Singleton$AgdaModeVscode.Panel.make(state.extensionUri);
}

function sendEvent(state, $$event) {
  State$AgdaModeVscode.ViewCache.cacheEvent(state.panelCache, $$event);
  return WebviewPanel$AgdaModeVscode.sendEvent(get(state), $$event);
}

function restore(state) {
  State$AgdaModeVscode.ViewCache.restore(state.panelCache, get(state));
}

function display(state, header, body) {
  return sendEvent(state, {
              TAG: "Display",
              _0: header,
              _1: body
            });
}

function displayInAppendMode(state, header, body) {
  return sendEvent(state, {
              TAG: "Append",
              _0: header,
              _1: body
            });
}

function displayOutOfGoalError(state) {
  return display(state, {
              TAG: "Error",
              _0: "Out of goal"
            }, [Item$AgdaModeVscode.plainText("Please place the cursor in a goal")]);
}

function displayConnectionError(state, error) {
  var match = Connection__Error$AgdaModeVscode.toString(error);
  return display(state, {
              TAG: "Error",
              _0: match[0]
            }, [Item$AgdaModeVscode.plainText(match[1])]);
}

function displayStatus(state, string) {
  return sendEvent(state, {
              TAG: "SetStatus",
              _0: string
            });
}

function displayConnectionStatus(state, connection) {
  if (connection.TAG === "Agda") {
    return displayStatus(state, "Agda v" + connection._2);
  } else {
    return displayStatus(state, "Agda v" + connection._3 + " Language Server v" + connection._2);
  }
}

function updateIM(state, $$event) {
  return sendEvent(state, {
              TAG: "InputMethod",
              _0: $$event
            });
}

function updatePromptIM(state, content) {
  return sendEvent(state, {
              TAG: "PromptIMUpdate",
              _0: content
            });
}

function setFontSize(state, fontSize) {
  return sendEvent(state, {
              TAG: "ConfigurationChange",
              _0: fontSize
            });
}

function prompt(state, header, prompt$1, callbackOnPromptSuccess) {
  State$AgdaModeVscode.Context.setPrompt(true);
  var request = {
    TAG: "Prompt",
    _0: header,
    _1: prompt$1
  };
  var callback = async function (response) {
    if (typeof response !== "object") {
      State$AgdaModeVscode.Context.setPrompt(false);
      Editor$AgdaModeVscode.focus(state.document);
      State$AgdaModeVscode.ViewCache.clearPrompt(state.panelCache);
      return State$AgdaModeVscode.ViewCache.restore(state.panelCache, get(state));
    }
    await callbackOnPromptSuccess(response._0);
    State$AgdaModeVscode.Context.setPrompt(false);
    Editor$AgdaModeVscode.focus(state.document);
    return State$AgdaModeVscode.ViewCache.clearPrompt(state.panelCache);
  };
  State$AgdaModeVscode.ViewCache.cacheRequest(state.panelCache, request, callback);
  return WebviewPanel$AgdaModeVscode.sendRequest(get(state), request, callback);
}

async function interruptPrompt(state) {
  await sendEvent(state, "PromptInterrupt");
  State$AgdaModeVscode.Context.setPrompt(false);
  Editor$AgdaModeVscode.focus(state.document);
  State$AgdaModeVscode.ViewCache.clearPrompt(state.panelCache);
  return State$AgdaModeVscode.ViewCache.restore(state.panelCache, get(state));
}

var Panel = {
  get: get,
  restore: restore,
  display: display,
  displayInAppendMode: displayInAppendMode,
  displayOutOfGoalError: displayOutOfGoalError,
  displayConnectionError: displayConnectionError,
  displayStatus: displayStatus,
  displayConnectionStatus: displayConnectionStatus,
  updateIM: updateIM,
  updatePromptIM: updatePromptIM,
  prompt: prompt,
  interruptPrompt: interruptPrompt,
  setFontSize: setFontSize
};

function make(state) {
  return Singleton$AgdaModeVscode.DebugBuffer.make(state.extensionUri);
}

function exists() {
  return Core__Option.isSome(Singleton$AgdaModeVscode.DebugBuffer.get());
}

var destroy = Singleton$AgdaModeVscode.DebugBuffer.destroy;

function sendEvent$1($$event) {
  return Core__Option.mapOr(Singleton$AgdaModeVscode.DebugBuffer.get(), Promise.resolve(), (function (x) {
                return WebviewPanel$AgdaModeVscode.sendEvent(x, $$event);
              }));
}

function display$1(msgs) {
  var body = msgs.map(function (param) {
        var body = RichText$AgdaModeVscode.string(param[1]);
        return {
                TAG: "Unlabeled",
                _0: body,
                _1: undefined,
                _2: undefined
              };
      });
  return sendEvent$1({
              TAG: "Display",
              _0: {
                TAG: "Plain",
                _0: "Agda Debug Buffer"
              },
              _1: body
            });
}

function displayInAppendMode$1(msgs) {
  var body = msgs.map(function (param) {
        var body = RichText$AgdaModeVscode.string(param[1]);
        return {
                TAG: "Unlabeled",
                _0: body,
                _1: undefined,
                _2: undefined
              };
      });
  return sendEvent$1({
              TAG: "Append",
              _0: {
                TAG: "Plain",
                _0: "Agda Debug Buffer"
              },
              _1: body
            });
}

function reveal(state) {
  return Core__Option.mapOr(Singleton$AgdaModeVscode.DebugBuffer.get(), Promise.resolve(), (function (debugBuffer) {
                WebviewPanel$AgdaModeVscode.reveal(debugBuffer);
                return display$1(state.runningInfoLog);
              }));
}

function restore$1(state) {
  return display$1(state.runningInfoLog);
}

var DebugBuffer = {
  make: make,
  exists: exists,
  destroy: destroy,
  display: display$1,
  displayInAppendMode: displayInAppendMode$1,
  reveal: reveal,
  restore: restore$1
};

exports.Panel = Panel;
exports.DebugBuffer = DebugBuffer;
/* Item-AgdaModeVscode Not a pure module */
