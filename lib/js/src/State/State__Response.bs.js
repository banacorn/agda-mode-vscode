// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Agda$AgdaModeVscode = require("../Agda.bs.js");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var Goal$AgdaModeVscode = require("../Goal.bs.js");
var Item$AgdaModeVscode = require("../View/Component/Item.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Goals$AgdaModeVscode = require("../Goals.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var Parser$AgdaModeVscode = require("../Parser/Parser.bs.js");
var Tokens$AgdaModeVscode = require("../Tokens.bs.js");
var Resource$AgdaModeVscode = require("../Resource.bs.js");
var RichText$AgdaModeVscode = require("../View/Component/RichText.bs.js");
var State__View$AgdaModeVscode = require("./State__View.bs.js");
var Emacs__Parser2$AgdaModeVscode = require("../View/Panel/Emacs/Emacs__Parser2.bs.js");
var State__Connection$AgdaModeVscode = require("./State__Connection.bs.js");

function indent(content, indent$1) {
  var indentation = " ".repeat(indent$1);
  return content.replace(/\n/g, "\n" + indentation);
}

async function handle(state, x) {
  switch (x.TAG) {
    case "Generic" :
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: x._0
                  }, x._1);
    case "CompilationOk" :
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Success",
                    _0: "Compilation result"
                  }, [Item$AgdaModeVscode.plainText(x._0)]);
    case "CompilationOkALS" :
        var message = [Item$AgdaModeVscode.plainText("The module was successfully compiled.")];
        var errors = x._1.map(function (raw) {
              return Item$AgdaModeVscode.error(RichText$AgdaModeVscode.string(raw), raw);
            });
        var warnings = x._0.map(function (raw) {
              return Item$AgdaModeVscode.warning(RichText$AgdaModeVscode.string(raw), raw);
            });
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Success",
                    _0: "Compilation result"
                  }, [
                      message,
                      errors,
                      warnings
                    ].flat());
    case "Constraints" :
        var body = x._0;
        if (body === undefined) {
          return await State__View$AgdaModeVscode.Panel.display(state, {
                      TAG: "Plain",
                      _0: "No Constraints"
                    }, []);
        }
        var items = Emacs__Parser2$AgdaModeVscode.parseOutputs(body);
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Constraints"
                  }, items);
    case "AllGoalsWarnings" :
        var body$1 = x._1;
        var header = x._0;
        if (body$1 === "nil") {
          return await State__View$AgdaModeVscode.Panel.display(state, {
                      TAG: "Success",
                      _0: header
                    }, []);
        }
        var items$1 = Emacs__Parser2$AgdaModeVscode.render(Emacs__Parser2$AgdaModeVscode.parseAllGoalsWarnings(header, body$1));
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: header
                  }, items$1);
    case "AllGoalsWarningsALS" :
        var errors$1 = x._4.map(function (raw) {
              return Item$AgdaModeVscode.error(RichText$AgdaModeVscode.string(raw), raw);
            });
        var warnings$1 = x._3.map(function (raw) {
              return Item$AgdaModeVscode.warning(RichText$AgdaModeVscode.string(raw), raw);
            });
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: x._0
                  }, [
                      x._1,
                      x._2,
                      errors$1,
                      warnings$1
                    ].flat());
    case "Time" :
        var items$2 = Emacs__Parser2$AgdaModeVscode.parseAndRenderTextWithLocation(x._0);
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Time"
                  }, items$2);
    case "Error" :
        var items$3 = Emacs__Parser2$AgdaModeVscode.render(Emacs__Parser2$AgdaModeVscode.parseError(x._0));
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Error",
                    _0: "Error"
                  }, items$3);
    case "Intro" :
        var items$4 = Emacs__Parser2$AgdaModeVscode.parseAndRenderTextWithLocation(x._0);
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Intro"
                  }, items$4);
    case "Auto" :
        var items$5 = Emacs__Parser2$AgdaModeVscode.parseAndRenderTextWithLocation(x._0);
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Auto"
                  }, items$5);
    case "ModuleContents" :
        var items$6 = Emacs__Parser2$AgdaModeVscode.parseAndRenderTextWithLocation(x._0);
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Module Contents"
                  }, items$6);
    case "SearchAbout" :
        var items$7 = Emacs__Parser2$AgdaModeVscode.parseAndRenderSearchAbout(x._0);
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Search About"
                  }, items$7);
    case "WhyInScope" :
        var items$8 = Emacs__Parser2$AgdaModeVscode.parseAndRenderTextWithLocation(x._0);
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Scope info"
                  }, items$8);
    case "NormalForm" :
        var items$9 = Emacs__Parser2$AgdaModeVscode.parseAndRenderTextWithLocation(x._0);
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Normal form"
                  }, items$9);
    case "GoalType" :
        var items$10 = Emacs__Parser2$AgdaModeVscode.render(Emacs__Parser2$AgdaModeVscode.parseGoalType(x._0));
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Goal and Context"
                  }, items$10);
    case "CurrentGoal" :
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Current Goal"
                  }, [Item$AgdaModeVscode.plainText(x._0)]);
    case "CurrentGoalALS" :
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Current Goal"
                  }, [x._0]);
    case "InferredType" :
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Inferred type"
                  }, [Item$AgdaModeVscode.plainText(x._0)]);
    case "InferredTypeALS" :
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Inferred type"
                  }, [x._0]);
    case "Context" :
        var items$11 = Emacs__Parser2$AgdaModeVscode.parseOutputs(x._0);
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Context"
                  }, items$11);
    case "HelperFunction" :
        var payload = x._0;
        await Vscode.env.clipboard.writeText(payload);
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Helper function (copied to clipboard)"
                  }, [Item$AgdaModeVscode.plainText(payload)]);
    case "Version" :
        return await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Plain",
                    _0: "Version"
                  }, [Item$AgdaModeVscode.plainText(x._0)]);
    
  }
}

var DisplayInfo = {
  handle: handle
};

async function handle$1(state, dispatchCommand, response) {
  var sendAgdaRequest = function (extra) {
    return State__Connection$AgdaModeVscode.sendRequest(state, (function (extra) {
                  return handle$1(state, dispatchCommand, extra);
                }), extra);
  };
  var handleResponse = async function () {
    if (typeof response !== "object") {
      switch (response) {
        case "ClearHighlighting" :
            return Tokens$AgdaModeVscode.reset(state.tokens);
        case "CompleteHighlightingAndMakePromptReappear" :
            await Tokens$AgdaModeVscode.readTempFiles(state.tokens, state.editor);
            return Tokens$AgdaModeVscode.generateHighlighting(state.tokens, state.editor);
        default:
          return ;
      }
    } else {
      switch (response.TAG) {
        case "HighlightingInfoDirect" :
            return Tokens$AgdaModeVscode.insertTokens(state.tokens, state.editor, response._1);
        case "HighlightingInfoIndirect" :
            return Tokens$AgdaModeVscode.addEmacsFilePath(state.tokens, response._0);
        case "HighlightingInfoIndirectJSON" :
            return Tokens$AgdaModeVscode.addJSONFilePath(state.tokens, response._0);
        case "Status" :
            return ;
        case "JumpToError" :
            var path = Parser$AgdaModeVscode.filepath(state.document.fileName);
            if (path !== response._0) {
              return ;
            }
            var text = Editor$AgdaModeVscode.$$Text.getAll(state.document);
            var converter = Agda$AgdaModeVscode.OffsetConverter.make(text);
            var offset_ = Agda$AgdaModeVscode.OffsetConverter.convert(converter, response._1 - 1 | 0);
            var point = state.document.positionAt(offset_);
            return Editor$AgdaModeVscode.Cursor.set(state.editor, point);
        case "InteractionPoints" :
            var holePositions = await Resource$AgdaModeVscode.get(Tokens$AgdaModeVscode.getHolePositionsFromLoad(state.tokens));
            Goals$AgdaModeVscode.addGoalPositions(state.goals, Array.from(holePositions.entries()));
            return await Goals$AgdaModeVscode.resetGoalIndicesNew(state.goals, state.editor, response._0);
        case "GiveAction" :
            var give = response._1;
            var index = response._0;
            var goal = Goals$AgdaModeVscode.getGoalByIndex(state.goals, index);
            if (goal === undefined) {
              return await State__View$AgdaModeVscode.Panel.display(state, {
                          TAG: "Error",
                          _0: "Error: Give failed"
                        }, [Item$AgdaModeVscode.plainText("Cannot find goal #" + String(index))]);
            }
            if (typeof give !== "object") {
              if (give === "GiveParen") {
                console.log("GiveParen");
                var goalContent = Goal$AgdaModeVscode.getContent(goal, state.document);
                var goalPositionsRelative = Goals$AgdaModeVscode.parseGoalPositionsFromRefine(goalContent);
                var match = Goals$AgdaModeVscode.getGoalPositionByIndex(state.goals, index);
                var goalPositionsAbsolute;
                if (match !== undefined) {
                  var offset = match[0];
                  goalPositionsAbsolute = goalPositionsRelative.map(function (param) {
                        return [
                                (param[0] + offset | 0) + 1 | 0,
                                (param[1] + offset | 0) + 1 | 0
                              ];
                      });
                } else {
                  goalPositionsAbsolute = [];
                }
                Goals$AgdaModeVscode.addGoalPositions(state.goals, goalPositionsAbsolute);
                await Goals$AgdaModeVscode.modify(state.goals, state.document, index, (function (content) {
                        return "(" + content + ")";
                      }));
              } else {
                console.log("GiveNoParen");
                var goalContent$1 = Goal$AgdaModeVscode.getContent(goal, state.document);
                var goalPositionsRelative$1 = Goals$AgdaModeVscode.parseGoalPositionsFromRefine(goalContent$1);
                var match$1 = Goals$AgdaModeVscode.getGoalPositionByIndex(state.goals, index);
                var goalPositionsAbsolute$1;
                if (match$1 !== undefined) {
                  var offset$1 = match$1[0];
                  goalPositionsAbsolute$1 = goalPositionsRelative$1.map(function (param) {
                        return [
                                param[0] + offset$1 | 0,
                                param[1] + offset$1 | 0
                              ];
                      });
                } else {
                  goalPositionsAbsolute$1 = [];
                }
                Goals$AgdaModeVscode.addGoalPositions(state.goals, goalPositionsAbsolute$1);
              }
            } else {
              var content = give._0;
              console.log("GiveString: " + content);
              var match$2 = Goal$AgdaModeVscode.indentationWidth(goal, state.document);
              var indented = indent(Parser$AgdaModeVscode.unescapeEOL(content), 2 + match$2[0] | 0);
              await Goals$AgdaModeVscode.modify(state.goals, state.document, index, (function (param) {
                      return indented;
                    }));
              var goalPositionsRelative$2 = Goals$AgdaModeVscode.parseGoalPositionsFromRefine(indented);
              var match$3 = Goals$AgdaModeVscode.getGoalPositionByIndex(state.goals, index);
              var goalPositionsAbsolute$2;
              if (match$3 !== undefined) {
                var offset$2 = match$3[0];
                goalPositionsAbsolute$2 = goalPositionsRelative$2.map(function (param) {
                      return [
                              param[0] + offset$2 | 0,
                              param[1] + offset$2 | 0
                            ];
                    });
              } else {
                goalPositionsAbsolute$2 = [];
              }
              Goals$AgdaModeVscode.addGoalPositions(state.goals, goalPositionsAbsolute$2);
            }
            if (await Goals$AgdaModeVscode.removeBoundaryAndDestroy(state.goals, state.document, index)) {
              return ;
            } else {
              return await State__View$AgdaModeVscode.Panel.display(state, {
                          TAG: "Error",
                          _0: "Goal-related Error"
                        }, [Item$AgdaModeVscode.plainText("Unable to remove the boundary of goal #" + String(index))]);
            }
        case "MakeCase" :
            var lines = response._1;
            var goal$1 = Goals$AgdaModeVscode.getRecentlyCaseSplited(state.goals);
            if (goal$1 === undefined) {
              return await State__View$AgdaModeVscode.Panel.display(state, {
                          TAG: "Error",
                          _0: "Cannot split the goal"
                        }, [Item$AgdaModeVscode.plainText("Failed to remember the goal being split")]);
            }
            var result;
            result = response._0 === "Function" ? await Goal$AgdaModeVscode.replaceWithLines(goal$1, state.document, lines) : await Goal$AgdaModeVscode.replaceWithLambda(goal$1, state.document, lines);
            if (result !== undefined) {
              Goals$AgdaModeVscode.removeGoalByIndex(state.goals, goal$1.index);
              Goal$AgdaModeVscode.placeCursorAtFirstNewGoal(state.editor, result[0], result[1]);
            } else {
              await State__View$AgdaModeVscode.Panel.display(state, {
                    TAG: "Error",
                    _0: "Goal-related Error"
                  }, [Item$AgdaModeVscode.plainText("Unable to replace the lines of goal #" + String(goal$1.index))]);
            }
            return await dispatchCommand("Load");
        case "SolveAll" :
            var solutions = response._0;
            var solveOne = function (param) {
              var solution = param[1];
              var index = param[0];
              return async function () {
                var goal = Goals$AgdaModeVscode.getGoalByIndex(state.goals, index);
                if (goal !== undefined) {
                  await Goals$AgdaModeVscode.modify(state.goals, state.document, index, (function (param) {
                          return solution;
                        }));
                  return await sendAgdaRequest({
                              TAG: "Give",
                              _0: goal
                            });
                }
                
              };
            };
            await Util$AgdaModeVscode.Promise_.oneByOne(solutions.map(solveOne));
            var size = solutions.length;
            if (size === 0) {
              return await State__View$AgdaModeVscode.Panel.display(state, {
                          TAG: "Error",
                          _0: "No solutions found"
                        }, []);
            } else {
              return await State__View$AgdaModeVscode.Panel.display(state, {
                          TAG: "Success",
                          _0: String(size) + " goals solved"
                        }, []);
            }
        case "DisplayInfo" :
            return await handle(state, response._0);
        case "RunningInfo" :
            var verbosity = response._0;
            if (verbosity === 1) {
              return await State__View$AgdaModeVscode.Panel.displayInAppendMode(state, {
                          TAG: "Plain",
                          _0: "Type-checking"
                        }, [Item$AgdaModeVscode.plainText(response._1)]);
            }
            var message = response._1;
            state.runningInfoLog.push([
                  verbosity,
                  message
                ]);
            return await State__View$AgdaModeVscode.DebugBuffer.displayInAppendMode([[
                          verbosity,
                          message
                        ]]);
        
      }
    }
  };
  await handleResponse();
  return Chan$AgdaModeVscode.emit(state.channels.responseHandled, response);
}

exports.indent = indent;
exports.DisplayInfo = DisplayInfo;
exports.handle = handle$1;
/* vscode Not a pure module */
