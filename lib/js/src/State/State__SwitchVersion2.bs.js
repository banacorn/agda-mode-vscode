// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Nodepath = require("node:path");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Memento$AgdaModeVscode = require("../Memento.bs.js");

function formatEndpoint(filename, entry) {
  var match = entry.endpoint;
  if (match !== undefined) {
    if (match.TAG === "Agda") {
      return [
              "$(file-binary) " + filename,
              "Agda v" + match._0
            ];
    } else {
      return [
              "$(squirrel) " + filename,
              "ALS v" + match._0 + ", Agda v" + match._1
            ];
    }
  }
  var error = entry.error;
  if (error !== undefined) {
    return [
            "$(error) " + filename,
            "Error: " + error
          ];
  } else {
    return [
            "$(file-binary) " + filename,
            "Unknown version (not probed yet)"
          ];
  }
}

function createEndpointItem(path, entry) {
  var filename = Nodepath.basename(path);
  var match = formatEndpoint(filename, entry);
  return {
          description: match[1],
          detail: path,
          label: match[0]
        };
}

function createSeparatorItem(label) {
  return {
          kind: -1,
          label: label
        };
}

function createNoInstallationsItem() {
  return {
          description: "Try installing Agda or ALS first",
          detail: "No executable paths detected",
          label: "$(info) No installations found"
        };
}

var ItemCreation = {
  formatEndpoint: formatEndpoint,
  createEndpointItem: createEndpointItem,
  createSeparatorItem: createSeparatorItem,
  createNoInstallationsItem: createNoInstallationsItem
};

function make() {
  return {
          quickPick: Vscode.window.createQuickPick(),
          subscriptions: [],
          items: []
        };
}

function setPlaceholder(self, placeholder) {
  self.quickPick.placeholder = placeholder;
}

function updateItems(self, items) {
  self.items = items;
  self.quickPick.items = items;
}

function show(self) {
  self.quickPick.show();
}

function onSelection(self, handler) {
  Util$AgdaModeVscode.Disposable.add(self.quickPick.onDidChangeSelection(handler), self.subscriptions);
}

function onHide(self, handler) {
  Util$AgdaModeVscode.Disposable.add(self.quickPick.onDidHide(handler), self.subscriptions);
}

function destroy(self) {
  self.quickPick.dispose();
  self.subscriptions.forEach(function (sub) {
        sub.dispose();
      });
}

var QuickPickManager = {
  make: make,
  setPlaceholder: setPlaceholder,
  updateItems: updateItems,
  show: show,
  onSelection: onSelection,
  onHide: onHide,
  destroy: destroy
};

function entriesToItems(endpointEntries) {
  var pathItems = Object.entries(endpointEntries).map(function (param) {
        return createEndpointItem(param[0], param[1]);
      });
  if (pathItems.length > 0) {
    return [{
                kind: -1,
                label: "Installed"
              }].concat(pathItems);
  } else {
    return [{
              description: "Try installing Agda or ALS first",
              detail: "No executable paths detected",
              label: "$(info) No installations found"
            }];
  }
}

async function syncAndGetItems(state, platformDeps) {
  var installedPaths = await platformDeps.getInstalledEndpointsAndPersistThem2(state.globalStorageUri);
  await Memento$AgdaModeVscode.Module.Endpoints.syncWithPaths(state.memento, installedPaths);
  var updatedEntries = Memento$AgdaModeVscode.Module.Endpoints.entries(state.memento);
  return entriesToItems(updatedEntries);
}

var EndpointSync = {
  entriesToItems: entriesToItems,
  syncAndGetItems: syncAndGetItems
};

async function run(state, platformDeps) {
  var qp = make();
  setPlaceholder(qp, "Switch Version (v2)");
  var cachedEntries = Memento$AgdaModeVscode.Module.Endpoints.entries(state.memento);
  var initialItems = entriesToItems(cachedEntries);
  updateItems(qp, initialItems);
  qp.quickPick.show();
  onSelection(qp, (function (_selectedItems) {
          destroy(qp);
        }));
  onHide(qp, (function () {
          destroy(qp);
        }));
  var backgroundUpdate = async function () {
    var updatedItems = await syncAndGetItems(state, platformDeps);
    return updateItems(qp, updatedItems);
  };
  backgroundUpdate();
}

exports.ItemCreation = ItemCreation;
exports.QuickPickManager = QuickPickManager;
exports.EndpointSync = EndpointSync;
exports.run = run;
/* vscode Not a pure module */
