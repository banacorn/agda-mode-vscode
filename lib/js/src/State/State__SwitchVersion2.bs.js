// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Nodepath = require("node:path");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Memento$AgdaModeVscode = require("../Memento.bs.js");

function formatEndpoint(filename, entry) {
  var match = entry.endpoint;
  var match$1 = entry.error;
  if (typeof match !== "object") {
    if (match$1 !== undefined) {
      return [
              "$(error) " + filename,
              "Error: " + match$1
            ];
    } else {
      return [
              "$(question) " + filename,
              "Unknown executable"
            ];
    }
  }
  if (match.TAG === "Agda") {
    var version = match._0;
    if (version !== undefined) {
      return [
              "Agda",
              "Agda v" + version
            ];
    } else {
      return [
              "Agda",
              "version unknown"
            ];
    }
  }
  var match$2 = match._0;
  if (match$2 !== undefined) {
    return [
            "$(squirrel)  ALS",
            "ALS v" + match$2[0] + ", Agda v" + match$2[1]
          ];
  } else {
    return [
            "$(squirrel)  ALS",
            "version unknown"
          ];
  }
}

function createEndpointItem(path, entry, extensionUri) {
  var filename = Nodepath.basename(path);
  var match = formatEndpoint(filename, entry);
  var match$1 = entry.endpoint;
  var iconPath;
  iconPath = typeof match$1 !== "object" || match$1.TAG !== "Agda" ? undefined : ({
        dark: Vscode.Uri.joinPath(extensionUri, "asset/dark.png"),
        light: Vscode.Uri.joinPath(extensionUri, "asset/light.png")
      });
  var baseItem_description = match[1];
  var baseItem_detail = path;
  var baseItem_label = match[0];
  var baseItem = {
    description: baseItem_description,
    detail: baseItem_detail,
    label: baseItem_label
  };
  if (iconPath === undefined) {
    return baseItem;
  }
  var newrecord = Caml_obj.obj_dup(baseItem);
  newrecord.iconPath = Caml_option.some(Caml_option.valFromOption(iconPath));
  return newrecord;
}

function createSeparatorItem(label) {
  return {
          kind: -1,
          label: label
        };
}

function createNoInstallationsItem() {
  return {
          description: "Try installing Agda or ALS first",
          detail: "No executable paths detected",
          label: "$(info) No installations found"
        };
}

var ItemCreation = {
  formatEndpoint: formatEndpoint,
  createEndpointItem: createEndpointItem,
  createSeparatorItem: createSeparatorItem,
  createNoInstallationsItem: createNoInstallationsItem
};

function make() {
  return {
          quickPick: Vscode.window.createQuickPick(),
          subscriptions: [],
          items: []
        };
}

function setPlaceholder(self, placeholder) {
  self.quickPick.placeholder = placeholder;
}

function updateItems(self, items) {
  self.items = items;
  self.quickPick.items = items;
}

function show(self) {
  self.quickPick.show();
}

function onSelection(self, handler) {
  Util$AgdaModeVscode.Disposable.add(self.quickPick.onDidChangeSelection(handler), self.subscriptions);
}

function onHide(self, handler) {
  Util$AgdaModeVscode.Disposable.add(self.quickPick.onDidHide(handler), self.subscriptions);
}

function destroy(self) {
  self.quickPick.dispose();
  self.subscriptions.forEach(function (sub) {
        sub.dispose();
      });
}

var QuickPickManager = {
  make: make,
  setPlaceholder: setPlaceholder,
  updateItems: updateItems,
  show: show,
  onSelection: onSelection,
  onHide: onHide,
  destroy: destroy
};

function entriesToItems(endpointEntries, extensionUri) {
  var pathItems = Object.entries(endpointEntries).map(function (param) {
        return createEndpointItem(param[0], param[1], extensionUri);
      });
  if (pathItems.length > 0) {
    return [{
                kind: -1,
                label: "Installed"
              }].concat(pathItems);
  } else {
    return [{
              description: "Try installing Agda or ALS first",
              detail: "No executable paths detected",
              label: "$(info) No installations found"
            }];
  }
}

async function syncAndGetItems(state, platformDeps) {
  var discoveredEndpoints = await platformDeps.getInstalledEndpointsAndPersistThem2(state.globalStorageUri);
  await Memento$AgdaModeVscode.Module.Endpoints.syncWithPaths(state.memento, discoveredEndpoints);
  var updatedEntries = Memento$AgdaModeVscode.Module.Endpoints.entries(state.memento);
  return entriesToItems(updatedEntries, state.extensionUri);
}

var EndpointSync = {
  entriesToItems: entriesToItems,
  syncAndGetItems: syncAndGetItems
};

async function run(state, platformDeps) {
  var qp = make();
  setPlaceholder(qp, "Switch Version (v2)");
  var cachedEntries = Memento$AgdaModeVscode.Module.Endpoints.entries(state.memento);
  var initialItems = entriesToItems(cachedEntries, state.extensionUri);
  updateItems(qp, initialItems);
  qp.quickPick.show();
  onSelection(qp, (function (_selectedItems) {
          destroy(qp);
        }));
  onHide(qp, (function () {
          destroy(qp);
        }));
  var backgroundUpdate = async function () {
    var updatedItems = await syncAndGetItems(state, platformDeps);
    return updateItems(qp, updatedItems);
  };
  backgroundUpdate();
}

exports.ItemCreation = ItemCreation;
exports.QuickPickManager = QuickPickManager;
exports.EndpointSync = EndpointSync;
exports.run = run;
/* vscode Not a pure module */
