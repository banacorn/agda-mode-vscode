// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Nodepath = require("node:path");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Memento$AgdaModeVscode = require("../Memento.bs.js");

function make() {
  return {
          quickPick: Vscode.window.createQuickPick(),
          subscriptions: []
        };
}

function render(self) {
  self.quickPick.show();
}

function destroy(self) {
  self.quickPick.dispose();
  self.subscriptions.forEach(function (sub) {
        sub.dispose();
      });
}

var QP = {
  make: make,
  render: render,
  destroy: destroy
};

async function run(state, platformDeps) {
  var qp_quickPick = Vscode.window.createQuickPick();
  var qp_subscriptions = [];
  var qp = {
    quickPick: qp_quickPick,
    subscriptions: qp_subscriptions
  };
  qp_quickPick.placeholder = "Switch Version (v2)";
  var installedPaths = await platformDeps.getInstalledEndpointsAndPersistThem2(state.globalStorageUri);
  await Memento$AgdaModeVscode.Module.Endpoints.syncWithPaths(state.memento, installedPaths);
  var endpointEntries = Memento$AgdaModeVscode.Module.Endpoints.entries(state.memento);
  var pathItems = Object.entries(endpointEntries).map(function (param) {
        var entry = param[1];
        var path = param[0];
        var filename = Nodepath.basename(path);
        var match = entry.endpoint;
        var match$1;
        if (match !== undefined) {
          match$1 = match.TAG === "Agda" ? [
              "$(file-binary) " + filename,
              "Agda v" + match._0
            ] : [
              "$(squirrel) " + filename,
              "ALS v" + match._0 + ", Agda v" + match._1
            ];
        } else {
          var error = entry.error;
          match$1 = error !== undefined ? [
              "$(error) " + filename,
              "Error: " + error
            ] : [
              "$(file-binary) " + filename,
              "Unknown version (not probed yet)"
            ];
        }
        return {
                description: match$1[1],
                detail: path,
                label: match$1[0]
              };
      });
  var items = pathItems.length > 0 ? [{
          kind: -1,
          label: "Installed"
        }].concat(pathItems) : [{
        description: "Try installing Agda or ALS first",
        detail: "No executable paths detected",
        label: "$(info) No installations found"
      }];
  qp_quickPick.items = items;
  qp_quickPick.show();
  Util$AgdaModeVscode.Disposable.add(qp_quickPick.onDidChangeSelection(function (_selectedItems) {
            destroy(qp);
          }), qp_subscriptions);
  return Util$AgdaModeVscode.Disposable.add(qp_quickPick.onDidHide(function () {
                  destroy(qp);
                }), qp_subscriptions);
}

exports.QP = QP;
exports.run = run;
/* vscode Not a pure module */
