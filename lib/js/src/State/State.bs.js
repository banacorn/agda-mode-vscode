// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var IM$AgdaModeVscode = require("../InputMethod/IM.bs.js");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var Goal$AgdaModeVscode = require("../Goal.bs.js");
var Goals$AgdaModeVscode = require("../Goals.bs.js");
var Tokens$AgdaModeVscode = require("../Tokens.bs.js");
var Command$AgdaModeVscode = require("../Command.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");
var Response$AgdaModeVscode = require("../Response.bs.js");
var Connection$AgdaModeVscode = require("../Connection/Connection.bs.js");
var Highlighting$AgdaModeVscode = require("../Highlighting.bs.js");
var WebviewPanel$AgdaModeVscode = require("../View/WebviewPanel.bs.js");
var State__Memento$AgdaModeVscode = require("./State__Memento.bs.js");

function make() {
  return {
          display: undefined,
          prompt: undefined
        };
}

function cacheEvent(self, $$event) {
  if (typeof $$event !== "object" || $$event.TAG !== "Display") {
    return ;
  } else {
    self.display = [
      $$event._0,
      $$event._1
    ];
    return ;
  }
}

function cacheRequest(self, $$event, callback) {
  self.prompt = [
    $$event._0,
    $$event._1,
    callback
  ];
}

function clearPrompt(self) {
  self.prompt = undefined;
}

function restore(self, view) {
  var match = self.prompt;
  if (match !== undefined) {
    WebviewPanel$AgdaModeVscode.sendRequest(view, {
          TAG: "Prompt",
          _0: match[0],
          _1: match[1],
          [Symbol.for("name")]: "Prompt"
        }, match[2]);
    return ;
  } else {
    return Core__Option.forEach(self.display, (function (param) {
                  WebviewPanel$AgdaModeVscode.sendEvent(view, {
                        TAG: "Display",
                        _0: param[0],
                        _1: param[1],
                        [Symbol.for("name")]: "Display"
                      });
                }));
  }
}

var ViewCache = {
  make: make,
  cacheEvent: cacheEvent,
  cacheRequest: cacheRequest,
  clearPrompt: clearPrompt,
  restore: restore
};

function toString(log) {
  switch (log.TAG) {
    case "CommandDispatched" :
        return " <=== " + Command$AgdaModeVscode.toString(log._0);
    case "CommandHandled" :
        return " ===> " + Command$AgdaModeVscode.toString(log._0);
    case "RequestSent" :
        return "   <- " + Request$AgdaModeVscode.toString(log._0);
    case "ResponseHandled" :
        return "    > " + Response$AgdaModeVscode.toString(log._0);
    case "Others" :
        return log._0;
    
  }
}

var Log = {
  toString: toString
};

function make$1(channels, globalStorageUri, extensionPath, memento, editor, semanticTokens) {
  return {
          connection: undefined,
          agdaVersion: undefined,
          editor: editor,
          document: editor.document,
          panelCache: {
            display: undefined,
            prompt: undefined
          },
          runningInfoLog: [],
          goals: [],
          tokens: Tokens$AgdaModeVscode.make(semanticTokens),
          goals2: Goals$AgdaModeVscode.make(),
          highlighting: Highlighting$AgdaModeVscode.make(),
          cursor: undefined,
          editorIM: IM$AgdaModeVscode.make(channels.inputMethod),
          promptIM: IM$AgdaModeVscode.make(channels.inputMethod),
          subscriptions: [],
          onRemoveFromRegistry: Chan$AgdaModeVscode.make(),
          globalStorageUri: globalStorageUri,
          extensionPath: extensionPath,
          memento: State__Memento$AgdaModeVscode.make(memento),
          channels: channels
        };
}

async function destroy(state, alsoRemoveFromRegistry) {
  await Goals$AgdaModeVscode.waitUntilNotBusy(state.goals2);
  if (alsoRemoveFromRegistry) {
    Chan$AgdaModeVscode.emit(state.onRemoveFromRegistry, undefined);
  }
  Chan$AgdaModeVscode.destroy(state.onRemoveFromRegistry);
  state.goals.forEach(Goal$AgdaModeVscode.destroyDecoration);
  Goals$AgdaModeVscode.destroy(state.goals2);
  Highlighting$AgdaModeVscode.destroy(state.highlighting);
  state.subscriptions.forEach(function (prim) {
        return prim.dispose();
      });
  return await Connection$AgdaModeVscode.destroy(state.connection);
}

function setPrompt(value) {
  Vscode.commands.executeCommand("setContext", "agdaModePrompting", value);
}

function setIM(value) {
  Vscode.commands.executeCommand("setContext", "agdaModeTyping", value);
}

var Context = {
  setPrompt: setPrompt,
  setIM: setIM
};

exports.ViewCache = ViewCache;
exports.Log = Log;
exports.make = make$1;
exports.destroy = destroy;
exports.Context = Context;
/* vscode Not a pure module */
