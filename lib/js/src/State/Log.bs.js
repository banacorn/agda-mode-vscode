// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var PervasivesU = require("rescript/lib/js/pervasivesU.js");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var Command$AgdaModeVscode = require("../Command.bs.js");
var Memento$AgdaModeVscode = require("../Memento.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");
var Response$AgdaModeVscode = require("../Response.bs.js");

function toString($$event) {
  if (typeof $$event !== "object") {
    if ($$event === "Destroyed") {
      return "Destroyed";
    } else {
      return "Selected No Installations";
    }
  }
  switch ($$event.TAG) {
    case "SelectedEndpoint" :
        return "Endpoint: " + $$event._0 + ", " + Memento$AgdaModeVscode.Module.Endpoints.endpointToString($$event._1.endpoint) + (
                $$event._2 ? ", selected" : ""
              );
    case "SelectedDownloadAction" :
        return "Selected Download Action: downloaded=" + PervasivesU.string_of_bool($$event._0) + ", versionString=" + $$event._1;
    case "SelectedOpenFolder" :
        return "Selected Open Folder: " + $$event._0;
    case "UpdatedEndpoints" :
        return "UpdatedEndpoints: " + $$event._0.map(function (param) {
                      var error = param[2];
                      var endpoint = param[1];
                      var tmp;
                      if (typeof endpoint !== "object") {
                        tmp = "Unknown";
                      } else if (endpoint.TAG === "Agda") {
                        var version = endpoint._0;
                        tmp = version !== undefined ? "Agda(" + version + ")" : "Agda(None)";
                      } else {
                        var match = endpoint._0;
                        tmp = match !== undefined ? "ALS(" + match[0] + ", " + match[1] + ")" : "ALS(None)";
                      }
                      return param[0] + ": " + tmp + (
                              error !== undefined ? " [Error: " + error + "]" : ""
                            ) + (
                              param[3] ? " [Selected]" : ""
                            );
                    }).join("\n");
    case "Others" :
        return $$event._0;
    
  }
}

var SwitchVersion = {
  toString: toString
};

function toString$1($$event) {
  switch ($$event.TAG) {
    case "ConnectedToAgda" :
        return "ConnectedToAgda: " + $$event._0 + " - Agda v" + $$event._1;
    case "ConnectedToALS" :
        return "ConnectedToALS: " + $$event._0 + " - Agda v" + $$event._2 + " Language Server v" + $$event._1;
    case "Disconnected" :
        return "Disconnected: " + $$event._0;
    
  }
}

var Connection = {
  toString: toString$1
};

function toString$2($$event) {
  switch ($$event.TAG) {
    case "Lookup" :
        return "lookup: " + $$event._0 + " " + (
                $$event._1 ? "found" : "not found"
              );
    case "Add" :
        return "add: " + $$event._0;
    case "Remove" :
        return "remove: " + $$event._0;
    
  }
}

var Registry = {
  toString: toString$2
};

function toString$3($$event) {
  return "Config changed:\nBefore: " + $$event._0.join(", ") + "\nAfter: " + $$event._1.join(", ");
}

var Config = {
  toString: toString$3
};

function toString$4(log) {
  switch (log.TAG) {
    case "CommandDispatched" :
        return " <=== " + Command$AgdaModeVscode.toString(log._0);
    case "CommandHandled" :
        return " ===> " + Command$AgdaModeVscode.toString(log._0);
    case "RequestSent" :
        return "   <- " + Request$AgdaModeVscode.toString(log._0);
    case "ResponseHandled" :
        return "    > " + Response$AgdaModeVscode.toString(log._0);
    case "Registry" :
        return "[ Registry         ] " + toString$2(log._0);
    case "TokensReset" :
        return "Tokens reset: " + log._0;
    case "SwitchVersionUI" :
        return "[ SwitchVersion    ] " + toString(log._0);
    case "Connection" :
        return "[ Connection       ] " + toString$1(log._0);
    case "Config" :
        return "[ Config           ] " + toString$3(log._0);
    case "Others" :
        return log._0;
    
  }
}

function isConfig(log) {
  if (log.TAG === "Config") {
    return true;
  } else {
    return false;
  }
}

function isConnection(log) {
  if (log.TAG === "Connection") {
    return true;
  } else {
    return false;
  }
}

function collect(channel) {
  var logs = [];
  var handle = Chan$AgdaModeVscode.on(channel, (function (log) {
          logs.push(log);
        }));
  return function (filter) {
    handle();
    if (filter !== undefined) {
      return logs.filter(filter);
    } else {
      return logs;
    }
  };
}

exports.SwitchVersion = SwitchVersion;
exports.Connection = Connection;
exports.Registry = Registry;
exports.Config = Config;
exports.toString = toString$4;
exports.isConfig = isConfig;
exports.isConnection = isConnection;
exports.collect = collect;
/* Chan-AgdaModeVscode Not a pure module */
