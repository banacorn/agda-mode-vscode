// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("rescript/lib/js/caml_option.js");
var IM$AgdaModeVscode = require("../InputMethod/IM.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Common$AgdaModeVscode = require("../View/Common.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var State__View$AgdaModeVscode = require("./State__View.bs.js");

async function handle(state, output) {
  var handle$1 = async function (kind) {
    if (typeof kind !== "object") {
      if (kind === "Activate") {
        await State__View$AgdaModeVscode.Panel.display(state, {
              TAG: "Plain",
              _0: "Unicode input mode"
            }, []);
        State$AgdaModeVscode.Context.setIM(true);
        return await State__View$AgdaModeVscode.Panel.updateIM(state, "Activate");
      }
      State$AgdaModeVscode.Context.setIM(false);
      return await State__View$AgdaModeVscode.Panel.updateIM(state, "Deactivate");
    } else {
      if (kind.TAG === "UpdateView") {
        return await State__View$AgdaModeVscode.Panel.updateIM(state, {
                    TAG: "Update",
                    _0: kind._0,
                    _1: kind._1,
                    _2: kind._2
                  });
      }
      await Editor$AgdaModeVscode.$$Text.batchReplace(state.document, kind._0);
      return kind._1();
    }
  };
  await Util$AgdaModeVscode.Promise_.oneByOne(output.map(function (x) {
            return function () {
              return handle$1(x);
            };
          }));
}

function runAndHandle(state, action) {
  return handle(state, IM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), action));
}

function activate(state) {
  var intervals = Editor$AgdaModeVscode.$$Selection.getMany(state.editor).map(function (extra) {
        return Common$AgdaModeVscode.Interval.fromVSCodeRange(state.document, extra);
      });
  return runAndHandle(state, {
              TAG: "Activate",
              _0: intervals
            });
}

var previous = {
  contents: ""
};

async function handle$1(state, output) {
  var handle$2 = async function (kind) {
    if (typeof kind !== "object") {
      if (kind !== "Activate") {
        return await State__View$AgdaModeVscode.Panel.updateIM(state, "Deactivate");
      }
      await State__View$AgdaModeVscode.Panel.updateIM(state, "Activate");
      return await State__View$AgdaModeVscode.Panel.updatePromptIM(state, previous.contents);
    } else {
      if (kind.TAG === "UpdateView") {
        return await State__View$AgdaModeVscode.Panel.updateIM(state, {
                    TAG: "Update",
                    _0: kind._0,
                    _1: kind._1,
                    _2: kind._2
                  });
      }
      kind._1();
      var replaced = {
        contents: previous.contents
      };
      var delta = {
        contents: 0
      };
      var replace = function (param) {
        var t = param[1];
        var match = Common$AgdaModeVscode.Interval.fromVSCodeRange(state.document, param[0]);
        var end_ = match[1];
        var start = match[0];
        replaced.contents = replaced.contents.slice(0, delta.contents + start | 0) + t + replaced.contents.slice(delta.contents + end_ | 0);
        delta.contents = (delta.contents + t.length | 0) - (end_ - start | 0) | 0;
      };
      kind._0.forEach(replace);
      previous.contents = replaced.contents;
      return await State__View$AgdaModeVscode.Panel.updatePromptIM(state, replaced.contents);
    }
  };
  await Util$AgdaModeVscode.Promise_.oneByOne(output.map(function (x) {
            return function () {
              return handle$2(x);
            };
          }));
}

function runAndHandle$1(state, action) {
  return handle$1(state, IM$AgdaModeVscode.run(state.promptIM, undefined, action));
}

function keyUpdate(state, next) {
  var deviseChange = function (previous, next) {
    var inputLength = next.length;
    var init = function (s) {
      return s.substring(0, s.length - 1 | 0);
    };
    var last = function (s) {
      return s.substring(s.length - 1 | 0);
    };
    if (init(next) === previous) {
      return {
              TAG: "KeyUpdate",
              _0: [{
                  offset: inputLength - 1 | 0,
                  insertedText: last(next),
                  replacedTextLength: 0
                }]
            };
    } else if (next === init(previous)) {
      return {
              TAG: "KeyUpdate",
              _0: [{
                  offset: inputLength,
                  insertedText: "",
                  replacedTextLength: 1
                }]
            };
    } else {
      return "Deactivate";
    }
  };
  var input = deviseChange(previous.contents, next);
  var output = IM$AgdaModeVscode.run(state.promptIM, undefined, input);
  previous.contents = next;
  return handle$1(state, output);
}

function insertChar(state, $$char) {
  return keyUpdate(state, previous.contents + $$char);
}

async function activate$1(state, input) {
  var cursorOffset = input.length - 1 | 0;
  var input$1 = input.substring(0, cursorOffset);
  previous.contents = input$1;
  return await runAndHandle$1(state, {
              TAG: "Activate",
              _0: [[
                  cursorOffset,
                  cursorOffset
                ]]
            });
}

function isActivated(state) {
  if (IM$AgdaModeVscode.isActivated(state.editorIM)) {
    return "Editor";
  } else if (IM$AgdaModeVscode.isActivated(state.promptIM)) {
    return "Prompt";
  } else {
    return "None";
  }
}

function deactivate(state) {
  var match = isActivated(state);
  switch (match) {
    case "Editor" :
        return runAndHandle(state, "Deactivate");
    case "Prompt" :
        return runAndHandle$1(state, "Deactivate");
    case "None" :
        return Promise.resolve();
    
  }
}

async function activateEditorIM(state) {
  var match = isActivated(state);
  switch (match) {
    case "Editor" :
        await runAndHandle(state, "Deactivate");
        return await activate(state);
    case "Prompt" :
        await runAndHandle$1(state, "Deactivate");
        return await activate(state);
    case "None" :
        return await activate(state);
    
  }
}

async function keyUpdatePromptIM(state, input) {
  var match = isActivated(state);
  switch (match) {
    case "Editor" :
        return await State__View$AgdaModeVscode.Panel.updatePromptIM(state, input);
    case "Prompt" :
        return await keyUpdate(state, input);
    case "None" :
        if (input.endsWith("\\")) {
          return await activate$1(state, input);
        } else {
          return await State__View$AgdaModeVscode.Panel.updatePromptIM(state, input);
        }
    
  }
}

function keyUpdateEditorIM(state, changes) {
  var match = isActivated(state);
  switch (match) {
    case "Editor" :
        return handle(state, IM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), {
                        TAG: "KeyUpdate",
                        _0: changes
                      }));
    case "Prompt" :
    case "None" :
        return Promise.resolve();
    
  }
}

function select(state, intervals) {
  var match = isActivated(state);
  switch (match) {
    case "Editor" :
        return runAndHandle(state, {
                    TAG: "MouseSelect",
                    _0: intervals
                  });
    case "Prompt" :
        return runAndHandle$1(state, {
                    TAG: "MouseSelect",
                    _0: intervals
                  });
    case "None" :
        return Promise.resolve();
    
  }
}

async function chooseSymbol(state, symbol) {
  var match = isActivated(state);
  switch (match) {
    case "Editor" :
        await runAndHandle(state, {
              TAG: "Candidate",
              _0: {
                TAG: "ChooseSymbol",
                _0: symbol
              }
            });
        return await deactivate(state);
    case "Prompt" :
        await runAndHandle$1(state, {
              TAG: "Candidate",
              _0: {
                TAG: "ChooseSymbol",
                _0: symbol
              }
            });
        return await deactivate(state);
    case "None" :
        return ;
    
  }
}

async function insertChar$1(state, $$char) {
  var match = isActivated(state);
  switch (match) {
    case "Editor" :
        var $$char$1 = $$char.charAt(0);
        var positions = Editor$AgdaModeVscode.Cursor.getMany(state.editor);
        await Editor$AgdaModeVscode.$$Text.batchInsert(state.document, positions, $$char$1);
        return Editor$AgdaModeVscode.focus(state.document);
    case "Prompt" :
        return await insertChar(state, $$char);
    case "None" :
        return ;
    
  }
}

function moveUp(state) {
  var match = isActivated(state);
  switch (match) {
    case "Editor" :
        return runAndHandle(state, {
                    TAG: "Candidate",
                    _0: "BrowseUp"
                  });
    case "Prompt" :
        return runAndHandle$1(state, {
                    TAG: "Candidate",
                    _0: "BrowseUp"
                  });
    case "None" :
        return Promise.resolve();
    
  }
}

function moveDown(state) {
  var match = isActivated(state);
  switch (match) {
    case "Editor" :
        return runAndHandle(state, {
                    TAG: "Candidate",
                    _0: "BrowseDown"
                  });
    case "Prompt" :
        return runAndHandle$1(state, {
                    TAG: "Candidate",
                    _0: "BrowseDown"
                  });
    case "None" :
        return Promise.resolve();
    
  }
}

function moveLeft(state) {
  var match = isActivated(state);
  switch (match) {
    case "Editor" :
        return runAndHandle(state, {
                    TAG: "Candidate",
                    _0: "BrowseLeft"
                  });
    case "Prompt" :
        return runAndHandle$1(state, {
                    TAG: "Candidate",
                    _0: "BrowseLeft"
                  });
    case "None" :
        return Promise.resolve();
    
  }
}

function moveRight(state) {
  var match = isActivated(state);
  switch (match) {
    case "Editor" :
        return runAndHandle(state, {
                    TAG: "Candidate",
                    _0: "BrowseRight"
                  });
    case "Prompt" :
        return runAndHandle$1(state, {
                    TAG: "Candidate",
                    _0: "BrowseRight"
                  });
    case "None" :
        return Promise.resolve();
    
  }
}

var Module = {
  deactivate: deactivate,
  select: select,
  insertChar: insertChar$1,
  chooseSymbol: chooseSymbol,
  moveUp: moveUp,
  moveDown: moveDown,
  moveLeft: moveLeft,
  moveRight: moveRight,
  activateEditorIM: activateEditorIM,
  keyUpdateEditorIM: keyUpdateEditorIM,
  keyUpdatePromptIM: keyUpdatePromptIM
};

exports.Module = Module;
exports.deactivate = deactivate;
exports.select = select;
exports.insertChar = insertChar$1;
exports.chooseSymbol = chooseSymbol;
exports.moveUp = moveUp;
exports.moveDown = moveDown;
exports.moveLeft = moveLeft;
exports.moveRight = moveRight;
exports.activateEditorIM = activateEditorIM;
exports.keyUpdateEditorIM = keyUpdateEditorIM;
exports.keyUpdatePromptIM = keyUpdatePromptIM;
/* IM-AgdaModeVscode Not a pure module */
