// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var VSCode = require("rescript-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var IM$AgdaModeVscode = require("../InputMethod/IM.bs.js");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var Goal$AgdaModeVscode = require("../Goal.bs.js");
var Item$AgdaModeVscode = require("../View/Component/Item.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Goals$AgdaModeVscode = require("../Goals.bs.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Common$AgdaModeVscode = require("../View/Common.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var Parser$AgdaModeVscode = require("../Parser/Parser.bs.js");
var Tokens$AgdaModeVscode = require("../Tokens.bs.js");
var Command$AgdaModeVscode = require("../Command.bs.js");
var Translator$AgdaModeVscode = require("../InputMethod/Translator.bs.js");
var State__View$AgdaModeVscode = require("./State__View.bs.js");
var State__Response$AgdaModeVscode = require("./State__Response.bs.js");
var Connection__Error$AgdaModeVscode = require("../Connection/Shared/Connection__Error.bs.js");
var State__Connection$AgdaModeVscode = require("./State__Connection.bs.js");
var State__InputMethod$AgdaModeVscode = require("./State__InputMethod.bs.js");
var State__SwitchVersion$AgdaModeVscode = require("./State__SwitchVersion.bs.js");
var State__SwitchVersion2$AgdaModeVscode = require("./State__SwitchVersion2.bs.js");

async function dispatchCommand(state, command) {
  Chan$AgdaModeVscode.emit(state.channels.log, {
        TAG: "CommandDispatched",
        _0: command
      });
  var dispatchCommand$1 = function (extra) {
    return dispatchCommand(state, extra);
  };
  var sendAgdaRequest = async function (request) {
    await State__Connection$AgdaModeVscode.sendRequest(state, (function (extra) {
            return State__Response$AgdaModeVscode.handle(state, dispatchCommand$1, extra);
          }), request);
    Chan$AgdaModeVscode.emit(state.channels.log, {
          TAG: "CommandHandled",
          _0: command
        });
    return Chan$AgdaModeVscode.emit(state.channels.commandHandled, command);
  };
  var header = {
    TAG: "Plain",
    _0: Command$AgdaModeVscode.toString(command)
  };
  if (typeof command !== "object") {
    switch (command) {
      case "Load" :
          await State__View$AgdaModeVscode.DebugBuffer.restore(state);
          await State__View$AgdaModeVscode.Panel.display(state, {
                TAG: "Plain",
                _0: "Loading ..."
              }, []);
          await state.document.save();
          var options = VSCode.TextDocumentShowOptions.make(undefined, false, undefined, undefined, undefined);
          await Vscode.window.showTextDocument(state.document, options);
          return await sendAgdaRequest("Load");
      case "Quit" :
          await State$AgdaModeVscode.destroy(state, true);
          return ;
      case "Restart" :
          state.runningInfoLog = [];
          return await dispatchCommand(state, "Load");
      case "Refresh" :
          State__View$AgdaModeVscode.Panel.restore(state);
          Goals$AgdaModeVscode.redecorate(state.goals);
          Tokens$AgdaModeVscode.removeDecorations(state.tokens, state.editor);
          Tokens$AgdaModeVscode.applyDecorations(state.tokens, state.editor);
          return await State__View$AgdaModeVscode.DebugBuffer.restore(state);
      case "Compile" :
          return await sendAgdaRequest("Compile");
      case "ToggleDisplayOfImplicitArguments" :
          return await sendAgdaRequest("ToggleDisplayOfImplicitArguments");
      case "ToggleDisplayOfIrrelevantArguments" :
          return await sendAgdaRequest("ToggleDisplayOfIrrelevantArguments");
      case "ShowConstraints" :
          return await sendAgdaRequest("ShowConstraints");
      case "NextGoal" :
          Goals$AgdaModeVscode.jumpToTheNextGoal(state.goals, state.editor);
          return Chan$AgdaModeVscode.emit(state.channels.commandHandled, "NextGoal");
      case "PreviousGoal" :
          Goals$AgdaModeVscode.jumpToThePreviousGoal(state.goals, state.editor);
          return Chan$AgdaModeVscode.emit(state.channels.commandHandled, "PreviousGoal");
      case "Give" :
          var goal = Goals$AgdaModeVscode.getGoalAtCursor(state.goals, state.editor);
          if (goal !== undefined) {
            if (Goal$AgdaModeVscode.getContent(goal, state.document) === "") {
              return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                          body: undefined,
                          placeholder: "expression to give:",
                          value: undefined
                        }, (async function (expr) {
                            if (expr === "") {
                              state.isInRefineOrGiveOperation = true;
                              await sendAgdaRequest({
                                    TAG: "Give",
                                    _0: goal
                                  });
                              state.isInRefineOrGiveOperation = false;
                            } else {
                              await Goals$AgdaModeVscode.modify(state.goals, state.document, goal.index, (function (param) {
                                      return expr;
                                    }));
                              state.isInRefineOrGiveOperation = true;
                              await sendAgdaRequest({
                                    TAG: "Give",
                                    _0: goal
                                  });
                              state.isInRefineOrGiveOperation = false;
                            }
                          }));
            } else {
              state.isInRefineOrGiveOperation = true;
              await sendAgdaRequest({
                    TAG: "Give",
                    _0: goal
                  });
              state.isInRefineOrGiveOperation = false;
              return ;
            }
          } else {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
      case "Refine" :
          var goal$1 = Goals$AgdaModeVscode.getGoalAtCursor(state.goals, state.editor);
          if (goal$1 !== undefined) {
            state.isInRefineOrGiveOperation = true;
            await sendAgdaRequest({
                  TAG: "Refine",
                  _0: goal$1
                });
            state.isInRefineOrGiveOperation = false;
            return ;
          } else {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
      case "Case" :
          var goal$2 = Goals$AgdaModeVscode.getGoalAtCursor(state.goals, state.editor);
          if (goal$2 !== undefined) {
            Goals$AgdaModeVscode.markAsCaseSplited(state.goals, goal$2);
            if (Goal$AgdaModeVscode.getContent(goal$2, state.document) === "") {
              return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                          body: "Please specify which variable(s) you wish to split, multiple variables are delimited by whitespaces",
                          placeholder: "variable(s) to case split:",
                          value: undefined
                        }, (async function (expr) {
                            if (expr === "") {
                              return await sendAgdaRequest({
                                          TAG: "Case",
                                          _0: goal$2
                                        });
                            } else {
                              await Goals$AgdaModeVscode.modify(state.goals, state.document, goal$2.index, (function (param) {
                                      return expr;
                                    }));
                              return await sendAgdaRequest({
                                          TAG: "Case",
                                          _0: goal$2
                                        });
                            }
                          }));
            } else {
              return await sendAgdaRequest({
                          TAG: "Case",
                          _0: goal$2
                        });
            }
          } else {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
      case "WhyInScope" :
          var placeholder = "name:";
          var goal$3 = Goals$AgdaModeVscode.getGoalAtCursor(state.goals, state.editor);
          if (goal$3 === undefined) {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: placeholder,
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "WhyInScopeGlobal",
                                      _0: expr
                                    });
                        }));
          }
          var expr = Goal$AgdaModeVscode.getContent(goal$3, state.document);
          if (expr === "") {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: placeholder,
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "WhyInScope",
                                      _0: expr,
                                      _1: goal$3
                                    });
                        }));
          } else {
            return await sendAgdaRequest({
                        TAG: "WhyInScope",
                        _0: expr,
                        _1: goal$3
                      });
          }
      case "SwitchAgdaVersion" :
          return await State__SwitchVersion$AgdaModeVscode.run(state, state.platformDeps);
      case "SwitchAgdaVersion2" :
          return await State__SwitchVersion2$AgdaModeVscode.run(state, state.platformDeps);
      case "Escape" :
          if (IM$AgdaModeVscode.isActivated(state.editorIM) || IM$AgdaModeVscode.isActivated(state.promptIM)) {
            return await State__InputMethod$AgdaModeVscode.deactivate(state);
          } else {
            return await State__View$AgdaModeVscode.Panel.interruptPrompt(state);
          }
      case "LookupSymbol" :
          var match = Util$AgdaModeVscode.Promise_.pending();
          var resolve = match[1];
          var selectedText = Editor$AgdaModeVscode.$$Text.get(state.document, Editor$AgdaModeVscode.$$Selection.get(state.editor)).trim();
          if (selectedText === "") {
            State__View$AgdaModeVscode.Panel.prompt(state, {
                  TAG: "Plain",
                  _0: "Lookup Unicode Symbol Input Sequence"
                }, {
                  body: undefined,
                  placeholder: "symbol to lookup:",
                  value: undefined
                }, (function (input) {
                    resolve(input.trim());
                    return Promise.resolve();
                  }));
          } else {
            resolve(selectedText);
          }
          var input = await match[0];
          var sequences = Core__Option.getOr(Translator$AgdaModeVscode.lookup(input), []);
          if (sequences.length === 0) {
            return await State__View$AgdaModeVscode.Panel.display(state, {
                        TAG: "Warning",
                        _0: "No Input Sequences Found for \"" + selectedText + "\""
                      }, []);
          } else {
            return await State__View$AgdaModeVscode.Panel.display(state, {
                        TAG: "Success",
                        _0: String(sequences.length) + " Input Sequences Found for \"" + selectedText + "\""
                      }, sequences.map(function (sequence) {
                            return Item$AgdaModeVscode.plainText(sequence);
                          }));
          }
      case "OpenDebugBuffer" :
          State__View$AgdaModeVscode.DebugBuffer.make(state);
          return await State__View$AgdaModeVscode.DebugBuffer.reveal(state);
      
    }
  } else {
    switch (command.TAG) {
      case "SolveConstraints" :
          var normalization = command._0;
          var goal$4 = Goals$AgdaModeVscode.getGoalAtCursor(state.goals, state.editor);
          if (goal$4 !== undefined) {
            return await sendAgdaRequest({
                        TAG: "SolveConstraints",
                        _0: normalization,
                        _1: goal$4
                      });
          } else {
            return await sendAgdaRequest({
                        TAG: "SolveConstraintsGlobal",
                        _0: normalization
                      });
          }
      case "ShowGoals" :
          return await sendAgdaRequest({
                      TAG: "ShowGoals",
                      _0: command._0
                    });
      case "SearchAbout" :
          var normalization$1 = command._0;
          return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                      body: undefined,
                      placeholder: "name:",
                      value: undefined
                    }, (function (expr) {
                        return sendAgdaRequest({
                                    TAG: "SearchAbout",
                                    _0: normalization$1,
                                    _1: expr
                                  });
                      }));
      case "ElaborateAndGive" :
          var normalization$2 = command._0;
          var goal$5 = Goals$AgdaModeVscode.getGoalAtCursor(state.goals, state.editor);
          if (goal$5 === undefined) {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
          var expr$1 = Goal$AgdaModeVscode.getContent(goal$5, state.document);
          if (expr$1 === "") {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: "expression to elaborate and give:",
                        value: undefined
                      }, (async function (expr) {
                          if (expr === "") {
                            return await sendAgdaRequest({
                                        TAG: "ElaborateAndGive",
                                        _0: normalization$2,
                                        _1: expr,
                                        _2: goal$5
                                      });
                          } else {
                            await Goals$AgdaModeVscode.modify(state.goals, state.document, goal$5.index, (function (param) {
                                    return expr;
                                  }));
                            return await sendAgdaRequest({
                                        TAG: "ElaborateAndGive",
                                        _0: normalization$2,
                                        _1: expr,
                                        _2: goal$5
                                      });
                          }
                        }));
          } else {
            return await sendAgdaRequest({
                        TAG: "ElaborateAndGive",
                        _0: normalization$2,
                        _1: expr$1,
                        _2: goal$5
                      });
          }
      case "Auto" :
          var goal$6 = Goals$AgdaModeVscode.getGoalAtCursor(state.goals, state.editor);
          if (goal$6 !== undefined) {
            return await sendAgdaRequest({
                        TAG: "Auto",
                        _0: command._0,
                        _1: goal$6
                      });
          } else {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
      case "HelperFunctionType" :
          var normalization$3 = command._0;
          var goal$7 = Goals$AgdaModeVscode.getGoalAtCursor(state.goals, state.editor);
          if (goal$7 === undefined) {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
          var expr$2 = Goal$AgdaModeVscode.getContent(goal$7, state.document);
          if (expr$2 === "") {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: "expression:",
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "HelperFunctionType",
                                      _0: normalization$3,
                                      _1: expr,
                                      _2: goal$7
                                    });
                        }));
          } else {
            return await sendAgdaRequest({
                        TAG: "HelperFunctionType",
                        _0: normalization$3,
                        _1: expr$2,
                        _2: goal$7
                      });
          }
      case "InferType" :
          var normalization$4 = command._0;
          var placeholder$1 = "expression to infer:";
          var goal$8 = Goals$AgdaModeVscode.getGoalAtCursor(state.goals, state.editor);
          if (goal$8 === undefined) {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: placeholder$1,
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "InferTypeGlobal",
                                      _0: normalization$4,
                                      _1: expr
                                    });
                        }));
          }
          var expr$3 = Goal$AgdaModeVscode.getContent(goal$8, state.document);
          if (expr$3 === "") {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: placeholder$1,
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "InferType",
                                      _0: normalization$4,
                                      _1: expr,
                                      _2: goal$8
                                    });
                        }));
          } else {
            return await sendAgdaRequest({
                        TAG: "InferType",
                        _0: normalization$4,
                        _1: expr$3,
                        _2: goal$8
                      });
          }
      case "Context" :
          var goal$9 = Goals$AgdaModeVscode.getGoalAtCursor(state.goals, state.editor);
          if (goal$9 !== undefined) {
            return await sendAgdaRequest({
                        TAG: "Context",
                        _0: command._0,
                        _1: goal$9
                      });
          } else {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
      case "GoalType" :
          var goal$10 = Goals$AgdaModeVscode.getGoalAtCursor(state.goals, state.editor);
          if (goal$10 !== undefined) {
            return await sendAgdaRequest({
                        TAG: "GoalType",
                        _0: command._0,
                        _1: goal$10
                      });
          } else {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
      case "GoalTypeAndContext" :
          var goal$11 = Goals$AgdaModeVscode.getGoalAtCursor(state.goals, state.editor);
          if (goal$11 !== undefined) {
            return await sendAgdaRequest({
                        TAG: "GoalTypeAndContext",
                        _0: command._0,
                        _1: goal$11
                      });
          } else {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
      case "EventFromView" :
          var $$event = command._0;
          if (typeof $$event !== "object") {
            if ($$event === "Initialized") {
              return ;
            }
            var error = await State$AgdaModeVscode.destroy(state, true);
            if (error.TAG === "Ok") {
              return ;
            }
            var match$1 = Connection__Error$AgdaModeVscode.toString(error._0);
            var header$1 = {
              TAG: "Error",
              _0: "Cannot destruct the view: " + match$1[0]
            };
            var body = [Item$AgdaModeVscode.plainText(match$1[1])];
            return await State__View$AgdaModeVscode.Panel.display(state, header$1, body);
          } else {
            switch ($$event.TAG) {
              case "InputMethod" :
                  var $$char = $$event._0;
                  if ($$char.TAG === "InsertChar") {
                    return await dispatchCommand(state, {
                                TAG: "InputMethod",
                                _0: {
                                  TAG: "InsertChar",
                                  _0: $$char._0
                                }
                              });
                  } else {
                    return await State__InputMethod$AgdaModeVscode.chooseSymbol(state, $$char._0);
                  }
              case "PromptIMUpdate" :
                  var interval = $$event._0;
                  if (typeof interval === "object") {
                    if (interval.TAG === "MouseSelect") {
                      return await State__InputMethod$AgdaModeVscode.select(state, [interval._0]);
                    } else {
                      return await State__InputMethod$AgdaModeVscode.keyUpdatePromptIM(state, interval._0);
                    }
                  }
                  switch (interval) {
                    case "BrowseUp" :
                        return await dispatchCommand(state, {
                                    TAG: "InputMethod",
                                    _0: "BrowseUp"
                                  });
                    case "BrowseDown" :
                        return await dispatchCommand(state, {
                                    TAG: "InputMethod",
                                    _0: "BrowseDown"
                                  });
                    case "BrowseLeft" :
                        return await dispatchCommand(state, {
                                    TAG: "InputMethod",
                                    _0: "BrowseLeft"
                                  });
                    case "BrowseRight" :
                        return await dispatchCommand(state, {
                                    TAG: "InputMethod",
                                    _0: "BrowseRight"
                                  });
                    case "Escape" :
                        if (IM$AgdaModeVscode.isActivated(state.editorIM) || IM$AgdaModeVscode.isActivated(state.promptIM)) {
                          return await State__InputMethod$AgdaModeVscode.deactivate(state);
                        } else {
                          return await State__View$AgdaModeVscode.Panel.interruptPrompt(state);
                        }
                    
                  }
              case "JumpToTarget" :
                  var link = $$event._0;
                  Editor$AgdaModeVscode.focus(state.document);
                  var path = Parser$AgdaModeVscode.filepath(state.document.fileName);
                  if (link.TAG !== "SrcLoc") {
                    return Goals$AgdaModeVscode.setCursorByIndex(state.goals, state.editor, link._0);
                  }
                  var match$2 = link._0;
                  if (typeof match$2 !== "object") {
                    return ;
                  }
                  var fileName = match$2._0;
                  if (fileName === undefined) {
                    return ;
                  }
                  var fileName$1 = Parser$AgdaModeVscode.filepath(fileName);
                  if (Parser$AgdaModeVscode.filepath(path) !== Parser$AgdaModeVscode.filepath(fileName$1)) {
                    return ;
                  }
                  var ranges = match$2._1.map(Common$AgdaModeVscode.AgdaInterval.toVSCodeRange);
                  Editor$AgdaModeVscode.$$Selection.setMany(state.editor, ranges);
                  return Core__Option.forEach(ranges[0], (function (range) {
                                state.editor.revealRange(range, undefined);
                              }));
              
            }
          }
      case "GoalTypeContextAndInferredType" :
          var normalization$5 = command._0;
          var goal$12 = Goals$AgdaModeVscode.getGoalAtCursor(state.goals, state.editor);
          if (goal$12 === undefined) {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
          var expr$4 = Goal$AgdaModeVscode.getContent(goal$12, state.document);
          if (expr$4 === "") {
            return await sendAgdaRequest({
                        TAG: "GoalTypeAndContext",
                        _0: normalization$5,
                        _1: goal$12
                      });
          } else {
            return await sendAgdaRequest({
                        TAG: "GoalTypeContextAndInferredType",
                        _0: normalization$5,
                        _1: expr$4,
                        _2: goal$12
                      });
          }
      case "GoalTypeContextAndCheckedType" :
          var normalization$6 = command._0;
          var goal$13 = Goals$AgdaModeVscode.getGoalAtCursor(state.goals, state.editor);
          if (goal$13 === undefined) {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
          var expr$5 = Goal$AgdaModeVscode.getContent(goal$13, state.document);
          if (expr$5 === "") {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: "expression to type:",
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "GoalTypeContextAndCheckedType",
                                      _0: normalization$6,
                                      _1: expr,
                                      _2: goal$13
                                    });
                        }));
          } else {
            return await sendAgdaRequest({
                        TAG: "GoalTypeContextAndCheckedType",
                        _0: normalization$6,
                        _1: expr$5,
                        _2: goal$13
                      });
          }
      case "ModuleContents" :
          var normalization$7 = command._0;
          var placeholder$2 = "module name:";
          var goal$14 = Goals$AgdaModeVscode.getGoalAtCursor(state.goals, state.editor);
          if (goal$14 === undefined) {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: placeholder$2,
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "ModuleContentsGlobal",
                                      _0: normalization$7,
                                      _1: expr
                                    });
                        }));
          }
          var expr$6 = Goal$AgdaModeVscode.getContent(goal$14, state.document);
          if (expr$6 === "") {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: placeholder$2,
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "ModuleContents",
                                      _0: normalization$7,
                                      _1: expr,
                                      _2: goal$14
                                    });
                        }));
          } else {
            return await sendAgdaRequest({
                        TAG: "ModuleContents",
                        _0: normalization$7,
                        _1: expr$6,
                        _2: goal$14
                      });
          }
      case "ComputeNormalForm" :
          var computeMode = command._0;
          var placeholder$3 = "expression to normalize:";
          var goal$15 = Goals$AgdaModeVscode.getGoalAtCursor(state.goals, state.editor);
          if (goal$15 === undefined) {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: placeholder$3,
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "ComputeNormalFormGlobal",
                                      _0: computeMode,
                                      _1: expr
                                    });
                        }));
          }
          var expr$7 = Goal$AgdaModeVscode.getContent(goal$15, state.document);
          if (expr$7 === "") {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: placeholder$3,
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "ComputeNormalForm",
                                      _0: computeMode,
                                      _1: expr,
                                      _2: goal$15
                                    });
                        }));
          } else {
            return await sendAgdaRequest({
                        TAG: "ComputeNormalForm",
                        _0: computeMode,
                        _1: expr$7,
                        _2: goal$15
                      });
          }
      case "InputMethod" :
          var $$char$1 = command._0;
          if (typeof $$char$1 === "object") {
            return await State__InputMethod$AgdaModeVscode.insertChar(state, $$char$1._0);
          }
          switch ($$char$1) {
            case "Activate" :
                if (Config$AgdaModeVscode.InputMethod.getEnabled()) {
                  return await State__InputMethod$AgdaModeVscode.activateEditorIM(state);
                } else {
                  return ;
                }
            case "BrowseUp" :
                return await State__InputMethod$AgdaModeVscode.moveUp(state);
            case "BrowseRight" :
                return await State__InputMethod$AgdaModeVscode.moveRight(state);
            case "BrowseDown" :
                return await State__InputMethod$AgdaModeVscode.moveDown(state);
            case "BrowseLeft" :
                return await State__InputMethod$AgdaModeVscode.moveLeft(state);
            
          }
      
    }
  }
}

exports.dispatchCommand = dispatchCommand;
/* vscode Not a pure module */
