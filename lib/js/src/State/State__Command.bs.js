// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var VSCode = require("rescript-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var Nodepath = require("node:path");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var IM$AgdaModeVscode = require("../InputMethod/IM.bs.js");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var Goal$AgdaModeVscode = require("../Goal.bs.js");
var Item$AgdaModeVscode = require("../View/Component/Item.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Goal2$AgdaModeVscode = require("../Goal2.bs.js");
var Goals$AgdaModeVscode = require("../Goals.bs.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Common$AgdaModeVscode = require("../View/Common.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var Parser$AgdaModeVscode = require("../Parser/Parser.bs.js");
var Command$AgdaModeVscode = require("../Command.bs.js");
var Translator$AgdaModeVscode = require("../InputMethod/Translator.bs.js");
var State__Goal$AgdaModeVscode = require("./State__Goal.bs.js");
var State__View$AgdaModeVscode = require("./State__View.bs.js");
var Highlighting$AgdaModeVscode = require("../Highlighting.bs.js");
var State__Response$AgdaModeVscode = require("./State__Response.bs.js");
var Connection__Error$AgdaModeVscode = require("../Connection/Connection__Error.bs.js");
var State__Connection$AgdaModeVscode = require("./State__Connection.bs.js");
var State__InputMethod$AgdaModeVscode = require("./State__InputMethod.bs.js");
var State__SwitchVersion$AgdaModeVscode = require("./State__SwitchVersion.bs.js");

async function dispatchCommand(state, command) {
  Chan$AgdaModeVscode.emit(state.channels.log, {
        TAG: "CommandDispatched",
        _0: command,
        [Symbol.for("name")]: "CommandDispatched"
      });
  var dispatchCommand$1 = function (extra) {
    return dispatchCommand(state, extra);
  };
  var sendAgdaRequest = async function (request) {
    await State__Connection$AgdaModeVscode.sendRequest(state, (function (extra) {
            return State__Response$AgdaModeVscode.handle(state, dispatchCommand$1, extra);
          }), request);
    Chan$AgdaModeVscode.emit(state.channels.log, {
          TAG: "CommandHandled",
          _0: command,
          [Symbol.for("name")]: "CommandHandled"
        });
    return Chan$AgdaModeVscode.emit(state.channels.commandHandled, command);
  };
  var header = {
    TAG: "Plain",
    _0: Command$AgdaModeVscode.toString(command),
    [Symbol.for("name")]: "Plain"
  };
  if (typeof command !== "object") {
    switch (command) {
      case "Load" :
          await State__View$AgdaModeVscode.DebugBuffer.restore(state);
          await State__View$AgdaModeVscode.Panel.display(state, {
                TAG: "Plain",
                _0: "Loading ...",
                [Symbol.for("name")]: "Plain"
              }, []);
          await state.document.save();
          var options = VSCode.TextDocumentShowOptions.make(undefined, false, undefined, undefined, undefined);
          await Vscode.window.showTextDocument(state.document, options);
          return await sendAgdaRequest("Load");
      case "Quit" :
          return ;
      case "Restart" :
          state.runningInfoLog = [];
          return await dispatchCommand(state, "Load");
      case "Refresh" :
          Highlighting$AgdaModeVscode.redecorate(state.highlighting, state.editor);
          State__View$AgdaModeVscode.Panel.restore(state);
          State__Goal$AgdaModeVscode.redecorate(state);
          return await State__View$AgdaModeVscode.DebugBuffer.restore(state);
      case "Compile" :
          return await sendAgdaRequest("Compile");
      case "ToggleDisplayOfImplicitArguments" :
          return await sendAgdaRequest("ToggleDisplayOfImplicitArguments");
      case "ToggleDisplayOfIrrelevantArguments" :
          return await sendAgdaRequest("ToggleDisplayOfIrrelevantArguments");
      case "ShowConstraints" :
          return await sendAgdaRequest("ShowConstraints");
      case "NextGoal" :
          return Goals$AgdaModeVscode.jmupToTheNextGoal(state.goals2, state.editor);
      case "PreviousGoal" :
          return Goals$AgdaModeVscode.jmupToThePreviousGoal(state.goals2, state.editor);
      case "Give" :
          var goal = Goals$AgdaModeVscode.getGoalAtCursor(state.goals2, state.editor);
          if (goal !== undefined) {
            if (Goal2$AgdaModeVscode.read(goal, state.document) === "") {
              return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                          body: undefined,
                          placeholder: "expression to give:",
                          value: undefined
                        }, (async function (expr) {
                            if (expr === "") {
                              return await sendAgdaRequest({
                                          TAG: "Give2",
                                          _0: goal,
                                          [Symbol.for("name")]: "Give2"
                                        });
                            } else {
                              await Goals$AgdaModeVscode.modify(state.goals2, state.document, goal.index, (function (param) {
                                      return expr;
                                    }));
                              return await sendAgdaRequest({
                                          TAG: "Give2",
                                          _0: goal,
                                          [Symbol.for("name")]: "Give2"
                                        });
                            }
                          }));
            } else {
              return await sendAgdaRequest({
                          TAG: "Give2",
                          _0: goal,
                          [Symbol.for("name")]: "Give2"
                        });
            }
          } else {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
      case "Refine" :
          var match = State__Goal$AgdaModeVscode.pointed(state);
          if (match !== undefined) {
            return await sendAgdaRequest({
                        TAG: "Refine",
                        _0: match[0],
                        [Symbol.for("name")]: "Refine"
                      });
          } else {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
      case "Case" :
          var match$1 = State__Goal$AgdaModeVscode.pointed(state);
          if (match$1 === undefined) {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
          var goal$1 = match$1[0];
          if (match$1[1] === "") {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: "Please specify which variable(s) you wish to split, multiple variables are delimited by whitespaces",
                        placeholder: "variable(s) to case split:",
                        value: undefined
                      }, (async function (expr) {
                          if (expr === "") {
                            return await sendAgdaRequest({
                                        TAG: "Case",
                                        _0: goal$1,
                                        [Symbol.for("name")]: "Case"
                                      });
                          } else {
                            await State__Goal$AgdaModeVscode.modify(state, goal$1, (function (param) {
                                    return expr;
                                  }));
                            return await sendAgdaRequest({
                                        TAG: "Case",
                                        _0: goal$1,
                                        [Symbol.for("name")]: "Case"
                                      });
                          }
                        }));
          } else {
            return await sendAgdaRequest({
                        TAG: "Case",
                        _0: goal$1,
                        [Symbol.for("name")]: "Case"
                      });
          }
      case "WhyInScope" :
          var placeholder = "name:";
          var match$2 = State__Goal$AgdaModeVscode.pointed(state);
          if (match$2 === undefined) {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: placeholder,
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "WhyInScopeGlobal",
                                      _0: expr,
                                      [Symbol.for("name")]: "WhyInScopeGlobal"
                                    });
                        }));
          }
          var expr = match$2[1];
          var goal$2 = match$2[0];
          if (expr === "") {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: placeholder,
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "WhyInScope",
                                      _0: expr,
                                      _1: goal$2,
                                      [Symbol.for("name")]: "WhyInScope"
                                    });
                        }));
          } else {
            return await sendAgdaRequest({
                        TAG: "WhyInScope",
                        _0: expr,
                        _1: goal$2,
                        [Symbol.for("name")]: "WhyInScope"
                      });
          }
      case "SwitchAgdaVersion" :
          return await State__SwitchVersion$AgdaModeVscode.run(state);
      case "Escape" :
          if (IM$AgdaModeVscode.isActivated(state.editorIM) || IM$AgdaModeVscode.isActivated(state.promptIM)) {
            return await State__InputMethod$AgdaModeVscode.deactivate(state);
          } else {
            return await State__View$AgdaModeVscode.Panel.interruptPrompt(state);
          }
      case "LookupSymbol" :
          var match$3 = Util$AgdaModeVscode.Promise_.pending();
          var resolve = match$3[1];
          var selectedText = Editor$AgdaModeVscode.$$Text.get(state.document, Editor$AgdaModeVscode.$$Selection.get(state.editor)).trim();
          if (selectedText === "") {
            State__View$AgdaModeVscode.Panel.prompt(state, {
                  TAG: "Plain",
                  _0: "Lookup Unicode Symbol Input Sequence",
                  [Symbol.for("name")]: "Plain"
                }, {
                  body: undefined,
                  placeholder: "symbol to lookup:",
                  value: undefined
                }, (function (input) {
                    resolve(input.trim());
                    return Promise.resolve();
                  }));
          } else {
            resolve(selectedText);
          }
          var input = await match$3[0];
          var sequences = Core__Option.getOr(Translator$AgdaModeVscode.lookup(input), []);
          if (sequences.length === 0) {
            return await State__View$AgdaModeVscode.Panel.display(state, {
                        TAG: "Warning",
                        _0: "No Input Sequences Found for \"" + selectedText + "\"",
                        [Symbol.for("name")]: "Warning"
                      }, []);
          } else {
            return await State__View$AgdaModeVscode.Panel.display(state, {
                        TAG: "Success",
                        _0: String(sequences.length) + " Input Sequences Found for \"" + selectedText + "\"",
                        [Symbol.for("name")]: "Success"
                      }, sequences.map(function (sequence) {
                            return Item$AgdaModeVscode.plainText(sequence);
                          }));
          }
      case "OpenDebugBuffer" :
          State__View$AgdaModeVscode.DebugBuffer.make(state);
          return await State__View$AgdaModeVscode.DebugBuffer.reveal(state);
      
    }
  } else {
    switch (command.TAG) {
      case "SolveConstraints" :
          var normalization = command._0;
          var goal$3 = Goals$AgdaModeVscode.getGoalAtCursor(state.goals2, state.editor);
          if (goal$3 !== undefined) {
            return await sendAgdaRequest({
                        TAG: "SolveConstraints",
                        _0: normalization,
                        _1: goal$3,
                        [Symbol.for("name")]: "SolveConstraints"
                      });
          } else {
            return await sendAgdaRequest({
                        TAG: "SolveConstraintsGlobal",
                        _0: normalization,
                        [Symbol.for("name")]: "SolveConstraintsGlobal"
                      });
          }
      case "ShowGoals" :
          return await sendAgdaRequest({
                      TAG: "ShowGoals",
                      _0: command._0,
                      [Symbol.for("name")]: "ShowGoals"
                    });
      case "SearchAbout" :
          var normalization$1 = command._0;
          return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                      body: undefined,
                      placeholder: "name:",
                      value: undefined
                    }, (function (expr) {
                        return sendAgdaRequest({
                                    TAG: "SearchAbout",
                                    _0: normalization$1,
                                    _1: expr,
                                    [Symbol.for("name")]: "SearchAbout"
                                  });
                      }));
      case "ElaborateAndGive" :
          var normalization$2 = command._0;
          var match$4 = State__Goal$AgdaModeVscode.pointed(state);
          if (match$4 === undefined) {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
          var expr$1 = match$4[1];
          var goal$4 = match$4[0];
          if (expr$1 === "") {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: "expression to elaborate and give:",
                        value: undefined
                      }, (async function (expr) {
                          if (expr === "") {
                            return await sendAgdaRequest({
                                        TAG: "ElaborateAndGive",
                                        _0: normalization$2,
                                        _1: expr,
                                        _2: goal$4,
                                        [Symbol.for("name")]: "ElaborateAndGive"
                                      });
                          } else {
                            await State__Goal$AgdaModeVscode.modify(state, goal$4, (function (param) {
                                    return expr;
                                  }));
                            return await sendAgdaRequest({
                                        TAG: "ElaborateAndGive",
                                        _0: normalization$2,
                                        _1: expr,
                                        _2: goal$4,
                                        [Symbol.for("name")]: "ElaborateAndGive"
                                      });
                          }
                        }));
          } else {
            return await sendAgdaRequest({
                        TAG: "ElaborateAndGive",
                        _0: normalization$2,
                        _1: expr$1,
                        _2: goal$4,
                        [Symbol.for("name")]: "ElaborateAndGive"
                      });
          }
      case "Auto" :
          var match$5 = State__Goal$AgdaModeVscode.pointed(state);
          if (match$5 !== undefined) {
            return await sendAgdaRequest({
                        TAG: "Auto",
                        _0: command._0,
                        _1: match$5[0],
                        [Symbol.for("name")]: "Auto"
                      });
          } else {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
      case "HelperFunctionType" :
          var normalization$3 = command._0;
          var match$6 = State__Goal$AgdaModeVscode.pointed(state);
          if (match$6 === undefined) {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
          var expr$2 = match$6[1];
          var goal$5 = match$6[0];
          if (expr$2 === "") {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: "expression:",
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "HelperFunctionType",
                                      _0: normalization$3,
                                      _1: expr,
                                      _2: goal$5,
                                      [Symbol.for("name")]: "HelperFunctionType"
                                    });
                        }));
          } else {
            return await sendAgdaRequest({
                        TAG: "HelperFunctionType",
                        _0: normalization$3,
                        _1: expr$2,
                        _2: goal$5,
                        [Symbol.for("name")]: "HelperFunctionType"
                      });
          }
      case "InferType" :
          var normalization$4 = command._0;
          var placeholder$1 = "expression to infer:";
          var match$7 = State__Goal$AgdaModeVscode.pointed(state);
          if (match$7 === undefined) {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: placeholder$1,
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "InferTypeGlobal",
                                      _0: normalization$4,
                                      _1: expr,
                                      [Symbol.for("name")]: "InferTypeGlobal"
                                    });
                        }));
          }
          var expr$3 = match$7[1];
          var goal$6 = match$7[0];
          if (expr$3 === "") {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: placeholder$1,
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "InferType",
                                      _0: normalization$4,
                                      _1: expr,
                                      _2: goal$6,
                                      [Symbol.for("name")]: "InferType"
                                    });
                        }));
          } else {
            return await sendAgdaRequest({
                        TAG: "InferType",
                        _0: normalization$4,
                        _1: expr$3,
                        _2: goal$6,
                        [Symbol.for("name")]: "InferType"
                      });
          }
      case "Context" :
          var match$8 = State__Goal$AgdaModeVscode.pointed(state);
          if (match$8 !== undefined) {
            return await sendAgdaRequest({
                        TAG: "Context",
                        _0: command._0,
                        _1: match$8[0],
                        [Symbol.for("name")]: "Context"
                      });
          } else {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
      case "GoalType" :
          var match$9 = State__Goal$AgdaModeVscode.pointed(state);
          if (match$9 !== undefined) {
            return await sendAgdaRequest({
                        TAG: "GoalType",
                        _0: command._0,
                        _1: match$9[0],
                        [Symbol.for("name")]: "GoalType"
                      });
          } else {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
      case "GoalTypeAndContext" :
          var match$10 = State__Goal$AgdaModeVscode.pointed(state);
          if (match$10 !== undefined) {
            return await sendAgdaRequest({
                        TAG: "GoalTypeAndContext",
                        _0: command._0,
                        _1: match$10[0],
                        [Symbol.for("name")]: "GoalTypeAndContext"
                      });
          } else {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
      case "EventFromView" :
          var $$event = command._0;
          if (typeof $$event !== "object") {
            if ($$event === "Initialized") {
              return ;
            }
            var error = await State$AgdaModeVscode.destroy(state, true);
            if (error.TAG === "Ok") {
              return ;
            }
            var match$11 = Connection__Error$AgdaModeVscode.toString(error._0);
            var header$1 = {
              TAG: "Error",
              _0: "Cannot destruct the view: " + match$11[0],
              [Symbol.for("name")]: "Error"
            };
            var body = [Item$AgdaModeVscode.plainText(match$11[1])];
            return await State__View$AgdaModeVscode.Panel.display(state, header$1, body);
          } else {
            switch ($$event.TAG) {
              case "InputMethod" :
                  var $$char = $$event._0;
                  if ($$char.TAG === "InsertChar") {
                    return await dispatchCommand(state, {
                                TAG: "InputMethod",
                                _0: {
                                  TAG: "InsertChar",
                                  _0: $$char._0,
                                  [Symbol.for("name")]: "InsertChar"
                                },
                                [Symbol.for("name")]: "InputMethod"
                              });
                  } else {
                    return await State__InputMethod$AgdaModeVscode.chooseSymbol(state, $$char._0);
                  }
              case "PromptIMUpdate" :
                  var interval = $$event._0;
                  if (typeof interval === "object") {
                    if (interval.TAG === "MouseSelect") {
                      return await State__InputMethod$AgdaModeVscode.select(state, [interval._0]);
                    } else {
                      return await State__InputMethod$AgdaModeVscode.keyUpdatePromptIM(state, interval._0);
                    }
                  }
                  switch (interval) {
                    case "BrowseUp" :
                        return await dispatchCommand(state, {
                                    TAG: "InputMethod",
                                    _0: "BrowseUp",
                                    [Symbol.for("name")]: "InputMethod"
                                  });
                    case "BrowseDown" :
                        return await dispatchCommand(state, {
                                    TAG: "InputMethod",
                                    _0: "BrowseDown",
                                    [Symbol.for("name")]: "InputMethod"
                                  });
                    case "BrowseLeft" :
                        return await dispatchCommand(state, {
                                    TAG: "InputMethod",
                                    _0: "BrowseLeft",
                                    [Symbol.for("name")]: "InputMethod"
                                  });
                    case "BrowseRight" :
                        return await dispatchCommand(state, {
                                    TAG: "InputMethod",
                                    _0: "BrowseRight",
                                    [Symbol.for("name")]: "InputMethod"
                                  });
                    case "Escape" :
                        if (IM$AgdaModeVscode.isActivated(state.editorIM) || IM$AgdaModeVscode.isActivated(state.promptIM)) {
                          return await State__InputMethod$AgdaModeVscode.deactivate(state);
                        } else {
                          return await State__View$AgdaModeVscode.Panel.interruptPrompt(state);
                        }
                    
                  }
              case "JumpToTarget" :
                  var link = $$event._0;
                  Editor$AgdaModeVscode.focus(state.document);
                  var path = Parser$AgdaModeVscode.filepath(state.document.fileName);
                  if (link.TAG === "SrcLoc") {
                    var match$12 = link._0;
                    if (typeof match$12 !== "object") {
                      return ;
                    }
                    var fileName = match$12._0;
                    if (fileName === undefined) {
                      return ;
                    }
                    var fileName$1 = Parser$AgdaModeVscode.filepath(fileName);
                    var removeRoot = function (path) {
                      var obj = Nodepath.parse(path);
                      var rootLength = obj.root.length;
                      var newDir = obj.dir.slice(rootLength);
                      return Nodepath.format({
                                  dir: newDir,
                                  root: "",
                                  base: obj.base,
                                  name: obj.name,
                                  ext: obj.ext
                                });
                    };
                    if (removeRoot(path) !== removeRoot(fileName$1)) {
                      return ;
                    }
                    var ranges = match$12._1.map(Common$AgdaModeVscode.AgdaInterval.toVSCodeRange);
                    Editor$AgdaModeVscode.$$Selection.setMany(state.editor, ranges);
                    return Core__Option.forEach(ranges[0], (function (range) {
                                  state.editor.revealRange(range, undefined);
                                }));
                  }
                  var index = link._0;
                  var goal$7 = state.goals.find(function (goal) {
                        return goal.index === index;
                      });
                  if (goal$7 !== undefined) {
                    return Goal$AgdaModeVscode.setCursor(goal$7, state.editor);
                  } else {
                    return ;
                  }
              
            }
          }
      case "GoalTypeContextAndInferredType" :
          var normalization$5 = command._0;
          var match$13 = State__Goal$AgdaModeVscode.pointed(state);
          if (match$13 === undefined) {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
          var expr$4 = match$13[1];
          var goal$8 = match$13[0];
          if (expr$4 === "") {
            return await sendAgdaRequest({
                        TAG: "GoalTypeAndContext",
                        _0: normalization$5,
                        _1: goal$8,
                        [Symbol.for("name")]: "GoalTypeAndContext"
                      });
          } else {
            return await sendAgdaRequest({
                        TAG: "GoalTypeContextAndInferredType",
                        _0: normalization$5,
                        _1: expr$4,
                        _2: goal$8,
                        [Symbol.for("name")]: "GoalTypeContextAndInferredType"
                      });
          }
      case "GoalTypeContextAndCheckedType" :
          var normalization$6 = command._0;
          var match$14 = State__Goal$AgdaModeVscode.pointed(state);
          if (match$14 === undefined) {
            return await State__View$AgdaModeVscode.Panel.displayOutOfGoalError(state);
          }
          var expr$5 = match$14[1];
          var goal$9 = match$14[0];
          if (expr$5 === "") {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: "expression to type:",
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "GoalTypeContextAndCheckedType",
                                      _0: normalization$6,
                                      _1: expr,
                                      _2: goal$9,
                                      [Symbol.for("name")]: "GoalTypeContextAndCheckedType"
                                    });
                        }));
          } else {
            return await sendAgdaRequest({
                        TAG: "GoalTypeContextAndCheckedType",
                        _0: normalization$6,
                        _1: expr$5,
                        _2: goal$9,
                        [Symbol.for("name")]: "GoalTypeContextAndCheckedType"
                      });
          }
      case "ModuleContents" :
          var normalization$7 = command._0;
          var placeholder$2 = "module name:";
          var match$15 = State__Goal$AgdaModeVscode.pointed(state);
          if (match$15 === undefined) {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: placeholder$2,
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "ModuleContentsGlobal",
                                      _0: normalization$7,
                                      _1: expr,
                                      [Symbol.for("name")]: "ModuleContentsGlobal"
                                    });
                        }));
          }
          var expr$6 = match$15[1];
          var goal$10 = match$15[0];
          if (expr$6 === "") {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: placeholder$2,
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "ModuleContents",
                                      _0: normalization$7,
                                      _1: expr,
                                      _2: goal$10,
                                      [Symbol.for("name")]: "ModuleContents"
                                    });
                        }));
          } else {
            return await sendAgdaRequest({
                        TAG: "ModuleContents",
                        _0: normalization$7,
                        _1: expr$6,
                        _2: goal$10,
                        [Symbol.for("name")]: "ModuleContents"
                      });
          }
      case "ComputeNormalForm" :
          var computeMode = command._0;
          var placeholder$3 = "expression to normalize:";
          var match$16 = State__Goal$AgdaModeVscode.pointed(state);
          if (match$16 === undefined) {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: placeholder$3,
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "ComputeNormalFormGlobal",
                                      _0: computeMode,
                                      _1: expr,
                                      [Symbol.for("name")]: "ComputeNormalFormGlobal"
                                    });
                        }));
          }
          var expr$7 = match$16[1];
          var goal$11 = match$16[0];
          if (expr$7 === "") {
            return await State__View$AgdaModeVscode.Panel.prompt(state, header, {
                        body: undefined,
                        placeholder: placeholder$3,
                        value: undefined
                      }, (function (expr) {
                          return sendAgdaRequest({
                                      TAG: "ComputeNormalForm",
                                      _0: computeMode,
                                      _1: expr,
                                      _2: goal$11,
                                      [Symbol.for("name")]: "ComputeNormalForm"
                                    });
                        }));
          } else {
            return await sendAgdaRequest({
                        TAG: "ComputeNormalForm",
                        _0: computeMode,
                        _1: expr$7,
                        _2: goal$11,
                        [Symbol.for("name")]: "ComputeNormalForm"
                      });
          }
      case "InputMethod" :
          var $$char$1 = command._0;
          if (typeof $$char$1 === "object") {
            return await State__InputMethod$AgdaModeVscode.insertChar(state, $$char$1._0);
          }
          switch ($$char$1) {
            case "Activate" :
                if (Config$AgdaModeVscode.InputMethod.getEnabled()) {
                  return await State__InputMethod$AgdaModeVscode.activateEditorIM(state);
                } else {
                  return ;
                }
            case "BrowseUp" :
                return await State__InputMethod$AgdaModeVscode.moveUp(state);
            case "BrowseRight" :
                return await State__InputMethod$AgdaModeVscode.moveRight(state);
            case "BrowseDown" :
                return await State__InputMethod$AgdaModeVscode.moveDown(state);
            case "BrowseLeft" :
                return await State__InputMethod$AgdaModeVscode.moveLeft(state);
            
          }
      
    }
  }
}

exports.dispatchCommand = dispatchCommand;
/* vscode Not a pure module */
