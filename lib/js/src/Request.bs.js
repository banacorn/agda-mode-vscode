// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var PervasivesU = require("rescript/lib/js/pervasivesU.js");
var Goal$AgdaModeVscode = require("./Goal.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Parser$AgdaModeVscode = require("./Parser/Parser.bs.js");
var Command$AgdaModeVscode = require("./Command.bs.js");

function toString(x) {
  if (typeof x !== "object") {
    switch (x) {
      case "Load" :
          return "Load";
      case "Compile" :
          return "Compile";
      case "ToggleDisplayOfImplicitArguments" :
          return "ToggleDisplayOfImplicitArguments";
      case "ToggleDisplayOfIrrelevantArguments" :
          return "ToggleDisplayOfIrrelevantArguments";
      case "ShowConstraints" :
          return "ShowConstraints";
      
    }
  } else {
    switch (x.TAG) {
      case "SolveConstraints" :
          return "SolveConstraints";
      case "SolveConstraintsGlobal" :
          return "SolveConstraintsGlobal";
      case "ShowGoals" :
          return "ShowGoals";
      case "SearchAbout" :
          return "SearchAbout";
      case "Give" :
          return "Give";
      case "Refine" :
          return "Refine";
      case "ElaborateAndGive" :
          return "ElaborateAndGive";
      case "Auto" :
          return "Auto";
      case "Case" :
          return "Case";
      case "HelperFunctionType" :
          return "HelperFunctionType";
      case "InferType" :
          return "InferType";
      case "InferTypeGlobal" :
          return "InferTypeGlobal";
      case "Context" :
          return "Context";
      case "GoalType" :
          return "GoalType";
      case "GoalTypeAndContext" :
          return "GoalTypeAndContext";
      case "GoalTypeContextAndInferredType" :
          return "GoalTypeContextAndInferredType";
      case "GoalTypeContextAndCheckedType" :
          return "GoalTypeContextAndCheckedType";
      case "ModuleContents" :
          return "ModuleContents";
      case "ModuleContentsGlobal" :
          return "ModuleContentsGlobal";
      case "ComputeNormalForm" :
          return "ComputeNormalForm";
      case "ComputeNormalFormGlobal" :
          return "ComputeNormalFormGlobal";
      case "WhyInScope" :
          return "WhyInScope";
      case "WhyInScopeGlobal" :
          return "WhyInScopeGlobal";
      
    }
  }
}

function encode($$document, version, filepath, backend, libraryPath, highlightingMethod, request) {
  libraryPath.unshift(".");
  var libraryPath$1 = libraryPath.map(function (x) {
          return "\"" + (Parser$AgdaModeVscode.filepath(x) + "\"");
        }).join(", ");
  var highlightingMethod$1 = highlightingMethod ? "Direct" : "Indirect";
  var commonPart = function (level) {
    var level$1;
    switch (level) {
      case "None" :
          level$1 = "None";
          break;
      case "NonInteractive" :
          level$1 = "NonInteractive";
          break;
      case "Interactive" :
          level$1 = "Interactive";
          break;
      
    }
    return "IOTCM \"" + (filepath + ("\" " + (level$1 + (" " + highlightingMethod$1))));
  };
  var buildRange = function (goal) {
    return Goal$AgdaModeVscode.makeHaskellRange(goal, $$document, version, filepath);
  };
  if (typeof request !== "object") {
    switch (request) {
      case "Load" :
          if (Util$AgdaModeVscode.Version.gte(version, "2.5.0")) {
            return commonPart("NonInteractive") + "( Cmd_load \"" + filepath + "\" [] )";
          } else {
            return commonPart("NonInteractive") + "( Cmd_load \"" + filepath + "\" [" + libraryPath$1 + "] )";
          }
      case "Compile" :
          if (Util$AgdaModeVscode.Version.gte(version, "2.5.0")) {
            return commonPart("NonInteractive") + "( Cmd_compile " + backend + " \"" + filepath + "\" [] )";
          } else {
            return commonPart("NonInteractive") + "( Cmd_compile " + backend + " \"" + filepath + "\" [" + libraryPath$1 + "] )";
          }
      case "ToggleDisplayOfImplicitArguments" :
          return commonPart("NonInteractive") + "( ToggleImplicitArgs )";
      case "ToggleDisplayOfIrrelevantArguments" :
          return commonPart("NonInteractive") + "( ToggleIrrelevantArgs )";
      case "ShowConstraints" :
          return commonPart("NonInteractive") + "( Cmd_constraints )";
      
    }
  } else {
    switch (request.TAG) {
      case "SolveConstraints" :
          var normalization = Command$AgdaModeVscode.Normalization.encode(request._0);
          return commonPart("NonInteractive") + "( Cmd_solveOne " + normalization + " " + request._1.indexString + " noRange \"\" )";
      case "SolveConstraintsGlobal" :
          var normalization$1 = Command$AgdaModeVscode.Normalization.encode(request._0);
          return commonPart("NonInteractive") + "( Cmd_solveAll " + normalization$1 + " )";
      case "ShowGoals" :
          var normalization$2 = Command$AgdaModeVscode.Normalization.encode(request._0);
          if (Util$AgdaModeVscode.Version.gte(version, "2.6.2")) {
            return commonPart("NonInteractive") + "( Cmd_metas " + normalization$2 + " )";
          } else {
            return commonPart("NonInteractive") + "( Cmd_metas )";
          }
      case "SearchAbout" :
          var normalization$3 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content = Parser$AgdaModeVscode.$$escape(request._1);
          return commonPart("NonInteractive") + "( Cmd_search_about_toplevel " + normalization$3 + " \"" + content + "\" )";
      case "Give" :
          var goal = request._0;
          var range = buildRange(goal);
          var content$1 = Parser$AgdaModeVscode.$$escape(Goal$AgdaModeVscode.getContent(goal, $$document));
          if (Util$AgdaModeVscode.Version.gte(version, "2.5.3")) {
            return commonPart("NonInteractive") + "( Cmd_give WithoutForce " + goal.indexString + " " + range + " \"" + content$1 + "\" )";
          } else {
            return commonPart("NonInteractive") + "( Cmd_give " + goal.indexString + " " + range + " \"" + content$1 + "\" )";
          }
      case "Refine" :
          var goal$1 = request._0;
          var index = String(goal$1.index);
          var content$2 = Parser$AgdaModeVscode.$$escape(Goal$AgdaModeVscode.getContent(goal$1, $$document));
          var range$1 = buildRange(goal$1);
          return commonPart("NonInteractive") + "( Cmd_refine_or_intro False " + index + " " + range$1 + " \"" + content$2 + "\" )";
      case "ElaborateAndGive" :
          var index$1 = String(request._2.index);
          var normalization$4 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content$3 = Parser$AgdaModeVscode.$$escape(request._1);
          return commonPart("NonInteractive") + "( Cmd_elaborate_give " + normalization$4 + " " + index$1 + " noRange \"" + content$3 + "\" )";
      case "Auto" :
          var goal$2 = request._1;
          var normalization$5 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var index$2 = String(goal$2.index);
          var content$4 = Parser$AgdaModeVscode.$$escape(Goal$AgdaModeVscode.getContent(goal$2, $$document));
          var range$2 = buildRange(goal$2);
          if (Util$AgdaModeVscode.Version.gte(version, "2.7.0")) {
            return commonPart("NonInteractive") + "( Cmd_autoOne " + normalization$5 + " " + index$2 + " " + range$2 + " \"" + content$4 + "\" )";
          } else if (Util$AgdaModeVscode.Version.gte(version, "2.6.0.1")) {
            return commonPart("NonInteractive") + "( Cmd_autoOne " + index$2 + " " + range$2 + " \"" + content$4 + "\" )";
          } else {
            return commonPart("NonInteractive") + "( Cmd_auto " + index$2 + " " + range$2 + " \"" + content$4 + "\" )";
          }
      case "Case" :
          var goal$3 = request._0;
          var range$3 = buildRange(goal$3);
          var content$5 = Parser$AgdaModeVscode.$$escape(Goal$AgdaModeVscode.getContent(goal$3, $$document));
          return commonPart("NonInteractive") + "( Cmd_make_case " + goal$3.indexString + " " + range$3 + " \"" + content$5 + "\" )";
      case "HelperFunctionType" :
          var index$3 = String(request._2.index);
          var normalization$6 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content$6 = Parser$AgdaModeVscode.$$escape(request._1);
          return commonPart("NonInteractive") + "( Cmd_helper_function " + normalization$6 + " " + index$3 + " noRange \"" + content$6 + "\" )";
      case "InferType" :
          var index$4 = String(request._2.index);
          var normalization$7 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content$7 = Parser$AgdaModeVscode.$$escape(request._1);
          return commonPart("NonInteractive") + "( Cmd_infer " + normalization$7 + " " + index$4 + " noRange \"" + content$7 + "\" )";
      case "InferTypeGlobal" :
          var normalization$8 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content$8 = Parser$AgdaModeVscode.$$escape(request._1);
          return commonPart("None") + "( Cmd_infer_toplevel " + normalization$8 + " \"" + content$8 + "\" )";
      case "Context" :
          var index$5 = String(request._1.index);
          var normalization$9 = Command$AgdaModeVscode.Normalization.encode(request._0);
          return commonPart("NonInteractive") + "( Cmd_context " + normalization$9 + " " + index$5 + " noRange \"\" )";
      case "GoalType" :
          var index$6 = String(request._1.index);
          var normalization$10 = Command$AgdaModeVscode.Normalization.encode(request._0);
          return commonPart("NonInteractive") + "( Cmd_goal_type " + normalization$10 + " " + index$6 + " noRange \"\" )";
      case "GoalTypeAndContext" :
          var index$7 = String(request._1.index);
          var normalization$11 = Command$AgdaModeVscode.Normalization.encode(request._0);
          return commonPart("NonInteractive") + "( Cmd_goal_type_context " + normalization$11 + " " + index$7 + " noRange \"\" )";
      case "GoalTypeContextAndInferredType" :
          var index$8 = String(request._2.index);
          var normalization$12 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content$9 = Parser$AgdaModeVscode.$$escape(request._1);
          return commonPart("NonInteractive") + "( Cmd_goal_type_context_infer " + normalization$12 + " " + index$8 + " noRange \"" + content$9 + "\" )";
      case "GoalTypeContextAndCheckedType" :
          var index$9 = String(request._2.index);
          var normalization$13 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content$10 = Parser$AgdaModeVscode.$$escape(request._1);
          return commonPart("NonInteractive") + "( Cmd_goal_type_context_check " + normalization$13 + " " + index$9 + " noRange \"" + content$10 + "\" )";
      case "ModuleContents" :
          var index$10 = String(request._2.index);
          var normalization$14 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content$11 = Parser$AgdaModeVscode.$$escape(request._1);
          return commonPart("NonInteractive") + "( Cmd_show_module_contents " + normalization$14 + " " + index$10 + " noRange \"" + content$11 + "\" )";
      case "ModuleContentsGlobal" :
          var normalization$15 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content$12 = Parser$AgdaModeVscode.$$escape(request._1);
          return commonPart("None") + "( Cmd_show_module_contents_toplevel " + normalization$15 + " \"" + content$12 + "\" )";
      case "ComputeNormalForm" :
          var computeMode = request._0;
          var index$11 = String(request._2.index);
          var ignoreAbstract = PervasivesU.string_of_bool(Command$AgdaModeVscode.ComputeMode.ignoreAbstract(computeMode));
          var computeMode$1 = Command$AgdaModeVscode.ComputeMode.encode(computeMode);
          var content$13 = Parser$AgdaModeVscode.$$escape(request._1);
          if (Util$AgdaModeVscode.Version.gte(version, "2.5.2")) {
            return commonPart("NonInteractive") + "( Cmd_compute " + computeMode$1 + " " + index$11 + " noRange \"" + content$13 + "\" )";
          } else {
            return commonPart("NonInteractive") + "( Cmd_compute " + ignoreAbstract + " " + index$11 + " noRange \"" + content$13 + "\" )";
          }
      case "ComputeNormalFormGlobal" :
          var computeMode$2 = request._0;
          var ignoreAbstract$1 = PervasivesU.string_of_bool(Command$AgdaModeVscode.ComputeMode.ignoreAbstract(computeMode$2));
          var computeMode$3 = Command$AgdaModeVscode.ComputeMode.encode(computeMode$2);
          var content$14 = Parser$AgdaModeVscode.$$escape(request._1);
          if (Util$AgdaModeVscode.Version.gte(version, "2.5.2")) {
            return commonPart("NonInteractive") + "( Cmd_compute_toplevel " + computeMode$3 + " \"" + content$14 + "\" )";
          } else {
            return commonPart("NonInteractive") + "( Cmd_compute_toplevel " + ignoreAbstract$1 + " \"" + content$14 + "\" )";
          }
      case "WhyInScope" :
          var index$12 = String(request._1.index);
          var content$15 = Parser$AgdaModeVscode.$$escape(request._0);
          return commonPart("NonInteractive") + "( Cmd_why_in_scope " + index$12 + " noRange \"" + content$15 + "\" )";
      case "WhyInScopeGlobal" :
          var content$16 = Parser$AgdaModeVscode.$$escape(request._0);
          return commonPart("None") + "( Cmd_why_in_scope_toplevel \"" + content$16 + "\" )";
      
    }
  }
}

exports.toString = toString;
exports.encode = encode;
/* Goal-AgdaModeVscode Not a pure module */
