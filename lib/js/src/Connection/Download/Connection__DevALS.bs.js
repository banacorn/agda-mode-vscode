// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var FS$AgdaModeVscode = require("../../FS.bs.js");
var Util$AgdaModeVscode = require("../../Util/Util.bs.js");
var Connection__Download$AgdaModeVscode = require("./Connection__Download.bs.js");
var Connection__Download__GitHub$AgdaModeVscode = require("./Connection__Download__GitHub.bs.js");
var Connection__Download__Platform$AgdaModeVscode = require("./Connection__Download__Platform.bs.js");

function makeAgdaLanguageServerRepo(globalStorageUri) {
  return {
          username: "banacorn",
          repository: "agda-language-server",
          userAgent: "banacorn/agda-mode-vscode",
          globalStorageUri: globalStorageUri,
          cacheInvalidateExpirationSecs: 86400
        };
}

async function getALSReleaseManifestWithoutCache(globalStorageUri) {
  var error = await Connection__Download__GitHub$AgdaModeVscode.ReleaseManifest.fetchFromGitHub(makeAgdaLanguageServerRepo(globalStorageUri));
  if (error.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: error._0
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "CannotFetchALSReleases",
              _0: error._0
            }
          };
  }
}

async function chooseAssetByPlatform(release, platform) {
  var assetName = Connection__Download__Platform$AgdaModeVscode.toAssetName(platform);
  return release.assets.filter(function (asset) {
              return asset.name.endsWith(assetName + ".zip");
            });
}

async function getDownloadDescriptor(globalStorageUri, platform) {
  var error = await getALSReleaseManifestWithoutCache(globalStorageUri);
  if (error.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: error._0
          };
  }
  var devRelease = error._0.find(function (release) {
        return release.tag_name === "dev";
      });
  if (devRelease === undefined) {
    return {
            TAG: "Error",
            _0: "CannotFindCompatibleALSRelease"
          };
  }
  var getAgdaVersion = function (asset) {
    return asset.name.replace(/als-dev-Agda-/, "").replace(/-.*/, "");
  };
  var assets = await chooseAssetByPlatform(devRelease, platform);
  var result = assets.toSorted(function (a, b) {
            return Util$AgdaModeVscode.Version.compare(getAgdaVersion(b), getAgdaVersion(a));
          }).map(function (asset) {
          return {
                  release: devRelease,
                  asset: asset,
                  saveAsFileName: "dev-als"
                };
        })[0];
  if (result !== undefined) {
    return {
            TAG: "Ok",
            _0: result
          };
  } else {
    return {
            TAG: "Error",
            _0: "CannotFindCompatibleALSRelease"
          };
  }
}

function download(globalStorageUri) {
  return async function (platform) {
    var error = await getDownloadDescriptor(globalStorageUri, platform);
    if (error.TAG === "Ok") {
      return await Connection__Download$AgdaModeVscode.download(globalStorageUri, error._0);
    } else {
      return {
              TAG: "Error",
              _0: error._0
            };
    }
  };
}

function alreadyDownloaded(globalStorageUri) {
  return async function () {
    var uri = Vscode.Uri.joinPath(globalStorageUri, "dev-als", "als");
    var match = await FS$AgdaModeVscode.stat(uri);
    if (match.TAG === "Ok") {
      return uri.fsPath;
    }
    
  };
}

exports.makeAgdaLanguageServerRepo = makeAgdaLanguageServerRepo;
exports.getALSReleaseManifestWithoutCache = getALSReleaseManifestWithoutCache;
exports.chooseAssetByPlatform = chooseAssetByPlatform;
exports.getDownloadDescriptor = getDownloadDescriptor;
exports.download = download;
exports.alreadyDownloaded = alreadyDownloaded;
/* vscode Not a pure module */
