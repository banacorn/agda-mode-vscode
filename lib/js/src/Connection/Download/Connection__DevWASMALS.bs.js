// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Connection__Download$AgdaModeVscode = require("./Connection__Download.bs.js");
var Connection__Download__GitHub$AgdaModeVscode = require("./Connection__Download__GitHub.bs.js");

function makeAgdaLanguageServerRepo(globalStorageUri) {
  return {
          username: "banacorn",
          repository: "agda-language-server",
          userAgent: "banacorn/agda-mode-vscode",
          globalStorageUri: globalStorageUri,
          cacheInvalidateExpirationSecs: 86400
        };
}

async function getALSReleaseManifestWithoutCache(globalStorageUri) {
  var error = await Connection__Download__GitHub$AgdaModeVscode.ReleaseManifest.fetchFromGitHub(makeAgdaLanguageServerRepo(globalStorageUri));
  if (error.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: error._0
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "CannotFetchALSReleases",
              _0: error._0
            }
          };
  }
}

async function getDownloadDescriptor(globalStorageUri) {
  var error = await getALSReleaseManifestWithoutCache(globalStorageUri);
  if (error.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: error._0
          };
  }
  var devRelease = error._0.find(function (release) {
        return release.tag_name === "dev";
      });
  if (devRelease === undefined) {
    return {
            TAG: "Error",
            _0: "CannotFindCompatibleALSRelease"
          };
  }
  var wasmAsset = devRelease.assets.find(function (asset) {
        return asset.name === "als-dev-wasm";
      });
  if (wasmAsset !== undefined) {
    return {
            TAG: "Ok",
            _0: {
              release: devRelease,
              asset: wasmAsset,
              saveAsFileName: "dev-wasm-als"
            }
          };
  } else {
    return {
            TAG: "Error",
            _0: "CannotFindCompatibleALSRelease"
          };
  }
}

function download(globalStorageUri) {
  return async function () {
    var error = await getDownloadDescriptor(globalStorageUri);
    if (error.TAG === "Ok") {
      return await Connection__Download$AgdaModeVscode.download(globalStorageUri, error._0);
    } else {
      return {
              TAG: "Error",
              _0: error._0
            };
    }
  };
}

exports.makeAgdaLanguageServerRepo = makeAgdaLanguageServerRepo;
exports.getALSReleaseManifestWithoutCache = getALSReleaseManifestWithoutCache;
exports.getDownloadDescriptor = getDownloadDescriptor;
exports.download = download;
/* Connection__Download-AgdaModeVscode Not a pure module */
