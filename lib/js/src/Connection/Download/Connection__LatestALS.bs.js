// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Util$AgdaModeVscode = require("../../Util/Util.bs.js");
var Connection__Download$AgdaModeVscode = require("./Connection__Download.bs.js");
var Connection__Download__Platform$AgdaModeVscode = require("./Connection__Download__Platform.bs.js");

function makeAgdaLanguageServerRepo(globalStorageUri) {
  return {
          username: "agda",
          repository: "agda-language-server",
          userAgent: "agda/agda-mode-vscode",
          globalStorageUri: globalStorageUri,
          cacheInvalidateExpirationSecs: 86400
        };
}

async function chooseAssetByPlatform(release, platform) {
  var assetName = Connection__Download__Platform$AgdaModeVscode.toAssetName(platform);
  return release.assets.filter(function (asset) {
              return asset.name.endsWith(assetName + ".zip");
            });
}

async function toDownloadDescriptor(releases, platform) {
  var laterReleases = releases.filter(function (release) {
        return Caml_obj.greaterequal(new Date(release.published_at), new Date("2024-12-18"));
      });
  var pinnedRelease = laterReleases.find(function (release) {
        return release.name === "v0.2.7.0.1.5";
      });
  if (pinnedRelease === undefined) {
    return {
            TAG: "Error",
            _0: "CannotFindCompatibleALSRelease"
          };
  }
  var getAgdaVersion = function (asset) {
    return asset.name.replace(/als-Agda-/, "").replace(/-.*/, "");
  };
  var assets = await chooseAssetByPlatform(pinnedRelease, platform);
  var result = assets.toSorted(function (a, b) {
            return Util$AgdaModeVscode.Version.compare(getAgdaVersion(b), getAgdaVersion(a));
          }).map(function (asset) {
          return {
                  release: pinnedRelease,
                  asset: asset,
                  saveAsFileName: "latest-als"
                };
        })[0];
  if (result !== undefined) {
    return {
            TAG: "Ok",
            _0: result
          };
  } else {
    return {
            TAG: "Error",
            _0: "CannotFindCompatibleALSRelease"
          };
  }
}

async function getDownloadDescriptor(memento, globalStorageUri, platform) {
  var error = await Connection__Download$AgdaModeVscode.getReleaseManifestFromGitHub(memento, makeAgdaLanguageServerRepo(globalStorageUri), undefined);
  if (error.TAG === "Ok") {
    return await toDownloadDescriptor(error._0, platform);
  } else {
    return {
            TAG: "Error",
            _0: error._0
          };
  }
}

exports.makeAgdaLanguageServerRepo = makeAgdaLanguageServerRepo;
exports.chooseAssetByPlatform = chooseAssetByPlatform;
exports.toDownloadDescriptor = toDownloadDescriptor;
exports.getDownloadDescriptor = getDownloadDescriptor;
/* Util-AgdaModeVscode Not a pure module */
