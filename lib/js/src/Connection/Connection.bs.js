// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Config$AgdaModeVscode = require("../Config.bs.js");
var Parser$AgdaModeVscode = require("../Parser/Parser.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");
var Json_Encode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Encode.bs.js");
var Connection__Target$AgdaModeVscode = require("./Connection__Target.bs.js");
var Connection__Target__ALS$AgdaModeVscode = require("./Target/ALS/Connection__Target__ALS.bs.js");
var Connection__Target__Agda$AgdaModeVscode = require("./Target/Agda/Connection__Target__Agda.bs.js");

function getFromConfig() {
  var param = {
    commandLineOptions: Config$AgdaModeVscode.Connection.getCommandLineOptions()
  };
  return {
          commandLineOptions: Json_Encode$JsonCombinators.array(function (prim) {
                  return prim;
                })(param.commandLineOptions)
        };
}

async function destroy(connection) {
  if (connection === undefined) {
    return {
            TAG: "Ok",
            _0: undefined
          };
  }
  if (connection.TAG === "Agda") {
    await Connection__Target__Agda$AgdaModeVscode.destroy(connection._0);
    return {
            TAG: "Ok",
            _0: undefined
          };
  }
  var error = await Connection__Target__ALS$AgdaModeVscode.destroy(connection._0);
  if (error.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: undefined
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "ALS",
              _0: error._0
            }
          };
  }
}

async function makeWithTarget(target) {
  if (target.TAG === "Agda") {
    var path = target._1;
    var method_1 = [];
    var method = {
      TAG: "ViaPipe",
      _0: path,
      _1: method_1,
      _2: undefined
    };
    var error = await Connection__Target__Agda$AgdaModeVscode.make(method, target._0, path);
    if (error.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: {
                TAG: "Agda",
                _0: error._0,
                _1: target
              }
            };
    } else {
      return {
              TAG: "Error",
              _0: {
                TAG: "Agda",
                _0: error._0,
                _1: path
              }
            };
    }
  }
  var error$1 = await Connection__Target__ALS$AgdaModeVscode.make(target._2, getFromConfig());
  if (error$1.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: {
              TAG: "ALS",
              _0: error$1._0,
              _1: target
            }
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "ALS",
              _0: error$1._0
            }
          };
  }
}

async function findCommands(platformDeps, commands) {
  return await platformDeps.findCommands(commands);
}

async function fromPathsAndCommands(platformDeps, memento, paths, commands) {
  var targetErrors = await Connection__Target$AgdaModeVscode.getPicked(memento, paths);
  if (targetErrors.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: targetErrors._0
          };
  }
  var commandErrors = await findCommands(platformDeps, commands);
  if (commandErrors.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: commandErrors._0
          };
  }
  var attempts_targets = targetErrors._0;
  var attempts_commands = commandErrors._0;
  var attempts = {
    targets: attempts_targets,
    commands: attempts_commands
  };
  return {
          TAG: "Error",
          _0: attempts
        };
}

async function fromDownloads(platformDeps, memento, globalStorageUri, attempts) {
  var platform = await platformDeps.determinePlatform();
  if (platform.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: {
              TAG: "Aggregated",
              _0: {
                TAG: "PlatformNotSupported",
                _0: attempts,
                _1: platform._0
              }
            }
          };
  }
  var policy = Config$AgdaModeVscode.Connection.DownloadPolicy.get();
  var policy$1;
  switch (policy) {
    case "Yes" :
    case "No" :
        policy$1 = policy;
        break;
    case "Undecided" :
        policy$1 = await platformDeps.askUserAboutDownloadPolicy();
        break;
    
  }
  switch (policy$1) {
    case "Yes" :
        await Config$AgdaModeVscode.Connection.DownloadPolicy.set("Yes");
        var target = await platformDeps.alreadyDownloaded(globalStorageUri)();
        if (target !== undefined) {
          await Config$AgdaModeVscode.Connection.addAgdaPath(Connection__Target$AgdaModeVscode.toURI(target));
          return {
                  TAG: "Ok",
                  _0: target
                };
        }
        var error = await platformDeps.downloadLatestALS(memento, globalStorageUri)(platform._0);
        if (error.TAG !== "Ok") {
          return {
                  TAG: "Error",
                  _0: {
                    TAG: "Aggregated",
                    _0: {
                      TAG: "DownloadALS",
                      _0: attempts,
                      _1: error._0
                    }
                  }
                };
        }
        var target$1 = error._0;
        await Config$AgdaModeVscode.Connection.addAgdaPath(Connection__Target$AgdaModeVscode.toURI(target$1));
        return {
                TAG: "Ok",
                _0: target$1
              };
    case "No" :
    case "Undecided" :
        break;
    
  }
  await Config$AgdaModeVscode.Connection.DownloadPolicy.set("No");
  return {
          TAG: "Error",
          _0: {
            TAG: "Aggregated",
            _0: {
              TAG: "NoDownloadALS",
              _0: attempts
            }
          }
        };
}

async function make(platformDeps, memento, globalStorageUri, paths, commands) {
  var attempts = await fromPathsAndCommands(platformDeps, memento, paths, commands);
  if (attempts.TAG === "Ok") {
    var target = attempts._0;
    await Config$AgdaModeVscode.Connection.addAgdaPath(Connection__Target$AgdaModeVscode.toURI(target));
    return await makeWithTarget(target);
  }
  var error = await fromDownloads(platformDeps, memento, globalStorageUri, attempts._0);
  if (error.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: error._0
          };
  }
  var target$1 = error._0;
  await Config$AgdaModeVscode.Connection.addAgdaPath(Connection__Target$AgdaModeVscode.toURI(target$1));
  return await makeWithTarget(target$1);
}

async function sendRequest(connection, $$document, request, handler) {
  var encodeRequest = function ($$document, version) {
    var filepath = Parser$AgdaModeVscode.filepath($$document.fileName);
    var libraryPath = Config$AgdaModeVscode.getLibraryPath();
    var highlightingMethod = Config$AgdaModeVscode.Highlighting.getHighlightingMethod();
    var backend = Config$AgdaModeVscode.getBackend();
    return Request$AgdaModeVscode.encode($$document, version, filepath, backend, libraryPath, highlightingMethod, request);
  };
  if (connection.TAG === "Agda") {
    var target = connection._1;
    var conn = connection._0;
    var match = Connection__Target__Agda$AgdaModeVscode.getInfo(conn);
    var error = await Connection__Target__Agda$AgdaModeVscode.sendRequest(conn, encodeRequest($$document, match[0]), handler);
    if (error.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: target
            };
    }
    await destroy({
          TAG: "Agda",
          _0: conn,
          _1: target
        });
    return {
            TAG: "Error",
            _0: {
              TAG: "Agda",
              _0: error._0,
              _1: match[1]
            }
          };
  }
  var target$1 = connection._1;
  var conn$1 = connection._0;
  var error$1 = await Connection__Target__ALS$AgdaModeVscode.sendRequest(conn$1, encodeRequest($$document, conn$1.agdaVersion), handler);
  if (error$1.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: target$1
          };
  }
  await destroy({
        TAG: "ALS",
        _0: conn$1,
        _1: target$1
      });
  return {
          TAG: "Error",
          _0: {
            TAG: "ALS",
            _0: error$1._0
          }
        };
}

var Module = {
  make: make,
  destroy: destroy,
  fromPathsAndCommands: fromPathsAndCommands,
  fromDownloads: fromDownloads,
  sendRequest: sendRequest,
  findCommands: findCommands
};

var $$Error;

var Agda;

var ALS;

var Target;

var URI;

exports.$$Error = $$Error;
exports.Agda = Agda;
exports.ALS = ALS;
exports.Target = Target;
exports.URI = URI;
exports.Module = Module;
exports.make = make;
exports.destroy = destroy;
exports.fromPathsAndCommands = fromPathsAndCommands;
exports.fromDownloads = fromDownloads;
exports.sendRequest = sendRequest;
exports.findCommands = findCommands;
/* Config-AgdaModeVscode Not a pure module */
