// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Nodepath = require("node:path");
var FS$AgdaModeVscode = require("../FS.bs.js");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Parser$AgdaModeVscode = require("../Parser/Parser.bs.js");
var Memento$AgdaModeVscode = require("../Memento.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");
var Json_Encode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Encode.bs.js");
var Connection__URI$AgdaModeVscode = require("./Shared/Connection__URI.bs.js");
var Connection__Error$AgdaModeVscode = require("./Shared/Connection__Error.bs.js");
var Connection__Endpoint__ALS$AgdaModeVscode = require("./Endpoint/Connection__Endpoint__ALS.bs.js");
var Connection__Process__Exec$AgdaModeVscode = require("./Shared/Connection__Process__Exec.bs.js");
var Connection__Endpoint__Agda$AgdaModeVscode = require("./Endpoint/Connection__Endpoint__Agda.bs.js");

function getFromConfig() {
  var param = {
    commandLineOptions: Config$AgdaModeVscode.Connection.getCommandLineOptions()
  };
  return {
          commandLineOptions: Json_Encode$JsonCombinators.array(function (prim) {
                  return prim;
                })(param.commandLineOptions)
        };
}

function toString(connection) {
  if (connection.TAG === "Agda") {
    return "Agda(" + connection._1 + ", " + connection._2 + ")";
  }
  var match = connection._2;
  return "ALS(" + connection._1 + ", " + match[0] + ", " + match[1] + ")";
}

async function destroy(connection, logChannel) {
  if (connection === undefined) {
    return {
            TAG: "Ok",
            _0: undefined
          };
  }
  Chan$AgdaModeVscode.emit(logChannel, {
        TAG: "Connection",
        _0: {
          TAG: "Disconnected",
          _0: connection._1
        }
      });
  if (connection.TAG === "Agda") {
    await Connection__Endpoint__Agda$AgdaModeVscode.destroy(connection._0);
    return {
            TAG: "Ok",
            _0: undefined
          };
  }
  var error = await Connection__Endpoint__ALS$AgdaModeVscode.destroy(connection._0);
  if (error.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: undefined
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "CommWithALS",
              _0: error._0
            }
          };
  }
}

function getPath(connection) {
  return connection._1;
}

async function checkForPrebuiltDataDirectory(executablePath) {
  var prebuildDataDirPath = Nodepath.join(executablePath, "..", "data");
  var prebuildDataDirURI = Vscode.Uri.file(prebuildDataDirPath);
  var match = await FS$AgdaModeVscode.stat(prebuildDataDirURI);
  if (match.TAG === "Ok") {
    return Nodepath.join(executablePath, "..", "data");
  }
  
}

async function probeFilepath(path) {
  var match = Connection__URI$AgdaModeVscode.parse(path);
  if (match.TAG !== "FileURI") {
    return {
            TAG: "Error",
            _0: "CannotHandleURLsAtTheMoment"
          };
  }
  var fsPath = match._1.fsPath;
  var result = await Connection__Process__Exec$AgdaModeVscode.run(fsPath, ["--version"], 3000);
  if (result.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: {
              TAG: "CannotDetermineAgdaOrALS",
              _0: result._0
            }
          };
  }
  var output = result._0;
  var match$1 = output.match(/Agda version (.*)/);
  if (!(match$1 == null) && match$1.length === 2) {
    var version = match$1[1];
    if (version !== undefined) {
      return {
              TAG: "Ok",
              _0: [
                fsPath,
                {
                  TAG: "Ok",
                  _0: version
                }
              ]
            };
    }
    
  }
  var match$2 = output.match(/Agda v(.*) Language Server v(.*)/);
  if (match$2 == null) {
    return {
            TAG: "Error",
            _0: {
              TAG: "NotAgdaOrALS",
              _0: output
            }
          };
  }
  if (match$2.length !== 3) {
    return {
            TAG: "Error",
            _0: {
              TAG: "NotAgdaOrALS",
              _0: output
            }
          };
  }
  var agdaVersion = match$2[1];
  if (agdaVersion === undefined) {
    return {
            TAG: "Error",
            _0: {
              TAG: "NotAgdaOrALS",
              _0: output
            }
          };
  }
  var alsVersion = match$2[2];
  if (alsVersion === undefined) {
    return {
            TAG: "Error",
            _0: {
              TAG: "NotAgdaOrALS",
              _0: output
            }
          };
  }
  var assetPath = await checkForPrebuiltDataDirectory(fsPath);
  var lspOptions;
  if (assetPath !== undefined) {
    var env = Object.fromEntries([[
            "Agda_datadir",
            assetPath
          ]]);
    lspOptions = {
      env: env
    };
  } else {
    lspOptions = undefined;
  }
  return {
          TAG: "Ok",
          _0: [
            fsPath,
            {
              TAG: "Error",
              _0: [
                alsVersion,
                agdaVersion,
                lspOptions
              ]
            }
          ]
        };
}

async function makeWithRawPath(rawpath) {
  var error = await probeFilepath(rawpath);
  if (error.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: Connection__Error$AgdaModeVscode.Establish.fromProbeError(rawpath, error._0)
          };
  }
  var match = error._0;
  var agdaVersion = match[1];
  var path = match[0];
  if (agdaVersion.TAG === "Ok") {
    var agdaVersion$1 = agdaVersion._0;
    var connection = await Connection__Endpoint__Agda$AgdaModeVscode.make(path, agdaVersion$1);
    return {
            TAG: "Ok",
            _0: {
              TAG: "Agda",
              _0: connection,
              _1: path,
              _2: agdaVersion$1
            }
          };
  }
  var match$1 = agdaVersion._0;
  var lspOptions = match$1[2];
  var error$1 = await Connection__Endpoint__ALS$AgdaModeVscode.make({
        TAG: "ViaPipe",
        _0: rawpath,
        _1: []
      }, lspOptions, getFromConfig());
  if (error$1.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: {
              TAG: "ALS",
              _0: error$1._0,
              _1: path,
              _2: [
                match$1[0],
                match$1[1],
                lspOptions
              ]
            }
          };
  } else {
    return {
            TAG: "Error",
            _0: Connection__Error$AgdaModeVscode.Establish.fromProbeError(path, {
                  TAG: "CannotMakeConnectionWithALS",
                  _0: error$1._0
                })
          };
  }
}

async function tryUntilSuccess(xs) {
  var loop = async function (remaining, errors) {
    var task = remaining[0];
    if (task === undefined) {
      return {
              TAG: "Error",
              _0: errors
            };
    }
    var success = await task();
    if (success.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: success._0
            };
    }
    var newErrors = errors.concat([success._0]);
    var nextTasks = remaining.slice(1);
    return await loop(nextTasks, newErrors);
  };
  return await loop(xs, []);
}

async function fromPaths(platformDeps, paths) {
  var tasks = paths.map(function (path) {
        return function () {
          return makeWithRawPath(path);
        };
      });
  var connection = await tryUntilSuccess(tasks);
  if (connection.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: connection._0
          };
  } else {
    return {
            TAG: "Error",
            _0: Connection__Error$AgdaModeVscode.Establish.mergeMany(connection._0)
          };
  }
}

async function fromCommands(platformDeps, commands) {
  var tryCommand = async function (command) {
    var rawPath = await platformDeps.findCommand(command, undefined);
    if (rawPath.TAG === "Ok") {
      return await makeWithRawPath(rawPath._0);
    } else {
      return {
              TAG: "Error",
              _0: Connection__Error$AgdaModeVscode.Establish.fromCommandError(command, rawPath._0)
            };
    }
  };
  var tasks = commands.map(function (command) {
        return function () {
          return tryCommand(command);
        };
      });
  var connection = await tryUntilSuccess(tasks);
  if (connection.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: connection._0
          };
  } else {
    return {
            TAG: "Error",
            _0: Connection__Error$AgdaModeVscode.Establish.mergeMany(connection._0)
          };
  }
}

async function fromDownloads(platformDeps, memento, globalStorageUri) {
  var platform = await platformDeps.determinePlatform();
  if (platform.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: Connection__Error$AgdaModeVscode.Establish.fromDownloadError({
                  TAG: "PlatformNotSupported",
                  _0: platform._0
                })
          };
  }
  var policy = Config$AgdaModeVscode.Connection.DownloadPolicy.get();
  var policy$1;
  switch (policy) {
    case "Yes" :
    case "No" :
        policy$1 = policy;
        break;
    case "Undecided" :
        policy$1 = await platformDeps.askUserAboutDownloadPolicy();
        break;
    
  }
  switch (policy$1) {
    case "Yes" :
        await Config$AgdaModeVscode.Connection.DownloadPolicy.set("Yes");
        var path = await platformDeps.alreadyDownloaded(globalStorageUri)();
        var downloadResult;
        if (path !== undefined) {
          downloadResult = {
            TAG: "Ok",
            _0: path
          };
        } else {
          var error = await platformDeps.downloadLatestALS(memento, globalStorageUri)(platform._0);
          downloadResult = error.TAG === "Ok" ? ({
                TAG: "Ok",
                _0: error._0
              }) : ({
                TAG: "Error",
                _0: Connection__Error$AgdaModeVscode.Establish.fromDownloadError(error._0)
              });
        }
        if (downloadResult.TAG !== "Ok") {
          return {
                  TAG: "Error",
                  _0: downloadResult._0
                };
        }
        var connection = await makeWithRawPath(downloadResult._0);
        if (connection.TAG !== "Ok") {
          return {
                  TAG: "Error",
                  _0: connection._0
                };
        }
        var connection$1 = connection._0;
        await Config$AgdaModeVscode.Connection.addAgdaPath(getPath(connection$1));
        await Memento$AgdaModeVscode.Module.PickedConnection.set(memento, getPath(connection$1));
        return {
                TAG: "Ok",
                _0: connection$1
              };
    case "No" :
    case "Undecided" :
        break;
    
  }
  await Config$AgdaModeVscode.Connection.DownloadPolicy.set("No");
  return {
          TAG: "Error",
          _0: Connection__Error$AgdaModeVscode.Establish.fromDownloadError("OptedNotToDownload")
        };
}

async function make(platformDeps, memento, globalStorageUri, paths, commands, logChannel) {
  var logConnection = function (connection) {
    if (connection.TAG === "Agda") {
      return Chan$AgdaModeVscode.emit(logChannel, {
                  TAG: "Connection",
                  _0: {
                    TAG: "ConnectedToAgda",
                    _0: connection._1,
                    _1: connection._2
                  }
                });
    }
    var match = connection._2;
    Chan$AgdaModeVscode.emit(logChannel, {
          TAG: "Connection",
          _0: {
            TAG: "ConnectedToALS",
            _0: connection._1,
            _1: match[0],
            _2: match[1]
          }
        });
  };
  var pickedPath = Memento$AgdaModeVscode.Module.PickedConnection.get(memento);
  var pathsWithSelectedConnection = pickedPath !== undefined ? [pickedPath].concat(paths) : paths;
  var tasks = [
    (function () {
        return fromPaths(platformDeps, pathsWithSelectedConnection);
      }),
    (function () {
        return fromCommands(platformDeps, commands);
      }),
    (function () {
        return fromDownloads(platformDeps, memento, globalStorageUri);
      })
  ];
  var connection = await tryUntilSuccess(tasks);
  if (connection.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: {
              TAG: "Establish",
              _0: Connection__Error$AgdaModeVscode.Establish.mergeMany(connection._0)
            }
          };
  }
  var connection$1 = connection._0;
  logConnection(connection$1);
  await Config$AgdaModeVscode.Connection.addAgdaPath(getPath(connection$1));
  await Memento$AgdaModeVscode.Module.PickedConnection.set(memento, getPath(connection$1));
  return {
          TAG: "Ok",
          _0: connection$1
        };
}

async function sendRequest(connection, $$document, request, handler) {
  var encodeRequest = function ($$document, version) {
    var filepath = Parser$AgdaModeVscode.filepath($$document.fileName);
    var libraryPath = Config$AgdaModeVscode.getLibraryPath();
    var highlightingMethod = Config$AgdaModeVscode.Highlighting.getHighlightingMethod();
    var backend = Config$AgdaModeVscode.getBackend();
    return Request$AgdaModeVscode.encode($$document, version, filepath, backend, libraryPath, highlightingMethod, request);
  };
  if (connection.TAG === "Agda") {
    var version = connection._2;
    var conn = connection._0;
    var error = await Connection__Endpoint__Agda$AgdaModeVscode.sendRequest(conn, encodeRequest($$document, version), handler);
    if (error.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: undefined
            };
    }
    await destroy({
          TAG: "Agda",
          _0: conn,
          _1: connection._1,
          _2: version
        }, Chan$AgdaModeVscode.make());
    return {
            TAG: "Error",
            _0: {
              TAG: "CommWithAgda",
              _0: error._0
            }
          };
  }
  var match = connection._2;
  var conn$1 = connection._0;
  var error$1 = await Connection__Endpoint__ALS$AgdaModeVscode.sendRequest(conn$1, encodeRequest($$document, conn$1.agdaVersion), handler);
  if (error$1.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: undefined
          };
  }
  await destroy({
        TAG: "ALS",
        _0: conn$1,
        _1: connection._1,
        _2: [
          match[0],
          match[1],
          match[2]
        ]
      }, Chan$AgdaModeVscode.make());
  return {
          TAG: "Error",
          _0: {
            TAG: "CommWithALS",
            _0: error$1._0
          }
        };
}

var Module = {
  make: make,
  toString: toString,
  getPath: getPath,
  destroy: destroy,
  fromPaths: fromPaths,
  fromCommands: fromCommands,
  fromDownloads: fromDownloads,
  sendRequest: sendRequest,
  checkForPrebuiltDataDirectory: checkForPrebuiltDataDirectory,
  probeFilepath: probeFilepath,
  makeWithRawPath: makeWithRawPath
};

var $$Error;

var Agda;

var ALS;

var URI;

exports.$$Error = $$Error;
exports.Agda = Agda;
exports.ALS = ALS;
exports.URI = URI;
exports.Module = Module;
exports.make = make;
exports.toString = toString;
exports.getPath = getPath;
exports.destroy = destroy;
exports.fromPaths = fromPaths;
exports.fromCommands = fromCommands;
exports.fromDownloads = fromDownloads;
exports.sendRequest = sendRequest;
exports.checkForPrebuiltDataDirectory = checkForPrebuiltDataDirectory;
exports.probeFilepath = probeFilepath;
exports.makeWithRawPath = makeWithRawPath;
/* vscode Not a pure module */
