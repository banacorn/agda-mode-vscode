// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Nodepath = require("node:path");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Connection__URI$AgdaModeVscode = require("./Connection__URI.bs.js");
var Connection__Target$AgdaModeVscode = require("./Connection__Target.bs.js");
var Connection__Download__Util$AgdaModeVscode = require("./Download/Connection__Download__Util.bs.js");
var Connection__Download__GitHub$AgdaModeVscode = require("./Download/Connection__Download__GitHub.bs.js");

function toString(x) {
  if (typeof x !== "object") {
    return "Cannot find compatible Agda Language Server release for download. Prebuilts are only available for download on Ubuntu, Windows, and macOS (arm64, x64).\nPlease build from source if you are on a different platform. \nSee https://github.com/agda/agda-language-server for more information.";
  }
  switch (x.TAG) {
    case "CannotFetchALSReleases" :
        return "Cannot fetch releases of Agda Language Server: " + Connection__Download__GitHub$AgdaModeVscode.$$Error.toString(x._0);
    case "CannotDownloadALS" :
        return "Failed download the Agda Language Server: " + Connection__Download__GitHub$AgdaModeVscode.$$Error.toString(x._0);
    case "CannotConnectToALS" :
        return Connection__Target$AgdaModeVscode.$$Error.toString(x._0);
    
  }
}

var $$Error = {
  toString: toString
};

function makeRepo(memento, globalStorageUri) {
  return {
          username: "agda",
          repository: "agda-language-server",
          userAgent: "agda/agda-mode-vscode",
          memento: memento,
          globalStoragePath: globalStorageUri.fsPath,
          cacheInvalidateExpirationSecs: 86400
        };
}

async function getReleaseManifest(memento, globalStorageUri) {
  var match = await Connection__Download__GitHub$AgdaModeVscode.ReleaseManifest.$$fetch(makeRepo(memento, globalStorageUri));
  var error = match[0];
  if (error.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: error._0
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "CannotFetchALSReleases",
              _0: error._0
            }
          };
  }
}

async function download(memento, globalStorageUri, fetchSpec) {
  var reportProgress = await Connection__Download__Util$AgdaModeVscode.Progress.report("Agda Language Server");
  var globalStoragePath = globalStorageUri.fsPath;
  var error = await Connection__Download__GitHub$AgdaModeVscode.download(fetchSpec, memento, globalStoragePath, reportProgress);
  if (error.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: {
              TAG: "CannotDownloadALS",
              _0: error._0
            }
          };
  }
  var destPath = Connection__URI$AgdaModeVscode.parse(Nodepath.join(globalStoragePath, fetchSpec.saveAsFileName, "als"));
  await Config$AgdaModeVscode.Connection.addAgdaPath(destPath);
  var e = await Connection__Target$AgdaModeVscode.fromURI(destPath);
  if (e.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: e._0
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "CannotConnectToALS",
              _0: e._0
            }
          };
  }
}

exports.$$Error = $$Error;
exports.makeRepo = makeRepo;
exports.getReleaseManifest = getReleaseManifest;
exports.download = download;
/* node:path Not a pure module */
