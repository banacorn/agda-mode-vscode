// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Js_array = require("rescript/lib/js/js_array.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");

var Message = {};

function toEnum(x) {
  if (x === "Continue") {
    return 1;
  } else {
    return 2;
  }
}

var ErrorAction = {
  toEnum: toEnum
};

function toEnum$1(x) {
  if (x === "DoNotRestart") {
    return 1;
  } else {
    return 2;
  }
}

var CloseAction = {
  toEnum: toEnum$1
};

function make(error, closed) {
  var error$1 = function (a, b, c) {
    return toEnum(error(a, b, c));
  };
  var closed$1 = function () {
    return toEnum$1(closed());
  };
  return {
          error: error$1,
          closed: closed$1
        };
}

function makeDefault(name, maxRestartCount) {
  var restarts = [];
  return make((function (param, param$1, count) {
                if (count !== undefined && count <= 3) {
                  return "Continue";
                } else {
                  return "Shutdown";
                }
              }), (function () {
                Js_array.push(Date.now(), restarts);
                var length = restarts.length;
                if (length <= maxRestartCount) {
                  return "Restart";
                }
                var diff = Core__Option.flatMap(restarts[length - 1 | 0], (function (latest) {
                        return Core__Option.map(restarts[0], (function (first) {
                                      return latest - first;
                                    }));
                      }));
                if (diff === undefined) {
                  return "Restart";
                }
                if ((diff | 0) <= 180000) {
                  var max = String(maxRestartCount + 1 | 0);
                  Vscode.window.showErrorMessage("The " + name + "server crashed " + max + " times in the last 3 minutes. The server will not be restarted.");
                  return "DoNotRestart";
                }
                restarts.shift();
                return "Restart";
              }));
}

var ErrorHandler = {
  make: make,
  makeDefault: makeDefault
};

var make$1 = (function (documentSelector, synchronize, errorHandler, initializationOptions) {
      return {
		    documentSelector: documentSelector,
		    synchronize: synchronize,
        errorHandler: errorHandler,
        initializationOptions: initializationOptions
      }
    });

var LanguageClientOptions = {
  make: make$1
};

var makeWithCommand = (function (command, args, options) {
      return { 
        command: command, 
        args: args, 
        options: options
       }
    });

var makeWithStreamInfo = (function (port, host) {
      const net = require('net');
      const socket = net.createConnection({ port: port, host: host })
      return (() => { return new Promise(resolve => resolve({
        writer: socket,
        reader: socket
      })
      )})
    });

var ServerOptions = {
  makeWithCommand: makeWithCommand,
  makeWithStreamInfo: makeWithStreamInfo
};

function toVSCodeDisposable(self) {
  return new Vscode.Disposable((function () {
                self.dispose();
              }));
}

var Disposable = {
  toVSCodeDisposable: toVSCodeDisposable
};

var LanguageClient = {};

exports.Message = Message;
exports.ErrorAction = ErrorAction;
exports.CloseAction = CloseAction;
exports.ErrorHandler = ErrorHandler;
exports.LanguageClientOptions = LanguageClientOptions;
exports.ServerOptions = ServerOptions;
exports.Disposable = Disposable;
exports.LanguageClient = LanguageClient;
/* vscode Not a pure module */
