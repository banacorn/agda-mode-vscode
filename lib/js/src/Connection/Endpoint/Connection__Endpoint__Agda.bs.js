// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Core__Option = require("@rescript/core/lib/js/src/Core__Option.bs.js");
var Chan$AgdaModeVscode = require("../../Util/Chan.bs.js");
var Util$AgdaModeVscode = require("../../Util/Util.bs.js");
var Config$AgdaModeVscode = require("../../Config.bs.js");
var Parser$AgdaModeVscode = require("../../Parser/Parser.bs.js");
var Response$AgdaModeVscode = require("../../Response.bs.js");
var Connection__Scheduler$AgdaModeVscode = require("../Shared/Connection__Scheduler.bs.js");
var Connection__Transport__Process$AgdaModeVscode = require("../Transport/Connection__Transport__Process.bs.js");

function destroy(self) {
  Chan$AgdaModeVscode.destroy(self.chan);
  self.encountedFirstPrompt = false;
  return Connection__Transport__Process$AgdaModeVscode.destroy(self.process);
}

function wire(self) {
  var toResponse = function (extra) {
    return Curry._2(Parser$AgdaModeVscode.Incr.Gen.flatMap, (function (x) {
                  if (x.TAG === "Ok") {
                    var tokens = x._0;
                    if (tokens.TAG === "A" && tokens._0 === "Agda2>") {
                      return "Stop";
                    } else {
                      return {
                              TAG: "Yield",
                              _0: Response$AgdaModeVscode.Prioritized.parse(tokens)
                            };
                    }
                  }
                  var match = x._0;
                  return {
                          TAG: "Yield",
                          _0: {
                            TAG: "Error",
                            _0: {
                              TAG: "SExpression",
                              _0: match[0],
                              _1: match[1]
                            }
                          }
                        };
                }), extra);
  };
  var incrParser = Parser$AgdaModeVscode.SExpression.makeIncr(function (x) {
        var res = toResponse(x);
        if (typeof res !== "object") {
          if (self.encountedFirstPrompt) {
            return Chan$AgdaModeVscode.emit(self.chan, {
                        TAG: "Ok",
                        _0: "Stop"
                      });
          } else {
            self.encountedFirstPrompt = true;
            return ;
          }
        }
        var response = res._0;
        if (response.TAG === "Ok") {
          return Chan$AgdaModeVscode.emit(self.chan, {
                      TAG: "Ok",
                      _0: {
                        TAG: "Yield",
                        _0: response._0
                      }
                    });
        } else {
          return Chan$AgdaModeVscode.emit(self.chan, {
                      TAG: "Error",
                      _0: {
                        TAG: "ResponseParseError",
                        _0: response._0
                      }
                    });
        }
      });
  var listenerHandle;
  listenerHandle = Connection__Transport__Process$AgdaModeVscode.onOutput(self.process, (function (x) {
          switch (x.TAG) {
            case "Stdout" :
                var rawText = x._0;
                if (rawText.startsWith("Error:")) {
                  return Chan$AgdaModeVscode.emit(self.chan, {
                              TAG: "Error",
                              _0: {
                                TAG: "ErrorFromAgda",
                                _0: rawText
                              }
                            });
                } else {
                  Parser$AgdaModeVscode.splitToLines(rawText).forEach(function (extra) {
                        return Parser$AgdaModeVscode.Incr.feed(incrParser, extra);
                      });
                  return ;
                }
            case "Stderr" :
                return Chan$AgdaModeVscode.emit(self.chan, {
                            TAG: "Error",
                            _0: {
                              TAG: "ErrorFromAgda",
                              _0: x._0
                            }
                          });
            case "Event" :
                return Chan$AgdaModeVscode.emit(self.chan, {
                            TAG: "Error",
                            _0: {
                              TAG: "Process",
                              _0: x._0
                            }
                          });
            
          }
        }));
}

async function make(path, version) {
  var args = ["--interaction"].concat(Config$AgdaModeVscode.Connection.getCommandLineOptions());
  var conn = {
    process: Connection__Transport__Process$AgdaModeVscode.make(path, args),
    version: version,
    path: path,
    chan: Chan$AgdaModeVscode.make(),
    encountedFirstPrompt: false
  };
  wire(conn);
  return conn;
}

async function onResponse(conn, callback) {
  var scheduler = Connection__Scheduler$AgdaModeVscode.make();
  var match = Util$AgdaModeVscode.Promise_.pending();
  var allResponsesReceived = match[1];
  var match$1 = Util$AgdaModeVscode.Promise_.pending();
  var allResponsesHandled = match$1[1];
  var listener = function (x) {
    if (x.TAG !== "Ok") {
      return allResponsesReceived({
                  TAG: "Error",
                  _0: x._0
                });
    }
    var match = x._0;
    if (typeof match !== "object") {
      allResponsesReceived({
            TAG: "Ok",
            _0: undefined
          });
      Connection__Scheduler$AgdaModeVscode.runLast(scheduler, (function (response) {
                return callback(response);
              })).finally(allResponsesHandled);
      return ;
    }
    var response = match._0;
    if (response.TAG === "NonLast") {
      return Connection__Scheduler$AgdaModeVscode.runNonLast(scheduler, (function (response) {
                    return callback(response);
                  }), response._0);
    } else {
      return Connection__Scheduler$AgdaModeVscode.addLast(scheduler, response._0, response._1);
    }
  };
  var listenerHandle;
  listenerHandle = Chan$AgdaModeVscode.on(conn.chan, listener);
  var result = await match[0];
  Core__Option.forEach(listenerHandle, (function (destroyListener) {
          destroyListener();
        }));
  await match$1[0];
  return result;
}

function sendRequest(conn, request, handler) {
  var promise = onResponse(conn, handler);
  Connection__Transport__Process$AgdaModeVscode.send(conn.process, request);
  return promise;
}

var Module = {
  make: make,
  destroy: destroy,
  sendRequest: sendRequest
};

var $$Error;

var $$Scheduler;

var Process;

exports.$$Error = $$Error;
exports.$$Scheduler = $$Scheduler;
exports.Process = Process;
exports.Module = Module;
exports.make = make;
exports.destroy = destroy;
exports.sendRequest = sendRequest;
/* Chan-AgdaModeVscode Not a pure module */
