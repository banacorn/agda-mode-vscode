// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Nodepath = require("node:path");
var FS$AgdaModeVscode = require("../../FS.bs.js");
var Connection__Process__Exec$AgdaModeVscode = require("../Shared/Connection__Process__Exec.bs.js");

async function checkForPrebuiltDataDirectory(executablePath) {
  var prebuildDataDirPath = Nodepath.join(executablePath, "..", "data");
  var prebuildDataDirURI = Vscode.Uri.file(prebuildDataDirPath);
  var match = await FS$AgdaModeVscode.stat(prebuildDataDirURI);
  if (match.TAG === "Ok") {
    return Nodepath.join(executablePath, "..", "data");
  }
  
}

async function probeFilepath(uri) {
  if (uri.TAG !== "FileURI") {
    return {
            TAG: "Error",
            _0: "CannotHandleURLsATM"
          };
  }
  var path = uri._1.fsPath;
  var result = await Connection__Process__Exec$AgdaModeVscode.run(path, ["--version"], undefined);
  if (result.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: {
              TAG: "CannotDetermineAgdaOrALS",
              _0: result._0
            }
          };
  }
  var output = result._0;
  var match = output.match(/Agda version (.*)/);
  if (!(match == null) && match.length === 2) {
    var version = match[1];
    if (version !== undefined) {
      return {
              TAG: "Ok",
              _0: {
                TAG: "Agda",
                _0: version,
                _1: path
              }
            };
    }
    
  }
  var match$1 = output.match(/Agda v(.*) Language Server v(.*)/);
  if (match$1 == null) {
    return {
            TAG: "Error",
            _0: {
              TAG: "NotAgdaOrALS",
              _0: output
            }
          };
  }
  if (match$1.length !== 3) {
    return {
            TAG: "Error",
            _0: {
              TAG: "NotAgdaOrALS",
              _0: output
            }
          };
  }
  var agdaVersion = match$1[1];
  if (agdaVersion === undefined) {
    return {
            TAG: "Error",
            _0: {
              TAG: "NotAgdaOrALS",
              _0: output
            }
          };
  }
  var alsVersion = match$1[2];
  if (alsVersion === undefined) {
    return {
            TAG: "Error",
            _0: {
              TAG: "NotAgdaOrALS",
              _0: output
            }
          };
  }
  var assetPath = await checkForPrebuiltDataDirectory(path);
  var lspOptions;
  if (assetPath !== undefined) {
    var env = Object.fromEntries([[
            "Agda_datadir",
            assetPath
          ]]);
    lspOptions = {
      env: env
    };
  } else {
    lspOptions = undefined;
  }
  return {
          TAG: "Ok",
          _0: {
            TAG: "ALS",
            _0: alsVersion,
            _1: agdaVersion,
            _2: {
              TAG: "ViaPipe",
              _0: path,
              _1: []
            },
            _3: lspOptions
          }
        };
}

var Module = {
  probeFilepath: probeFilepath
};

exports.checkForPrebuiltDataDirectory = checkForPrebuiltDataDirectory;
exports.Module = Module;
exports.probeFilepath = probeFilepath;
/* vscode Not a pure module */
