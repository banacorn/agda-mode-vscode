// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Nodepath = require("node:path");
var FS$AgdaModeVscode = require("../../FS.bs.js");
var Util$AgdaModeVscode = require("../../Util/Util.bs.js");
var Memento$AgdaModeVscode = require("../../Memento.bs.js");
var Connection__URI$AgdaModeVscode = require("../Shared/Connection__URI.bs.js");
var Connection__Process__Exec$AgdaModeVscode = require("../Shared/Connection__Process__Exec.bs.js");

async function checkForPrebuiltDataDirectory(executablePath) {
  var prebuildDataDirPath = Nodepath.join(executablePath, "..", "data");
  var prebuildDataDirURI = Vscode.Uri.file(prebuildDataDirPath);
  var match = await FS$AgdaModeVscode.stat(prebuildDataDirURI);
  if (match.TAG === "Ok") {
    return Nodepath.join(executablePath, "..", "data");
  }
  
}

function toString(x) {
  switch (x.TAG) {
    case "NotAgdaOrALS" :
        var output = x._1;
        var outputInfo = output === "" ? "no output (empty string)" : "'" + output + "'";
        return Connection__URI$AgdaModeVscode.toString(x._0) + ": doesn't seem to be an Agda executable or an Agda Language Server. Output received: " + outputInfo;
    case "SomethingWentWrong" :
        return Connection__URI$AgdaModeVscode.toString(x._0) + ": " + Connection__Process__Exec$AgdaModeVscode.$$Error.toString(x._1);
    case "CannotHandleURLsATM" :
        return Connection__URI$AgdaModeVscode.toString(x._0) + ": Cannot handle URLs at the moment, this will be supported again in the future";
    
  }
}

var $$Error = {
  toString: toString
};

async function probeFilepath(uri) {
  if (uri.TAG !== "FileURI") {
    return {
            TAG: "Error",
            _0: {
              TAG: "CannotHandleURLsATM",
              _0: uri
            }
          };
  }
  var path = uri._0.fsPath;
  var result = await Connection__Process__Exec$AgdaModeVscode.run(path, ["--version"], undefined);
  if (result.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: {
              TAG: "SomethingWentWrong",
              _0: uri,
              _1: result._0
            }
          };
  }
  var output = result._0;
  var match = output.match(/Agda version (.*)/);
  if (!(match == null) && match.length === 2) {
    var version = match[1];
    if (version !== undefined) {
      return {
              TAG: "Ok",
              _0: {
                TAG: "Agda",
                _0: version,
                _1: path
              }
            };
    }
    
  }
  var match$1 = output.match(/Agda v(.*) Language Server v(.*)/);
  if (match$1 == null) {
    return {
            TAG: "Error",
            _0: {
              TAG: "NotAgdaOrALS",
              _0: uri,
              _1: output
            }
          };
  }
  if (match$1.length !== 3) {
    return {
            TAG: "Error",
            _0: {
              TAG: "NotAgdaOrALS",
              _0: uri,
              _1: output
            }
          };
  }
  var agdaVersion = match$1[1];
  if (agdaVersion === undefined) {
    return {
            TAG: "Error",
            _0: {
              TAG: "NotAgdaOrALS",
              _0: uri,
              _1: output
            }
          };
  }
  var alsVersion = match$1[2];
  if (alsVersion === undefined) {
    return {
            TAG: "Error",
            _0: {
              TAG: "NotAgdaOrALS",
              _0: uri,
              _1: output
            }
          };
  }
  var assetPath = await checkForPrebuiltDataDirectory(path);
  var lspOptions;
  if (assetPath !== undefined) {
    var env = Object.fromEntries([[
            "Agda_datadir",
            assetPath
          ]]);
    lspOptions = {
      env: env
    };
  } else {
    lspOptions = undefined;
  }
  return {
          TAG: "Ok",
          _0: {
            TAG: "ALS",
            _0: alsVersion,
            _1: agdaVersion,
            _2: {
              TAG: "ViaPipe",
              _0: path,
              _1: [],
              _2: lspOptions
            }
          }
        };
}

async function fromURI(uri) {
  if (uri.TAG !== "FileURI") {
    return {
            TAG: "Error",
            _0: {
              TAG: "CannotHandleURLsATM",
              _0: uri
            }
          };
  }
  var endpoint = await probeFilepath(uri);
  if (endpoint.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: endpoint._0
          };
  } else {
    return {
            TAG: "Error",
            _0: endpoint._0
          };
  }
}

async function fromRawPath(rawPath) {
  var uri = Connection__URI$AgdaModeVscode.parse(rawPath);
  return await fromURI(uri);
}

function fromVSCodeUri(uri) {
  return fromRawPath(uri.toString());
}

function fromRawPaths(paths) {
  return Promise.all(paths.map(fromRawPath));
}

function fromURIs(uris) {
  return Promise.all(uris.map(fromURI));
}

function toURI(endpoint) {
  if (endpoint.TAG === "Agda") {
    return {
            TAG: "FileURI",
            _0: Vscode.Uri.file(endpoint._1)
          };
  }
  var url = endpoint._2;
  if (url.TAG === "ViaPipe") {
    return {
            TAG: "FileURI",
            _0: Vscode.Uri.file(url._0)
          };
  } else {
    return {
            TAG: "LspURI",
            _0: url._0
          };
  }
}

async function getPicked(memento, rawSuppliedPaths) {
  var match = Util$AgdaModeVscode.Result.partition(await Promise.all(rawSuppliedPaths.map(fromURI)));
  var suppliedEndpoints = match[0];
  var endpoint = suppliedEndpoints[0];
  var pickFromSuppliedEndpointsInstead = endpoint !== undefined ? ({
        TAG: "Ok",
        _0: endpoint
      }) : ({
        TAG: "Error",
        _0: match[1]
      });
  var rawPathFromMemento = Memento$AgdaModeVscode.Module.PickedConnection.get(memento);
  if (rawPathFromMemento === undefined) {
    return pickFromSuppliedEndpointsInstead;
  }
  var endpointFromMemento = await fromRawPath(rawPathFromMemento);
  if (endpointFromMemento.TAG === "Ok") {
    var endpointFromMemento$1 = endpointFromMemento._0;
    var existsInSuppliedEndpoints = Util$AgdaModeVscode.$$Array.includes(suppliedEndpoints, endpointFromMemento$1);
    if (existsInSuppliedEndpoints) {
      return {
              TAG: "Ok",
              _0: endpointFromMemento$1
            };
    } else {
      await Memento$AgdaModeVscode.Module.PickedConnection.set(memento, undefined);
      return pickFromSuppliedEndpointsInstead;
    }
  }
  await Memento$AgdaModeVscode.Module.PickedConnection.set(memento, undefined);
  return pickFromSuppliedEndpointsInstead;
}

function setPicked(memento, endpoint) {
  if (endpoint !== undefined) {
    return Memento$AgdaModeVscode.Module.PickedConnection.set(memento, Connection__URI$AgdaModeVscode.toString(toURI(endpoint)));
  } else {
    return Memento$AgdaModeVscode.Module.PickedConnection.set(memento, undefined);
  }
}

var Module = {
  probeFilepath: probeFilepath,
  fromURI: fromURI,
  fromURIs: fromURIs,
  toURI: toURI,
  fromRawPath: fromRawPath,
  fromRawPaths: fromRawPaths,
  fromVSCodeUri: fromVSCodeUri,
  getPicked: getPicked,
  setPicked: setPicked
};

var IPC;

var URI;

exports.IPC = IPC;
exports.URI = URI;
exports.checkForPrebuiltDataDirectory = checkForPrebuiltDataDirectory;
exports.$$Error = $$Error;
exports.Module = Module;
exports.probeFilepath = probeFilepath;
exports.fromURI = fromURI;
exports.fromURIs = fromURIs;
exports.toURI = toURI;
exports.fromRawPath = fromRawPath;
exports.fromRawPaths = fromRawPaths;
exports.fromVSCodeUri = fromVSCodeUri;
exports.getPicked = getPicked;
exports.setPicked = setPicked;
/* vscode Not a pure module */
