// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Core__List = require("@rescript/core/lib/js/src/Core__List.bs.js");
var OS$AgdaModeVscode = require("../../Util/OS.bs.js");
var Connection__Process__Exec$AgdaModeVscode = require("../Shared/Connection__Process__Exec.bs.js");

function toString(error) {
  if (error.TAG === "NotFound") {
    return "Cannot find `" + error._0 + "` in PATH";
  } else {
    return "Cannot find `" + error._0 + "` because: " + Connection__Process__Exec$AgdaModeVscode.$$Error.toString(error._1) + ".";
  }
}

var $$Error = {
  toString: toString
};

async function searchWith(command, name, timeoutOpt) {
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 1000;
  var stdout = await Connection__Process__Exec$AgdaModeVscode.run(command, [name], timeout);
  if (stdout.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: stdout._0.trim()
          };
  }
  var error = stdout._0;
  if (typeof error !== "object") {
    return {
            TAG: "Error",
            _0: {
              TAG: "SomethingWentWrong",
              _0: name,
              _1: error
            }
          };
  }
  if (error.TAG !== "FromStderr") {
    return {
            TAG: "Error",
            _0: {
              TAG: "SomethingWentWrong",
              _0: name,
              _1: error
            }
          };
  }
  var match = error._0;
  if (match === undefined) {
    return {
            TAG: "Error",
            _0: {
              TAG: "SomethingWentWrong",
              _0: name,
              _1: error
            }
          };
  }
  if (match !== 1) {
    return {
            TAG: "Error",
            _0: {
              TAG: "SomethingWentWrong",
              _0: name,
              _1: error
            }
          };
  }
  switch (error._1) {
    case "" :
    case "INFO: Could not find files for the given pattern(s).\r\n" :
        return {
                TAG: "Error",
                _0: {
                  TAG: "NotFound",
                  _0: name
                }
              };
    default:
      return {
              TAG: "Error",
              _0: {
                TAG: "SomethingWentWrong",
                _0: name,
                _1: error
              }
            };
  }
}

async function search(name, timeoutOpt) {
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 1000;
  if (OS$AgdaModeVscode.onUnix) {
    return await searchWith("which", name, timeout);
  }
  var stdout = await searchWith("which", name, timeout);
  if (stdout.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: stdout._0
          };
  } else {
    return await searchWith("where.exe", name, timeout);
  }
}

async function findCommands(commands) {
  var commands$1 = Core__List.fromArray(commands);
  var step = async function (acc, commands) {
    if (!commands) {
      return {
              TAG: "Error",
              _0: acc
            };
    }
    var path = await search(commands.hd, undefined);
    if (path.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: path._0
            };
    } else {
      return await step({
                  hd: path._0,
                  tl: acc
                }, commands.tl);
    }
  };
  var error = await step(/* [] */0, commands$1);
  if (error.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: error._0
          };
  } else {
    return {
            TAG: "Error",
            _0: Core__List.toArray(error._0)
          };
  }
}

exports.$$Error = $$Error;
exports.searchWith = searchWith;
exports.search = search;
exports.findCommands = findCommands;
/* OS-AgdaModeVscode Not a pure module */
