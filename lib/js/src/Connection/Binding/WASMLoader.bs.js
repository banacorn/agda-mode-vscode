// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("rescript/lib/js/js_exn.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

var createFactory = (function(constructor, wasm, mod) { return new constructor(wasm, mod); });

async function prepareAgdaDataDir(extension, memfs) {
  try {
    var response = await fetch("https://github.com/andy0130tw/vscode-als-wasm-loader/releases/download/v0.2.1/agda-data.zip", {
          method: "GET",
          headers: Caml_option.some(new Headers({
                    "User-Agent": "agda-mode-vscode"
                  }))
        });
    if (!response.ok) {
      return {
              TAG: "Error",
              _0: "Failed to fetch agda-data.zip from GitHub: HTTP " + String(response.status)
            };
    }
    var arrayBufferData = await response.arrayBuffer();
    var zipData = new Uint8Array(arrayBufferData);
    var $$exports = extension.exports;
    await $$exports.prepareMemfsFromAgdaDataZip(zipData, memfs);
    return {
            TAG: "Ok",
            _0: Object.fromEntries([[
                    "Agda_datadir",
                    "/opt/agda"
                  ]])
          };
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return {
              TAG: "Error",
              _0: "Failed to download or prepare agda-data.zip"
            };
    }
    throw exn;
  }
}

async function make(extension, raw) {
  var $$exports = extension.exports;
  var agdaLanguageServerFactory = $$exports.AgdaLanguageServerFactory;
  var wasmAPILoader = $$exports.WasmAPILoader;
  var createUriConverters = $$exports.createUriConverters;
  var wasm = wasmAPILoader.load();
  var mod = await WebAssembly.compile(raw);
  var factory = createFactory(agdaLanguageServerFactory, wasm, mod);
  var memfsAgdaDataDir = await wasm.createMemoryFileSystem();
  return {
          factory: factory,
          wasm: wasm,
          memfsAgdaDataDir: memfsAgdaDataDir,
          createUriConverters: createUriConverters
        };
}

exports.createFactory = createFactory;
exports.prepareAgdaDataDir = prepareAgdaDataDir;
exports.make = make;
/* No side effect */
