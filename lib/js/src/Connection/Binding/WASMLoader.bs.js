// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("rescript/lib/js/js_exn.js");
var Vscode = require("vscode");
var FS$AgdaModeVscode = require("../../FS.bs.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

var createFactory = (function(constructor, wasm, mod) { return new constructor(wasm, mod); });

async function prepareAgdaDataDir(extension, memfs, dataPath) {
  var agdaDataZipPath = Vscode.Uri.file(dataPath);
  var zipData = await FS$AgdaModeVscode.readFile(agdaDataZipPath);
  if (zipData.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: "Failed to read agda-data.zip from " + dataPath
          };
  }
  try {
    var $$exports = extension.exports;
    await $$exports.prepareMemfsFromAgdaDataZip(zipData._0, memfs);
    return {
            TAG: "Ok",
            _0: undefined
          };
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return {
              TAG: "Error",
              _0: "Failed to prepare memory filesystem from agda-data.zip"
            };
    }
    throw exn;
  }
}

async function make(extension, raw) {
  var $$exports = extension.exports;
  var agdaLanguageServerFactory = $$exports.AgdaLanguageServerFactory;
  var wasmAPILoader = $$exports.WasmAPILoader;
  var createUriConverters = $$exports.createUriConverters;
  var wasm = wasmAPILoader.load();
  var mod = await WebAssembly.compile(raw);
  var factory = createFactory(agdaLanguageServerFactory, wasm, mod);
  var memfsAgdaDataDir = await wasm.createMemoryFileSystem();
  return {
          factory: factory,
          wasm: wasm,
          memfsAgdaDataDir: memfsAgdaDataDir,
          createUriConverters: createUriConverters
        };
}

exports.createFactory = createFactory;
exports.prepareAgdaDataDir = prepareAgdaDataDir;
exports.make = make;
/* vscode Not a pure module */
