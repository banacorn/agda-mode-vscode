// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("rescript/lib/js/js_exn.js");
var VSCode = require("rescript-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");
var Chan$AgdaModeVscode = require("../../../../Util/Chan.bs.js");
var Util$AgdaModeVscode = require("../../../../Util/Util.bs.js");
var VscodeLanguageclient = require("vscode-languageclient");
var Connection__Target__ALS__LSP__Binding$AgdaModeVscode = require("./Connection__Target__ALS__LSP__Binding.bs.js");

async function fromJsPromise(promise) {
  var result;
  try {
    result = await promise;
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    if (e.RE_EXN_ID === Js_exn.$$Error) {
      return {
              TAG: "Error",
              _0: e._1
            };
    }
    throw e;
  }
  return {
          TAG: "Ok",
          _0: result
        };
}

function onError(self, callback) {
  return new Vscode.Disposable(Chan$AgdaModeVscode.on(self.errorChan, (function (e) {
                    callback(e);
                  })));
}

function getErrorChan(self) {
  return self.errorChan;
}

function onNotification(self, callback) {
  return new Vscode.Disposable(Chan$AgdaModeVscode.on(self.notificationChan, callback));
}

function getNotificationChan(self) {
  return self.notificationChan;
}

function sendNotification(self, data) {
  return Util$AgdaModeVscode.Promise_.$$catch(async function () {
              await self.client.start();
              return await self.client.sendNotification(self.id, data);
            });
}

function sendRequest(self, data) {
  return Util$AgdaModeVscode.Promise_.$$catch(async function () {
              await self.client.start();
              return await self.client.sendRequest(self.id, data);
            });
}

function onRequest(self, callback) {
  return Connection__Target__ALS__LSP__Binding$AgdaModeVscode.Disposable.toVSCodeDisposable(self.client.onRequest(self.id, callback));
}

function destroy(self) {
  Chan$AgdaModeVscode.destroy(self.errorChan);
  Chan$AgdaModeVscode.destroy(self.notificationChan);
  return fromJsPromise(self.client.stop(200));
}

async function make(id, name, method, initializationOptions) {
  var errorChan = Chan$AgdaModeVscode.make();
  var serverOptions;
  if (method.TAG === "ViaPipe") {
    serverOptions = Connection__Target__ALS__LSP__Binding$AgdaModeVscode.ServerOptions.makeWithCommand(method._0, method._1, method._2);
  } else {
    var url = method._0;
    serverOptions = Connection__Target__ALS__LSP__Binding$AgdaModeVscode.ServerOptions.makeWithStreamInfo(url.port, url.hostname);
  }
  var documentSelector = [VSCode.StringOr.make({
          TAG: "Others",
          _0: {
            language: id,
            pattern: undefined,
            scheme: "file"
          }
        })];
  var synchronize = Vscode.workspace.createFileSystemWatcher('**/.clientrc', false, false, false);
  var errorHandler = Connection__Target__ALS__LSP__Binding$AgdaModeVscode.ErrorHandler.make((function (exn, _msg, _count) {
          Chan$AgdaModeVscode.emit(errorChan, exn);
          return "Shutdown";
        }), (function () {
          return "DoNotRestart";
        }));
  var clientOptions = Connection__Target__ALS__LSP__Binding$AgdaModeVscode.LanguageClientOptions.make(documentSelector, synchronize, errorHandler, initializationOptions);
  var languageClient = new VscodeLanguageclient.LanguageClient(id, name, serverOptions, clientOptions);
  var self_notificationChan = Chan$AgdaModeVscode.make();
  var self = {
    client: languageClient,
    id: id,
    name: name,
    method: method,
    errorChan: errorChan,
    notificationChan: self_notificationChan
  };
  var e = await fromJsPromise(languageClient.start());
  if (e.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: self
          };
  } else {
    return {
            TAG: "Error",
            _0: e._0
          };
  }
}

var Module = {
  make: make,
  destroy: destroy,
  sendRequest: sendRequest,
  onRequest: onRequest,
  sendNotification: sendNotification,
  onNotification: onNotification,
  onError: onError,
  getNotificationChan: getNotificationChan,
  getErrorChan: getErrorChan
};

var LSP;

var IPC;

exports.LSP = LSP;
exports.IPC = IPC;
exports.fromJsPromise = fromJsPromise;
exports.Module = Module;
exports.make = make;
exports.destroy = destroy;
exports.sendRequest = sendRequest;
exports.onRequest = onRequest;
exports.sendNotification = sendNotification;
exports.onNotification = onNotification;
exports.onError = onError;
exports.getNotificationChan = getNotificationChan;
exports.getErrorChan = getErrorChan;
/* vscode Not a pure module */
