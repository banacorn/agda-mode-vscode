// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("rescript/lib/js/js_exn.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");
var Item$AgdaModeVscode = require("../../../View/Component/Item.bs.js");
var Util$AgdaModeVscode = require("../../../Util/Util.bs.js");
var Json$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json.bs.js");
var Parser$AgdaModeVscode = require("../../../Parser/Parser.bs.js");
var Tokens$AgdaModeVscode = require("../../../Tokens.bs.js");
var Response$AgdaModeVscode = require("../../../Response.bs.js");
var Json_Decode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Decode.bs.js");
var Connection__Scheduler$AgdaModeVscode = require("../../Connection__Scheduler.bs.js");
var Connection__Target__ALS__LSP$AgdaModeVscode = require("./LSP/Connection__Target__ALS__LSP.bs.js");
var Connection__Target__ALS__Error$AgdaModeVscode = require("./Connection__Target__ALS__Error.bs.js");

var encode = Util$AgdaModeVscode.Encode.sum(function (x) {
      if (typeof x !== "object") {
        return {
                TAG: "TagOnly",
                _0: "CmdReqSYN",
                [Symbol.for("name")]: "TagOnly"
              };
      } else {
        return {
                TAG: "Payload",
                _0: "CmdReq",
                _1: x._0,
                [Symbol.for("name")]: "Payload"
              };
      }
    });

var CommandReq = {
  encode: encode
};

function fromJsError(error) {
  return (function (e) {return e.toString()})(error);
}

var decode = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "CmdRes" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.option(Connection__Target__ALS__Error$AgdaModeVscode.CommandErr.decode), (function (error) {
                            return {
                                    TAG: "Result",
                                    _0: error,
                                    [Symbol.for("name")]: "Result"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "CmdResACK" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.string, (function (version) {
                            return {
                                    TAG: "ACK",
                                    _0: version,
                                    [Symbol.for("name")]: "ACK"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        default:
          throw {
                RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                _1: "[Connection.Target.ALS.CommandRes] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

var CommandRes = {
  fromJsError: fromJsError,
  decode: decode
};

var decode$1 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "DisplayInfoAllGoalsWarnings" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Util$AgdaModeVscode.Decode.tuple5(Json_Decode$JsonCombinators.string, Json_Decode$JsonCombinators.array(Item$AgdaModeVscode.decode), Json_Decode$JsonCombinators.array(Item$AgdaModeVscode.decode), Json_Decode$JsonCombinators.array(Json_Decode$JsonCombinators.string), Json_Decode$JsonCombinators.array(Json_Decode$JsonCombinators.string)), (function (param) {
                            return {
                                    TAG: "AllGoalsWarnings",
                                    _0: param[0],
                                    _1: param[1],
                                    _2: param[2],
                                    _3: param[3],
                                    _4: param[4],
                                    [Symbol.for("name")]: "AllGoalsWarnings"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "DisplayInfoAuto" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.string, (function (body) {
                            return {
                                    TAG: "Auto",
                                    _0: body,
                                    [Symbol.for("name")]: "Auto"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "DisplayInfoCompilationOk" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.pair(Json_Decode$JsonCombinators.array(Json_Decode$JsonCombinators.string), Json_Decode$JsonCombinators.array(Json_Decode$JsonCombinators.string)), (function (param) {
                            return {
                                    TAG: "CompilationOk",
                                    _0: param[0],
                                    _1: param[1],
                                    [Symbol.for("name")]: "CompilationOk"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "DisplayInfoCurrentGoal" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Item$AgdaModeVscode.decode, (function (body) {
                            return {
                                    TAG: "CurrentGoal",
                                    _0: body,
                                    [Symbol.for("name")]: "CurrentGoal"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "DisplayInfoError" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.string, (function (body) {
                            return {
                                    TAG: "Error'",
                                    _0: body,
                                    [Symbol.for("name")]: "Error'"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "DisplayInfoGeneric" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.pair(Json_Decode$JsonCombinators.string, Json_Decode$JsonCombinators.array(Item$AgdaModeVscode.decode)), (function (param) {
                            return {
                                    TAG: "Generic",
                                    _0: param[0],
                                    _1: param[1],
                                    [Symbol.for("name")]: "Generic"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "DisplayInfoInferredType" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Item$AgdaModeVscode.decode, (function (body) {
                            return {
                                    TAG: "InferredType",
                                    _0: body,
                                    [Symbol.for("name")]: "InferredType"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "DisplayInfoNormalForm" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.string, (function (body) {
                            return {
                                    TAG: "NormalForm",
                                    _0: body,
                                    [Symbol.for("name")]: "NormalForm"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "DisplayInfoTime" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.string, (function (body) {
                            return {
                                    TAG: "Time",
                                    _0: body,
                                    [Symbol.for("name")]: "Time"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        default:
          throw {
                RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                _1: "[ALS.DisplayInfo] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

var DisplayInfo = {
  decode: decode$1
};

function toString(x) {
  if (typeof x !== "object") {
    return "========";
  }
  switch (x.TAG) {
    case "ResponseNonLast" :
        return Response$AgdaModeVscode.toString(x._0);
    case "ResponseLast" :
        return "[Last " + String(x._0) + "] " + Response$AgdaModeVscode.toString(x._1);
    case "ResponseParseError" :
        return Parser$AgdaModeVscode.$$Error.toString(x._0);
    
  }
}

var decode$2 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "ResponseClearHighlightingNotOnlyTokenBased" :
        case "ResponseClearHighlightingTokenBased" :
            return {
                    TAG: "TagOnly",
                    _0: {
                      TAG: "ResponseNonLast",
                      _0: "ClearHighlighting",
                      [Symbol.for("name")]: "ResponseNonLast"
                    },
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "ResponseClearRunningInfo" :
            return {
                    TAG: "TagOnly",
                    _0: {
                      TAG: "ResponseNonLast",
                      _0: "ClearRunningInfo",
                      [Symbol.for("name")]: "ResponseNonLast"
                    },
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "ResponseDisplayInfo" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(decode$1, (function (info) {
                            switch (info.TAG) {
                              case "Generic" :
                                  return {
                                          TAG: "ResponseNonLast",
                                          _0: {
                                            TAG: "DisplayInfo",
                                            _0: {
                                              TAG: "Generic",
                                              _0: info._0,
                                              _1: info._1,
                                              [Symbol.for("name")]: "Generic"
                                            },
                                            [Symbol.for("name")]: "DisplayInfo"
                                          },
                                          [Symbol.for("name")]: "ResponseNonLast"
                                        };
                              case "CompilationOk" :
                                  return {
                                          TAG: "ResponseNonLast",
                                          _0: {
                                            TAG: "DisplayInfo",
                                            _0: {
                                              TAG: "CompilationOkALS",
                                              _0: info._0,
                                              _1: info._1,
                                              [Symbol.for("name")]: "CompilationOkALS"
                                            },
                                            [Symbol.for("name")]: "DisplayInfo"
                                          },
                                          [Symbol.for("name")]: "ResponseNonLast"
                                        };
                              case "AllGoalsWarnings" :
                                  return {
                                          TAG: "ResponseNonLast",
                                          _0: {
                                            TAG: "DisplayInfo",
                                            _0: {
                                              TAG: "AllGoalsWarningsALS",
                                              _0: info._0,
                                              _1: info._1,
                                              _2: info._2,
                                              _3: info._3,
                                              _4: info._4,
                                              [Symbol.for("name")]: "AllGoalsWarningsALS"
                                            },
                                            [Symbol.for("name")]: "DisplayInfo"
                                          },
                                          [Symbol.for("name")]: "ResponseNonLast"
                                        };
                              case "CurrentGoal" :
                                  return {
                                          TAG: "ResponseNonLast",
                                          _0: {
                                            TAG: "DisplayInfo",
                                            _0: {
                                              TAG: "CurrentGoalALS",
                                              _0: info._0,
                                              [Symbol.for("name")]: "CurrentGoalALS"
                                            },
                                            [Symbol.for("name")]: "DisplayInfo"
                                          },
                                          [Symbol.for("name")]: "ResponseNonLast"
                                        };
                              case "InferredType" :
                                  return {
                                          TAG: "ResponseNonLast",
                                          _0: {
                                            TAG: "DisplayInfo",
                                            _0: {
                                              TAG: "InferredTypeALS",
                                              _0: info._0,
                                              [Symbol.for("name")]: "InferredTypeALS"
                                            },
                                            [Symbol.for("name")]: "DisplayInfo"
                                          },
                                          [Symbol.for("name")]: "ResponseNonLast"
                                        };
                              case "Auto" :
                                  return {
                                          TAG: "ResponseNonLast",
                                          _0: {
                                            TAG: "DisplayInfo",
                                            _0: {
                                              TAG: "Auto",
                                              _0: info._0,
                                              [Symbol.for("name")]: "Auto"
                                            },
                                            [Symbol.for("name")]: "DisplayInfo"
                                          },
                                          [Symbol.for("name")]: "ResponseNonLast"
                                        };
                              case "Error'" :
                                  return {
                                          TAG: "ResponseNonLast",
                                          _0: {
                                            TAG: "DisplayInfo",
                                            _0: {
                                              TAG: "Error",
                                              _0: info._0,
                                              [Symbol.for("name")]: "Error"
                                            },
                                            [Symbol.for("name")]: "DisplayInfo"
                                          },
                                          [Symbol.for("name")]: "ResponseNonLast"
                                        };
                              case "Time" :
                                  return {
                                          TAG: "ResponseNonLast",
                                          _0: {
                                            TAG: "DisplayInfo",
                                            _0: {
                                              TAG: "Time",
                                              _0: info._0,
                                              [Symbol.for("name")]: "Time"
                                            },
                                            [Symbol.for("name")]: "DisplayInfo"
                                          },
                                          [Symbol.for("name")]: "ResponseNonLast"
                                        };
                              case "NormalForm" :
                                  return {
                                          TAG: "ResponseNonLast",
                                          _0: {
                                            TAG: "DisplayInfo",
                                            _0: {
                                              TAG: "NormalForm",
                                              _0: info._0,
                                              [Symbol.for("name")]: "NormalForm"
                                            },
                                            [Symbol.for("name")]: "DisplayInfo"
                                          },
                                          [Symbol.for("name")]: "ResponseNonLast"
                                        };
                              
                            }
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "ResponseDoneAborting" :
            return {
                    TAG: "TagOnly",
                    _0: {
                      TAG: "ResponseNonLast",
                      _0: "DoneAborting",
                      [Symbol.for("name")]: "ResponseNonLast"
                    },
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "ResponseDoneExiting" :
            return {
                    TAG: "TagOnly",
                    _0: {
                      TAG: "ResponseNonLast",
                      _0: "DoneExiting",
                      [Symbol.for("name")]: "ResponseNonLast"
                    },
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "ResponseEnd" :
            return {
                    TAG: "TagOnly",
                    _0: "ResponseEnd",
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "ResponseGiveAction" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.pair(Json_Decode$JsonCombinators.$$int, Response$AgdaModeVscode.GiveAction.decode), (function (param) {
                            return {
                                    TAG: "ResponseNonLast",
                                    _0: {
                                      TAG: "GiveAction",
                                      _0: param[0],
                                      _1: param[1],
                                      [Symbol.for("name")]: "GiveAction"
                                    },
                                    [Symbol.for("name")]: "ResponseNonLast"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "ResponseHighlightingInfoDirect" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Tokens$AgdaModeVscode.Token.decodeResponseHighlightingInfoDirect, (function (param) {
                            return {
                                    TAG: "ResponseNonLast",
                                    _0: {
                                      TAG: "HighlightingInfoDirect",
                                      _0: param[0],
                                      _1: param[1],
                                      [Symbol.for("name")]: "HighlightingInfoDirect"
                                    },
                                    [Symbol.for("name")]: "ResponseNonLast"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "ResponseHighlightingInfoIndirect" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.string, (function (filePath) {
                            return {
                                    TAG: "ResponseNonLast",
                                    _0: {
                                      TAG: "HighlightingInfoIndirectJSON",
                                      _0: filePath,
                                      [Symbol.for("name")]: "HighlightingInfoIndirectJSON"
                                    },
                                    [Symbol.for("name")]: "ResponseNonLast"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "ResponseInteractionPoints" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.array(Json_Decode$JsonCombinators.$$int), (function (ids) {
                            return {
                                    TAG: "ResponseLast",
                                    _0: 1,
                                    _1: {
                                      TAG: "InteractionPoints",
                                      _0: ids,
                                      [Symbol.for("name")]: "InteractionPoints"
                                    },
                                    [Symbol.for("name")]: "ResponseLast"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "ResponseJumpToError" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.pair(Json_Decode$JsonCombinators.string, Json_Decode$JsonCombinators.$$int), (function (param) {
                            return {
                                    TAG: "ResponseLast",
                                    _0: 3,
                                    _1: {
                                      TAG: "JumpToError",
                                      _0: param[0],
                                      _1: param[1],
                                      [Symbol.for("name")]: "JumpToError"
                                    },
                                    [Symbol.for("name")]: "ResponseLast"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "ResponseMakeCaseExtendedLambda" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.array(Json_Decode$JsonCombinators.string), (function (payload) {
                            return {
                                    TAG: "ResponseLast",
                                    _0: 2,
                                    _1: {
                                      TAG: "MakeCase",
                                      _0: "ExtendedLambda",
                                      _1: payload,
                                      [Symbol.for("name")]: "MakeCase"
                                    },
                                    [Symbol.for("name")]: "ResponseLast"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "ResponseMakeCaseFunction" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.array(Json_Decode$JsonCombinators.string), (function (payload) {
                            return {
                                    TAG: "ResponseLast",
                                    _0: 2,
                                    _1: {
                                      TAG: "MakeCase",
                                      _0: "Function",
                                      _1: payload,
                                      [Symbol.for("name")]: "MakeCase"
                                    },
                                    [Symbol.for("name")]: "ResponseLast"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "ResponseRunningInfo" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.pair(Json_Decode$JsonCombinators.$$int, Json_Decode$JsonCombinators.string), (function (param) {
                            return {
                                    TAG: "ResponseNonLast",
                                    _0: {
                                      TAG: "RunningInfo",
                                      _0: param[0],
                                      _1: param[1],
                                      [Symbol.for("name")]: "RunningInfo"
                                    },
                                    [Symbol.for("name")]: "ResponseNonLast"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "ResponseSolveAll" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.array(Json_Decode$JsonCombinators.pair(Json_Decode$JsonCombinators.$$int, Json_Decode$JsonCombinators.string)), (function (payloads) {
                            return {
                                    TAG: "ResponseLast",
                                    _0: 2,
                                    _1: {
                                      TAG: "SolveAll",
                                      _0: payloads,
                                      [Symbol.for("name")]: "SolveAll"
                                    },
                                    [Symbol.for("name")]: "ResponseLast"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "ResponseStatus" :
            return {
                    TAG: "Payload",
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.pair(Json_Decode$JsonCombinators.bool, Json_Decode$JsonCombinators.bool), (function (param) {
                            return {
                                    TAG: "ResponseNonLast",
                                    _0: {
                                      TAG: "Status",
                                      _0: param[0],
                                      _1: param[1],
                                      [Symbol.for("name")]: "Status"
                                    },
                                    [Symbol.for("name")]: "ResponseNonLast"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        default:
          throw {
                RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                _1: "[ALS.Response] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

var ALSResponse = {
  DisplayInfo: DisplayInfo,
  toString: toString,
  decode: decode$2
};

function decodeResponse(json) {
  var reaction = Json$JsonCombinators.decode(json, decode$2);
  if (reaction.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: reaction._0,
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "CannotDecodeResponse",
              _0: reaction._0,
              _1: json,
              [Symbol.for("name")]: "CannotDecodeResponse"
            },
            [Symbol.for("name")]: "Error"
          };
  }
}

async function sendRequestPrim(client, request) {
  var json;
  try {
    json = await Connection__Target__ALS__LSP$AgdaModeVscode.sendRequest(client, encode(request));
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return {
              TAG: "Error",
              _0: {
                TAG: "ConnectionError",
                _0: exn._1,
                [Symbol.for("name")]: "ConnectionError"
              },
              [Symbol.for("name")]: "Error"
            };
    }
    throw exn;
  }
  if (json.TAG === "Ok") {
    var json$1 = json._0;
    var response = Json$JsonCombinators.decode(json$1, decode);
    if (response.TAG === "Ok") {
      return {
              TAG: "Ok",
              _0: response._0,
              [Symbol.for("name")]: "Ok"
            };
    } else {
      return {
              TAG: "Error",
              _0: {
                TAG: "CannotDecodeCommandRes",
                _0: response._0,
                _1: json$1,
                [Symbol.for("name")]: "CannotDecodeCommandRes"
              },
              [Symbol.for("name")]: "Error"
            };
    }
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "ConnectionError",
              _0: json._0,
              [Symbol.for("name")]: "ConnectionError"
            },
            [Symbol.for("name")]: "Error"
          };
  }
}

async function make(method, options) {
  var error;
  try {
    error = await Connection__Target__ALS__LSP$AgdaModeVscode.make("agda", "Agda Language Server", method, options);
  }
  catch (raw_error){
    var error$1 = Caml_js_exceptions.internalToOCamlException(raw_error);
    if (error$1.RE_EXN_ID === Js_exn.$$Error) {
      return {
              TAG: "Error",
              _0: {
                TAG: "ConnectionError",
                _0: error$1._1,
                [Symbol.for("name")]: "ConnectionError"
              },
              [Symbol.for("name")]: "Error"
            };
    }
    throw error$1;
  }
  if (error.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: {
              TAG: "ConnectionError",
              _0: error._0,
              [Symbol.for("name")]: "ConnectionError"
            },
            [Symbol.for("name")]: "Error"
          };
  }
  var client = error._0;
  var error$2 = await sendRequestPrim(client, "SYN");
  if (error$2.TAG !== "Ok") {
    return {
            TAG: "Error",
            _0: error$2._0,
            [Symbol.for("name")]: "Error"
          };
  }
  var agdaVersion = error$2._0;
  if (agdaVersion.TAG === "ACK") {
    return {
            TAG: "Ok",
            _0: {
              client: client,
              agdaVersion: agdaVersion._0,
              method: method
            },
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: "Error",
            _0: "Initialize",
            [Symbol.for("name")]: "Error"
          };
  }
}

async function destroy(self) {
  var result;
  try {
    result = await Connection__Target__ALS__LSP$AgdaModeVscode.destroy(self.client);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return {
              TAG: "Error",
              _0: {
                TAG: "ConnectionError",
                _0: exn._1,
                [Symbol.for("name")]: "ConnectionError"
              },
              [Symbol.for("name")]: "Error"
            };
    }
    throw exn;
  }
  if (result.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: result._0,
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: "Error",
            _0: {
              TAG: "ConnectionError",
              _0: result._0,
              [Symbol.for("name")]: "ConnectionError"
            },
            [Symbol.for("name")]: "Error"
          };
  }
}

async function sendRequest(self, request, handler) {
  var handler$1 = function (response) {
    return handler(response);
  };
  var scheduler = Connection__Scheduler$AgdaModeVscode.make();
  var match = Util$AgdaModeVscode.Promise_.pending();
  var resolve = match[1];
  var stopListeningForNotifications = Connection__Target__ALS__LSP$AgdaModeVscode.onRequest(self.client, (async function (json) {
          var error = decodeResponse(json);
          if (error.TAG === "Ok") {
            var responses = error._0;
            if (typeof responses !== "object") {
              resolve({
                    TAG: "Ok",
                    _0: undefined,
                    [Symbol.for("name")]: "Ok"
                  });
            } else {
              switch (responses.TAG) {
                case "ResponseNonLast" :
                    Connection__Scheduler$AgdaModeVscode.runNonLast(scheduler, handler$1, responses._0);
                    break;
                case "ResponseLast" :
                    Connection__Scheduler$AgdaModeVscode.addLast(scheduler, responses._0, responses._1);
                    break;
                case "ResponseParseError" :
                    resolve({
                          TAG: "Error",
                          _0: {
                            TAG: "ResponseParseError",
                            _0: responses._0,
                            [Symbol.for("name")]: "ResponseParseError"
                          },
                          [Symbol.for("name")]: "Error"
                        });
                    break;
                
              }
            }
          } else {
            resolve({
                  TAG: "Error",
                  _0: error._0,
                  [Symbol.for("name")]: "Error"
                });
          }
          return {
                  TAG: "Ok",
                  _0: null,
                  [Symbol.for("name")]: "Ok"
                };
        }));
  var error = await sendRequestPrim(self.client, {
        TAG: "Command",
        _0: request,
        [Symbol.for("name")]: "Command"
      });
  var result;
  if (error.TAG === "Ok") {
    var match$1 = error._0;
    if (match$1.TAG === "ACK") {
      result = {
        TAG: "Error",
        _0: "Initialize",
        [Symbol.for("name")]: "Error"
      };
    } else {
      var error$1 = match$1._0;
      result = error$1 !== undefined ? ({
            TAG: "Error",
            _0: {
              TAG: "SendCommand",
              _0: error$1,
              [Symbol.for("name")]: "SendCommand"
            },
            [Symbol.for("name")]: "Error"
          }) : await match[0];
    }
  } else {
    result = {
      TAG: "Error",
      _0: error._0,
      [Symbol.for("name")]: "Error"
    };
  }
  stopListeningForNotifications.dispose();
  await Connection__Scheduler$AgdaModeVscode.runLast(scheduler, handler$1);
  return result;
}

function getIPCMethod(conn) {
  return conn.method;
}

var Module = {
  make: make,
  destroy: destroy,
  sendRequest: sendRequest,
  getIPCMethod: getIPCMethod
};

var $$Scheduler;

var $$Error;

var LSP;

exports.$$Scheduler = $$Scheduler;
exports.$$Error = $$Error;
exports.LSP = LSP;
exports.CommandReq = CommandReq;
exports.CommandRes = CommandRes;
exports.ALSResponse = ALSResponse;
exports.Module = Module;
exports.make = make;
exports.destroy = destroy;
exports.sendRequest = sendRequest;
exports.getIPCMethod = getIPCMethod;
/* encode Not a pure module */
