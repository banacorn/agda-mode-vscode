// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("rescript/lib/js/caml_option.js");
var Util$AgdaModeVscode = require("../../Util/Util.bs.js");
var Connection__Process$AgdaModeVscode = require("../Connection__Process.bs.js");

function toString(x) {
  if (typeof x !== "object") {
    return "process hanging for more than 1 sec";
  }
  switch (x.TAG) {
    case "PathMalformed" :
        return "path malformed: " + x._0;
    case "NotFound" :
        return "command not found";
    case "FromStderr" :
        var exitCode = x._0;
        if (exitCode !== undefined) {
          return "stderr: \"" + x._1 + "\" with exit code: " + String(exitCode);
        } else {
          return "stderr: \"" + x._1 + "\"";
        }
    case "FromOnError" :
        return "on error: " + x._0;
    
  }
}

var $$Error = {
  toString: toString
};

async function run(path, args, timeoutOpt) {
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 10000;
  var $$process = Connection__Process$AgdaModeVscode.make(path, args);
  var match = Util$AgdaModeVscode.Promise_.pending();
  var resolve = match[1];
  if (path === "") {
    resolve({
          TAG: "Error",
          _0: {
            TAG: "PathMalformed",
            _0: "the path must not be empty"
          }
        });
  }
  var hangTimeout = {
    contents: Caml_option.some(setTimeout((function () {
                resolve({
                      TAG: "Error",
                      _0: "ProcessHanging"
                    });
              }), timeout))
  };
  var stdout = {
    contents: ""
  };
  var stderr = {
    contents: ""
  };
  var destructor = Connection__Process$AgdaModeVscode.onOutput($$process, (function (output) {
          var timeout = hangTimeout.contents;
          if (timeout !== undefined) {
            clearTimeout(Caml_option.valFromOption(timeout));
          }
          switch (output.TAG) {
            case "Stdout" :
                stdout.contents = stdout.contents + output._0;
                return ;
            case "Stderr" :
                stderr.contents = stderr.contents + output._0;
                return ;
            case "Event" :
                var code = output._0;
                if (typeof code !== "object") {
                  return resolve({
                              TAG: "Ok",
                              _0: stdout.contents
                            });
                }
                if (code.TAG === "OnError") {
                  var msg = code._0;
                  if (msg !== "") {
                    if (Connection__Process$AgdaModeVscode.errorMessageIndicatesNotFound(msg)) {
                      return resolve({
                                  TAG: "Error",
                                  _0: {
                                    TAG: "NotFound",
                                    _0: path
                                  }
                                });
                    } else {
                      return resolve({
                                  TAG: "Error",
                                  _0: {
                                    TAG: "FromOnError",
                                    _0: msg
                                  }
                                });
                    }
                  } else if (stderr.contents !== "") {
                    if (Connection__Process$AgdaModeVscode.errorMessageIndicatesNotFound(stderr.contents)) {
                      return resolve({
                                  TAG: "Error",
                                  _0: {
                                    TAG: "NotFound",
                                    _0: path
                                  }
                                });
                    } else {
                      return resolve({
                                  TAG: "Error",
                                  _0: {
                                    TAG: "FromStderr",
                                    _0: undefined,
                                    _1: stderr.contents
                                  }
                                });
                    }
                  } else {
                    return resolve({
                                TAG: "Ok",
                                _0: stdout.contents
                              });
                  }
                }
                var code$1 = code._0;
                if (code$1 !== 0) {
                  if (code$1 !== 127 && !Connection__Process$AgdaModeVscode.errorMessageIndicatesNotFound(stderr.contents)) {
                    return resolve({
                                TAG: "Error",
                                _0: {
                                  TAG: "FromStderr",
                                  _0: code$1,
                                  _1: stderr.contents
                                }
                              });
                  } else {
                    return resolve({
                                TAG: "Error",
                                _0: {
                                  TAG: "NotFound",
                                  _0: path
                                }
                              });
                  }
                } else {
                  return resolve({
                              TAG: "Ok",
                              _0: stdout.contents
                            });
                }
            
          }
        }));
  var result = await match[0];
  destructor();
  return result;
}

var Process;

exports.Process = Process;
exports.$$Error = $$Error;
exports.run = run;
/* Util-AgdaModeVscode Not a pure module */
