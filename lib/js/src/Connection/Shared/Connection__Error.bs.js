// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Connection__Command$AgdaModeVscode = require("../Resolver/Connection__Command.bs.js");
var Connection__Download$AgdaModeVscode = require("../Resolver/Connection__Download.bs.js");
var Connection__Endpoint$AgdaModeVscode = require("../Endpoint/Connection__Endpoint.bs.js");
var Connection__Endpoint__ALS__Error$AgdaModeVscode = require("../Endpoint/ALS/Connection__Endpoint__ALS__Error.bs.js");
var Connection__Endpoint__Agda__Error$AgdaModeVscode = require("../Endpoint/Agda/Connection__Endpoint__Agda__Error.bs.js");

function toString(attempts) {
  return (
          Object.entries(attempts.endpoints).length === 0 ? "Tried to connect with the path from the settings and the system but there are none.\n" : "Tried to connect with these paths but all failed:\n" + Object.entries(attempts.endpoints).map(function (param) {
                    return "  " + param[0] + ": " + Connection__Endpoint$AgdaModeVscode.$$Error.toString(param[1]);
                  }).join("\n") + "\n"
        ) + (
          attempts.commands.length === 0 ? "" : attempts.commands.map(Connection__Command$AgdaModeVscode.$$Error.toString).join("\n")
        );
}

var Attempts = {
  toString: toString
};

function toString$1(x) {
  switch (x.TAG) {
    case "NoDownloadALS" :
        return toString(x._0) + "\nPrebuilt Agda Language Server available for download but you opted not to.\n";
    case "DownloadALS" :
        return toString(x._0) + "\nTried to download the Agda Language Server but failed:\n" + Connection__Download$AgdaModeVscode.$$Error.toString(x._1);
    case "Endpoint" :
        return "Tried to connect with the path `" + x._0 + "` but failed:\n" + Connection__Endpoint$AgdaModeVscode.$$Error.toString(x._1);
    
  }
}

var Construction = {
  Attempts: Attempts,
  toString: toString$1
};

function toString$2(x) {
  switch (x.TAG) {
    case "Agda" :
        return Connection__Endpoint__Agda__Error$AgdaModeVscode.toString(x._0);
    case "ALS" :
        return Connection__Endpoint__ALS__Error$AgdaModeVscode.toString(x._0);
    case "Construction" :
        return [
                "Connection error",
                toString$1(x._0)
              ];
    
  }
}

exports.Construction = Construction;
exports.toString = toString$2;
/* Connection__Command-AgdaModeVscode Not a pure module */
