// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Core__Dict = require("@rescript/core/lib/js/src/Core__Dict.bs.js");
var Core__Array = require("@rescript/core/lib/js/src/Core__Array.bs.js");
var Connection__Command$AgdaModeVscode = require("../Resolver/Connection__Command.bs.js");
var Connection__Download$AgdaModeVscode = require("../Download/Connection__Download.bs.js");
var Connection__Endpoint__Error$AgdaModeVscode = require("../Endpoint/Connection__Endpoint__Error.bs.js");
var Connection__Endpoint__ALS__Error$AgdaModeVscode = require("../Endpoint/ALS/Connection__Endpoint__ALS__Error.bs.js");
var Connection__Endpoint__Agda__Error$AgdaModeVscode = require("../Endpoint/Agda/Connection__Endpoint__Agda__Error.bs.js");

function toString(x) {
  var endpointsStr = Object.entries(x.endpoints).length === 0 ? "Tried to connect with the path from the settings and the system but there are none.\n" : "Tried to connect with these paths but all failed:\n" + Object.entries(x.endpoints).map(function (param) {
            return "  " + param[0] + ": " + Connection__Endpoint__Error$AgdaModeVscode.toString(param[1]);
          }).join("\n") + "\n";
  var commandsStr = Object.entries(x.commands).length === 0 ? "" : Object.entries(x.commands).map(function (param) {
            return "Tried to connect with `" + param[0] + "` but failed:\n. " + Connection__Command$AgdaModeVscode.$$Error.toString(param[1]);
          }).join("\n") + "\n";
  var error = x.download;
  var downloadStr = error !== undefined ? "Tried to download the Agda Language Server but failed:\n" + Connection__Download$AgdaModeVscode.$$Error.toString(error) : "Opted not to download prebuilt Agda Language Server";
  return endpointsStr + commandsStr + downloadStr;
}

function fromEndpointError(path, error) {
  return {
          endpoints: Object.fromEntries([[
                  path,
                  error
                ]]),
          commands: {},
          download: undefined
        };
}

function fromCommandError(command, error) {
  return {
          endpoints: {},
          commands: Object.fromEntries([[
                  command,
                  error
                ]]),
          download: undefined
        };
}

function fromDownloadError(error) {
  return {
          endpoints: {},
          commands: {},
          download: error
        };
}

function make() {
  return {
          endpoints: {},
          commands: {},
          download: undefined
        };
}

function merge(x, y) {
  var dict = {};
  var dict$1 = {};
  var match = x.download;
  var match$1 = y.download;
  return {
          endpoints: (Core__Dict.forEachWithKey(x.endpoints, (function (error, path) {
                    dict[path] = error;
                  })), Core__Dict.forEachWithKey(y.endpoints, (function (error, path) {
                    dict[path] = error;
                  })), dict),
          commands: (Core__Dict.forEachWithKey(x.commands, (function (error, command) {
                    dict$1[command] = error;
                  })), Core__Dict.forEachWithKey(y.commands, (function (error, command) {
                    dict$1[command] = error;
                  })), dict$1),
          download: match !== undefined ? match : (
              match$1 !== undefined ? match$1 : undefined
            )
        };
}

function mergeMany(xs) {
  return Core__Array.reduce(xs, {
              endpoints: {},
              commands: {},
              download: undefined
            }, (function (acc, x) {
                return merge(acc, x);
              }));
}

var Construction = {
  toString: toString,
  fromEndpointError: fromEndpointError,
  fromCommandError: fromCommandError,
  fromDownloadError: fromDownloadError,
  make: make,
  merge: merge,
  mergeMany: mergeMany
};

function toString$1(x) {
  switch (x.TAG) {
    case "Agda" :
        return Connection__Endpoint__Agda__Error$AgdaModeVscode.toString(x._0);
    case "ALS" :
        return Connection__Endpoint__ALS__Error$AgdaModeVscode.toString(x._0);
    case "Construction" :
        return [
                "Cannot Establish Connection",
                toString(x._0)
              ];
    
  }
}

exports.Construction = Construction;
exports.toString = toString$1;
/* Connection__Command-AgdaModeVscode Not a pure module */
