// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Nodeurl = require("node:url");
var Nodepath = require("node:path");
var Untildify = require("untildify");
var OS$AgdaModeVscode = require("../../Util/OS.bs.js");

function parse(raw) {
  var result;
  try {
    result = new Nodeurl.URL(raw);
  }
  catch (exn){
    result = undefined;
  }
  var result$1 = result !== undefined && result.protocol === "lsp:" ? result : undefined;
  if (result$1 !== undefined) {
    return {
            TAG: "LspURI",
            _0: raw,
            _1: result$1
          };
  }
  var filePath = raw.startsWith("file://") ? Vscode.Uri.parse(raw).fsPath : raw;
  var path = Untildify(filePath);
  var path$1 = Nodepath.normalize(path);
  var path$2 = OS$AgdaModeVscode.onUnix ? path$1 : path$1.replace(/^\\([a-zA-Z])\\/, "$1\:\\");
  var absolutePath = Nodepath.resolve(path$2);
  return {
          TAG: "FileURI",
          _0: raw,
          _1: Vscode.Uri.file(absolutePath)
        };
}

function getOriginalPath(uri) {
  return uri._0;
}

function toString(uri) {
  if (uri.TAG === "FileURI") {
    return uri._1.toString();
  } else {
    return uri._1.toString();
  }
}

function equal(x, y) {
  if (x.TAG === "FileURI") {
    if (y.TAG === "FileURI") {
      return x._1.toString() === y._1.toString();
    } else {
      return false;
    }
  } else if (y.TAG === "FileURI") {
    return false;
  } else {
    return x._1.toString() === y._1.toString();
  }
}

exports.parse = parse;
exports.getOriginalPath = getOriginalPath;
exports.toString = toString;
exports.equal = equal;
/* vscode Not a pure module */
