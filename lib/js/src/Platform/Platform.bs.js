// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Connection$AgdaModeVscode = require("../Connection/Connection.bs.js");
var State__Connection$AgdaModeVscode = require("../State/State__Connection.bs.js");
var Connection__Download__Platform$AgdaModeVscode = require("../Connection/Download/Connection__Download__Platform.bs.js");

function alreadyDownloaded(globalStorageUri) {
  return Connection$AgdaModeVscode.LatestALS.alreadyDownloaded(globalStorageUri);
}

function downloadLatestALS(memento, globalStorageUri) {
  return Connection$AgdaModeVscode.LatestALS.download(memento, globalStorageUri);
}

var Desktop = {
  determinePlatform: Connection__Download__Platform$AgdaModeVscode.determine,
  findCommands: Connection$AgdaModeVscode.findCommands,
  alreadyDownloaded: alreadyDownloaded,
  downloadLatestALS: downloadLatestALS,
  getInstalledTargetsAndPersistThem: Connection$AgdaModeVscode.getInstalledTargetsAndPersistThem,
  askUserAboutDownloadPolicy: State__Connection$AgdaModeVscode.askUserAboutDownloadPolicy
};

function determinePlatform() {
  var unsupportedRaw = {
    os: "web",
    dist: "browser",
    codename: "web",
    release: "1.0"
  };
  return Promise.resolve({
              TAG: "Error",
              _0: unsupportedRaw
            });
}

function findCommands(_commands) {
  return Promise.resolve({
              TAG: "Error",
              _0: [{
                  TAG: "NotFound",
                  _0: "Platform not supported in web environment"
                }]
            });
}

function alreadyDownloaded$1(_globalStorageUri) {
  return function () {
    return Promise.resolve(undefined);
  };
}

function downloadLatestALS$1(_memento, _globalStorageUri) {
  return function (_platform) {
    return Promise.resolve({
                TAG: "Error",
                _0: "CannotFindCompatibleALSRelease"
              });
  };
}

function getInstalledTargetsAndPersistThem(_globalStorageUri) {
  return Promise.resolve(Object.fromEntries([]));
}

function askUserAboutDownloadPolicy() {
  return Promise.resolve("No");
}

var Web = {
  determinePlatform: determinePlatform,
  findCommands: findCommands,
  alreadyDownloaded: alreadyDownloaded$1,
  downloadLatestALS: downloadLatestALS$1,
  getInstalledTargetsAndPersistThem: getInstalledTargetsAndPersistThem,
  askUserAboutDownloadPolicy: askUserAboutDownloadPolicy
};

function makeDesktop() {
  return Desktop;
}

function makeWeb() {
  return Web;
}

function makePlatform(isWeb) {
  if (isWeb) {
    return Web;
  } else {
    return Desktop;
  }
}

exports.Desktop = Desktop;
exports.Web = Web;
exports.makeDesktop = makeDesktop;
exports.makeWeb = makeWeb;
exports.makePlatform = makePlatform;
/* Connection-AgdaModeVscode Not a pure module */
